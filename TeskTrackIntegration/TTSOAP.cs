// --------------------------------------------------------------------------------------------------------------------
// <copyright file="TTSOAP.cs" company="Copyright © 2015 jmecsoftware">
//     Copyright (C) 2014 [jmecsoftware, jmecsoftware2014@tekla.com]
// </copyright>
// --------------------------------------------------------------------------------------------------------------------
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. 
// You should have received a copy of the GNU Lesser General Public License along with this program; if not, write to the Free
// Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
// --------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
// 
#pragma warning disable 1591

namespace TestTrackConnector
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ttsoapcgi", Namespace="urn:testtrack-interface")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CUserLicense))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CEventDefinition))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CVersionInfo))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFile))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CItemWithDBRecordId))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CRecordData))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CRecordRowSoap))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFilter))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTableColumn))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFieldValue))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTableField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDatabaseTable))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CProjectDataOption))]
    public partial class ttsoapcgi : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getDatabaseListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProjectDataOptionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback DatabaseLogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProjectLogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback DatabaseLogoffOperationCompleted;
        
        private System.Threading.SendOrPostCallback formattedTextSupportOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTableListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDropdownFieldForTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDropdownFieldValuesForTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback addDropdownFieldValuesForTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinkDefinitionValuesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getColumnsForTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFilterListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFilterListForTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRecordListForTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTestConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTestConfigByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTestConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback editTestConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback editTestConfigByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveTestConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteTestConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteTestConfigByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveTestConfigOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAttachmentTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getReportRunResultsByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getReportRunResultsByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEventDefinitionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDefectEventDefinitionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCustomFieldsDefinitionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDefectCustomFieldsDefinitionListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDefectByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback addDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback addDefectWithLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteDefectByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback editDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback editDefectByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDefectAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTaskByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteTaskByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback editTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback editTaskByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGlobalUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGlobalCustomerListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserLicenseListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserForCurrentSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback addUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback editUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback editUserByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteUserByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback promoteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback addGlobalUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCustomerByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback addCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback editCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback editCustomerByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteCustomerByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback promoteCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback addGlobalCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLinksForItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLinksForDefectOperationCompleted;
        
        private System.Threading.SendOrPostCallback getLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback addLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback editLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveLinkOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTestVariantTypesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTestRunStepsModesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTestCaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTestCaseByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback addTestCaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteTestCaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteTestCaseByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback editTestCaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback editTestCaseByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveTestCaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveTestCaseOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTestRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTestRunByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteTestRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteTestRunByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback editTestRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback editTestRunByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveTestRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveTestRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback createDefectForTestRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback generateTestRunsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFolderTypeByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFolderTypeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback addFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback editFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback editFolderByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFolderByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteFolderByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback addEntityToFolderByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeEntityFromFolderByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEntityListForFolderByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFolderListForEntityByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFolderPathSeparatorOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRootPublicFolderPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRootPrivateFolderPathOperationCompleted;
        
        private System.Threading.SendOrPostCallback editFolderItemRankOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveFolderItemRankOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveFolderItemRankOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRequirementOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRequirementByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback addRequirementOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteRequirementOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteRequirementByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback editRequirementOperationCompleted;
        
        private System.Threading.SendOrPostCallback editRequirementByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveRequirementOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveRequirementOperationCompleted;
        
        private System.Threading.SendOrPostCallback appendToRequirementDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentIDsForRequirementOperationCompleted;
        
        private System.Threading.SendOrPostCallback changeRequirementTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRequirementDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRequirementDocumentByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback addRequirementDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteRequirementDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteRequirementDocumentByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback editRequirementDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback editRequirementDocumentByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveRequirementDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback cancelSaveRequirementDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback createSnapshotOperationCompleted;
        
        private System.Threading.SendOrPostCallback getRequirementIDsForDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFolderTreeByRecordIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFolderTreeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getItemHyperlinksOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ttsoapcgi(string url) {
            this.Url = url;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getDatabaseListCompletedEventHandler getDatabaseListCompleted;
        
        /// <remarks/>
        public event getProjectListCompletedEventHandler getProjectListCompleted;
        
        /// <remarks/>
        public event getProjectDataOptionListCompletedEventHandler getProjectDataOptionListCompleted;
        
        /// <remarks/>
        public event DatabaseLogonCompletedEventHandler DatabaseLogonCompleted;
        
        /// <remarks/>
        public event ProjectLogonCompletedEventHandler ProjectLogonCompleted;
        
        /// <remarks/>
        public event DatabaseLogoffCompletedEventHandler DatabaseLogoffCompleted;
        
        /// <remarks/>
        public event formattedTextSupportCompletedEventHandler formattedTextSupportCompleted;
        
        /// <remarks/>
        public event getTableListCompletedEventHandler getTableListCompleted;
        
        /// <remarks/>
        public event getDropdownFieldForTableCompletedEventHandler getDropdownFieldForTableCompleted;
        
        /// <remarks/>
        public event getDropdownFieldValuesForTableCompletedEventHandler getDropdownFieldValuesForTableCompleted;
        
        /// <remarks/>
        public event addDropdownFieldValuesForTableCompletedEventHandler addDropdownFieldValuesForTableCompleted;
        
        /// <remarks/>
        public event GetLinkDefinitionValuesCompletedEventHandler GetLinkDefinitionValuesCompleted;
        
        /// <remarks/>
        public event getColumnsForTableCompletedEventHandler getColumnsForTableCompleted;
        
        /// <remarks/>
        public event getFilterListCompletedEventHandler getFilterListCompleted;
        
        /// <remarks/>
        public event getFilterListForTableCompletedEventHandler getFilterListForTableCompleted;
        
        /// <remarks/>
        public event getRecordListForTableCompletedEventHandler getRecordListForTableCompleted;
        
        /// <remarks/>
        public event getTestConfigCompletedEventHandler getTestConfigCompleted;
        
        /// <remarks/>
        public event getTestConfigByRecordIDCompletedEventHandler getTestConfigByRecordIDCompleted;
        
        /// <remarks/>
        public event addTestConfigCompletedEventHandler addTestConfigCompleted;
        
        /// <remarks/>
        public event editTestConfigCompletedEventHandler editTestConfigCompleted;
        
        /// <remarks/>
        public event editTestConfigByRecordIDCompletedEventHandler editTestConfigByRecordIDCompleted;
        
        /// <remarks/>
        public event saveTestConfigCompletedEventHandler saveTestConfigCompleted;
        
        /// <remarks/>
        public event deleteTestConfigCompletedEventHandler deleteTestConfigCompleted;
        
        /// <remarks/>
        public event deleteTestConfigByRecordIDCompletedEventHandler deleteTestConfigByRecordIDCompleted;
        
        /// <remarks/>
        public event cancelSaveTestConfigCompletedEventHandler cancelSaveTestConfigCompleted;
        
        /// <remarks/>
        public event getAttachmentTypesCompletedEventHandler getAttachmentTypesCompleted;
        
        /// <remarks/>
        public event getReportRunResultsByNameCompletedEventHandler getReportRunResultsByNameCompleted;
        
        /// <remarks/>
        public event getReportRunResultsByRecordIDCompletedEventHandler getReportRunResultsByRecordIDCompleted;
        
        /// <remarks/>
        public event getEventDefinitionListCompletedEventHandler getEventDefinitionListCompleted;
        
        /// <remarks/>
        public event getDefectEventDefinitionListCompletedEventHandler getDefectEventDefinitionListCompleted;
        
        /// <remarks/>
        public event getCustomFieldsDefinitionListCompletedEventHandler getCustomFieldsDefinitionListCompleted;
        
        /// <remarks/>
        public event getDefectCustomFieldsDefinitionListCompletedEventHandler getDefectCustomFieldsDefinitionListCompleted;
        
        /// <remarks/>
        public event getDefectCompletedEventHandler getDefectCompleted;
        
        /// <remarks/>
        public event getDefectByRecordIDCompletedEventHandler getDefectByRecordIDCompleted;
        
        /// <remarks/>
        public event addDefectCompletedEventHandler addDefectCompleted;
        
        /// <remarks/>
        public event addDefectWithLinkCompletedEventHandler addDefectWithLinkCompleted;
        
        /// <remarks/>
        public event deleteDefectCompletedEventHandler deleteDefectCompleted;
        
        /// <remarks/>
        public event deleteDefectByRecordIDCompletedEventHandler deleteDefectByRecordIDCompleted;
        
        /// <remarks/>
        public event editDefectCompletedEventHandler editDefectCompleted;
        
        /// <remarks/>
        public event editDefectByRecordIDCompletedEventHandler editDefectByRecordIDCompleted;
        
        /// <remarks/>
        public event saveDefectCompletedEventHandler saveDefectCompleted;
        
        /// <remarks/>
        public event cancelSaveDefectCompletedEventHandler cancelSaveDefectCompleted;
        
        /// <remarks/>
        public event getAttachmentCompletedEventHandler getAttachmentCompleted;
        
        /// <remarks/>
        public event getDefectAttachmentCompletedEventHandler getDefectAttachmentCompleted;
        
        /// <remarks/>
        public event getTaskCompletedEventHandler getTaskCompleted;
        
        /// <remarks/>
        public event getTaskByRecordIDCompletedEventHandler getTaskByRecordIDCompleted;
        
        /// <remarks/>
        public event addTaskCompletedEventHandler addTaskCompleted;
        
        /// <remarks/>
        public event deleteTaskCompletedEventHandler deleteTaskCompleted;
        
        /// <remarks/>
        public event deleteTaskByRecordIDCompletedEventHandler deleteTaskByRecordIDCompleted;
        
        /// <remarks/>
        public event editTaskCompletedEventHandler editTaskCompleted;
        
        /// <remarks/>
        public event editTaskByRecordIDCompletedEventHandler editTaskByRecordIDCompleted;
        
        /// <remarks/>
        public event saveTaskCompletedEventHandler saveTaskCompleted;
        
        /// <remarks/>
        public event cancelSaveTaskCompletedEventHandler cancelSaveTaskCompleted;
        
        /// <remarks/>
        public event getGlobalUserListCompletedEventHandler getGlobalUserListCompleted;
        
        /// <remarks/>
        public event getGlobalCustomerListCompletedEventHandler getGlobalCustomerListCompleted;
        
        /// <remarks/>
        public event getUserLicenseListCompletedEventHandler getUserLicenseListCompleted;
        
        /// <remarks/>
        public event getUserCompletedEventHandler getUserCompleted;
        
        /// <remarks/>
        public event getUserByRecordIDCompletedEventHandler getUserByRecordIDCompleted;
        
        /// <remarks/>
        public event getUserForCurrentSessionCompletedEventHandler getUserForCurrentSessionCompleted;
        
        /// <remarks/>
        public event addUserCompletedEventHandler addUserCompleted;
        
        /// <remarks/>
        public event editUserCompletedEventHandler editUserCompleted;
        
        /// <remarks/>
        public event editUserByRecordIDCompletedEventHandler editUserByRecordIDCompleted;
        
        /// <remarks/>
        public event saveUserCompletedEventHandler saveUserCompleted;
        
        /// <remarks/>
        public event deleteUserCompletedEventHandler deleteUserCompleted;
        
        /// <remarks/>
        public event deleteUserByRecordIDCompletedEventHandler deleteUserByRecordIDCompleted;
        
        /// <remarks/>
        public event cancelSaveUserCompletedEventHandler cancelSaveUserCompleted;
        
        /// <remarks/>
        public event promoteUserCompletedEventHandler promoteUserCompleted;
        
        /// <remarks/>
        public event addGlobalUserCompletedEventHandler addGlobalUserCompleted;
        
        /// <remarks/>
        public event getCustomerCompletedEventHandler getCustomerCompleted;
        
        /// <remarks/>
        public event getCustomerByRecordIDCompletedEventHandler getCustomerByRecordIDCompleted;
        
        /// <remarks/>
        public event addCustomerCompletedEventHandler addCustomerCompleted;
        
        /// <remarks/>
        public event editCustomerCompletedEventHandler editCustomerCompleted;
        
        /// <remarks/>
        public event editCustomerByRecordIDCompletedEventHandler editCustomerByRecordIDCompleted;
        
        /// <remarks/>
        public event saveCustomerCompletedEventHandler saveCustomerCompleted;
        
        /// <remarks/>
        public event deleteCustomerCompletedEventHandler deleteCustomerCompleted;
        
        /// <remarks/>
        public event deleteCustomerByRecordIDCompletedEventHandler deleteCustomerByRecordIDCompleted;
        
        /// <remarks/>
        public event cancelSaveCustomerCompletedEventHandler cancelSaveCustomerCompleted;
        
        /// <remarks/>
        public event promoteCustomerCompletedEventHandler promoteCustomerCompleted;
        
        /// <remarks/>
        public event addGlobalCustomerCompletedEventHandler addGlobalCustomerCompleted;
        
        /// <remarks/>
        public event getLinksForItemCompletedEventHandler getLinksForItemCompleted;
        
        /// <remarks/>
        public event getLinksForDefectCompletedEventHandler getLinksForDefectCompleted;
        
        /// <remarks/>
        public event getLinkCompletedEventHandler getLinkCompleted;
        
        /// <remarks/>
        public event addLinkCompletedEventHandler addLinkCompleted;
        
        /// <remarks/>
        public event deleteLinkCompletedEventHandler deleteLinkCompleted;
        
        /// <remarks/>
        public event editLinkCompletedEventHandler editLinkCompleted;
        
        /// <remarks/>
        public event saveLinkCompletedEventHandler saveLinkCompleted;
        
        /// <remarks/>
        public event cancelSaveLinkCompletedEventHandler cancelSaveLinkCompleted;
        
        /// <remarks/>
        public event getTestVariantTypesCompletedEventHandler getTestVariantTypesCompleted;
        
        /// <remarks/>
        public event getTestRunStepsModesCompletedEventHandler getTestRunStepsModesCompleted;
        
        /// <remarks/>
        public event getTestCaseCompletedEventHandler getTestCaseCompleted;
        
        /// <remarks/>
        public event getTestCaseByRecordIDCompletedEventHandler getTestCaseByRecordIDCompleted;
        
        /// <remarks/>
        public event addTestCaseCompletedEventHandler addTestCaseCompleted;
        
        /// <remarks/>
        public event deleteTestCaseCompletedEventHandler deleteTestCaseCompleted;
        
        /// <remarks/>
        public event deleteTestCaseByRecordIDCompletedEventHandler deleteTestCaseByRecordIDCompleted;
        
        /// <remarks/>
        public event editTestCaseCompletedEventHandler editTestCaseCompleted;
        
        /// <remarks/>
        public event editTestCaseByRecordIDCompletedEventHandler editTestCaseByRecordIDCompleted;
        
        /// <remarks/>
        public event saveTestCaseCompletedEventHandler saveTestCaseCompleted;
        
        /// <remarks/>
        public event cancelSaveTestCaseCompletedEventHandler cancelSaveTestCaseCompleted;
        
        /// <remarks/>
        public event getTestRunCompletedEventHandler getTestRunCompleted;
        
        /// <remarks/>
        public event getTestRunByRecordIDCompletedEventHandler getTestRunByRecordIDCompleted;
        
        /// <remarks/>
        public event deleteTestRunCompletedEventHandler deleteTestRunCompleted;
        
        /// <remarks/>
        public event deleteTestRunByRecordIDCompletedEventHandler deleteTestRunByRecordIDCompleted;
        
        /// <remarks/>
        public event editTestRunCompletedEventHandler editTestRunCompleted;
        
        /// <remarks/>
        public event editTestRunByRecordIDCompletedEventHandler editTestRunByRecordIDCompleted;
        
        /// <remarks/>
        public event saveTestRunCompletedEventHandler saveTestRunCompleted;
        
        /// <remarks/>
        public event cancelSaveTestRunCompletedEventHandler cancelSaveTestRunCompleted;
        
        /// <remarks/>
        public event createDefectForTestRunCompletedEventHandler createDefectForTestRunCompleted;
        
        /// <remarks/>
        public event generateTestRunsCompletedEventHandler generateTestRunsCompleted;
        
        /// <remarks/>
        public event getFolderTypeByNameCompletedEventHandler getFolderTypeByNameCompleted;
        
        /// <remarks/>
        public event getFolderTypeListCompletedEventHandler getFolderTypeListCompleted;
        
        /// <remarks/>
        public event addFolderCompletedEventHandler addFolderCompleted;
        
        /// <remarks/>
        public event editFolderCompletedEventHandler editFolderCompleted;
        
        /// <remarks/>
        public event editFolderByRecordIDCompletedEventHandler editFolderByRecordIDCompleted;
        
        /// <remarks/>
        public event saveFolderCompletedEventHandler saveFolderCompleted;
        
        /// <remarks/>
        public event cancelSaveFolderCompletedEventHandler cancelSaveFolderCompleted;
        
        /// <remarks/>
        public event getFolderCompletedEventHandler getFolderCompleted;
        
        /// <remarks/>
        public event getFolderByRecordIDCompletedEventHandler getFolderByRecordIDCompleted;
        
        /// <remarks/>
        public event deleteFolderCompletedEventHandler deleteFolderCompleted;
        
        /// <remarks/>
        public event deleteFolderByRecordIDCompletedEventHandler deleteFolderByRecordIDCompleted;
        
        /// <remarks/>
        public event addEntityToFolderByRecordIDCompletedEventHandler addEntityToFolderByRecordIDCompleted;
        
        /// <remarks/>
        public event removeEntityFromFolderByRecordIDCompletedEventHandler removeEntityFromFolderByRecordIDCompleted;
        
        /// <remarks/>
        public event getEntityListForFolderByRecordIDCompletedEventHandler getEntityListForFolderByRecordIDCompleted;
        
        /// <remarks/>
        public event getFolderListForEntityByRecordIDCompletedEventHandler getFolderListForEntityByRecordIDCompleted;
        
        /// <remarks/>
        public event getFolderPathSeparatorCompletedEventHandler getFolderPathSeparatorCompleted;
        
        /// <remarks/>
        public event getRootPublicFolderPathCompletedEventHandler getRootPublicFolderPathCompleted;
        
        /// <remarks/>
        public event getRootPrivateFolderPathCompletedEventHandler getRootPrivateFolderPathCompleted;
        
        /// <remarks/>
        public event editFolderItemRankCompletedEventHandler editFolderItemRankCompleted;
        
        /// <remarks/>
        public event saveFolderItemRankCompletedEventHandler saveFolderItemRankCompleted;
        
        /// <remarks/>
        public event cancelSaveFolderItemRankCompletedEventHandler cancelSaveFolderItemRankCompleted;
        
        /// <remarks/>
        public event getRequirementCompletedEventHandler getRequirementCompleted;
        
        /// <remarks/>
        public event getRequirementByRecordIDCompletedEventHandler getRequirementByRecordIDCompleted;
        
        /// <remarks/>
        public event addRequirementCompletedEventHandler addRequirementCompleted;
        
        /// <remarks/>
        public event deleteRequirementCompletedEventHandler deleteRequirementCompleted;
        
        /// <remarks/>
        public event deleteRequirementByRecordIDCompletedEventHandler deleteRequirementByRecordIDCompleted;
        
        /// <remarks/>
        public event editRequirementCompletedEventHandler editRequirementCompleted;
        
        /// <remarks/>
        public event editRequirementByRecordIDCompletedEventHandler editRequirementByRecordIDCompleted;
        
        /// <remarks/>
        public event saveRequirementCompletedEventHandler saveRequirementCompleted;
        
        /// <remarks/>
        public event cancelSaveRequirementCompletedEventHandler cancelSaveRequirementCompleted;
        
        /// <remarks/>
        public event appendToRequirementDocumentCompletedEventHandler appendToRequirementDocumentCompleted;
        
        /// <remarks/>
        public event getDocumentIDsForRequirementCompletedEventHandler getDocumentIDsForRequirementCompleted;
        
        /// <remarks/>
        public event changeRequirementTypeCompletedEventHandler changeRequirementTypeCompleted;
        
        /// <remarks/>
        public event getRequirementDocumentCompletedEventHandler getRequirementDocumentCompleted;
        
        /// <remarks/>
        public event getRequirementDocumentByRecordIDCompletedEventHandler getRequirementDocumentByRecordIDCompleted;
        
        /// <remarks/>
        public event addRequirementDocumentCompletedEventHandler addRequirementDocumentCompleted;
        
        /// <remarks/>
        public event deleteRequirementDocumentCompletedEventHandler deleteRequirementDocumentCompleted;
        
        /// <remarks/>
        public event deleteRequirementDocumentByRecordIDCompletedEventHandler deleteRequirementDocumentByRecordIDCompleted;
        
        /// <remarks/>
        public event editRequirementDocumentCompletedEventHandler editRequirementDocumentCompleted;
        
        /// <remarks/>
        public event editRequirementDocumentByRecordIDCompletedEventHandler editRequirementDocumentByRecordIDCompleted;
        
        /// <remarks/>
        public event saveRequirementDocumentCompletedEventHandler saveRequirementDocumentCompleted;
        
        /// <remarks/>
        public event cancelSaveRequirementDocumentCompletedEventHandler cancelSaveRequirementDocumentCompleted;
        
        /// <remarks/>
        public event createSnapshotCompletedEventHandler createSnapshotCompleted;
        
        /// <remarks/>
        public event getRequirementIDsForDocumentCompletedEventHandler getRequirementIDsForDocumentCompleted;
        
        /// <remarks/>
        public event getDocumentTreeCompletedEventHandler getDocumentTreeCompleted;
        
        /// <remarks/>
        public event getFolderTreeByRecordIDCompletedEventHandler getFolderTreeByRecordIDCompleted;
        
        /// <remarks/>
        public event getFolderTreeCompletedEventHandler getFolderTreeCompleted;
        
        /// <remarks/>
        public event getItemHyperlinksCompletedEventHandler getItemHyperlinksCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getDatabaseList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pDBList")]
        public CDatabase[] getDatabaseList() {
            object[] results = this.Invoke("getDatabaseList", new object[0]);
            return ((CDatabase[])(results[0]));
        }
        
        /// <remarks/>
        public void getDatabaseListAsync() {
            this.getDatabaseListAsync(null);
        }
        
        /// <remarks/>
        public void getDatabaseListAsync(object userState) {
            if ((this.getDatabaseListOperationCompleted == null)) {
                this.getDatabaseListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDatabaseListOperationCompleted);
            }
            this.InvokeAsync("getDatabaseList", new object[0], this.getDatabaseListOperationCompleted, userState);
        }
        
        private void OngetDatabaseListOperationCompleted(object arg) {
            if ((this.getDatabaseListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDatabaseListCompleted(this, new getDatabaseListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getProjectList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pProjList")]
        public CProject[] getProjectList(string username, string password) {
            object[] results = this.Invoke("getProjectList", new object[] {
                        username,
                        password});
            return ((CProject[])(results[0]));
        }
        
        /// <remarks/>
        public void getProjectListAsync(string username, string password) {
            this.getProjectListAsync(username, password, null);
        }
        
        /// <remarks/>
        public void getProjectListAsync(string username, string password, object userState) {
            if ((this.getProjectListOperationCompleted == null)) {
                this.getProjectListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectListOperationCompleted);
            }
            this.InvokeAsync("getProjectList", new object[] {
                        username,
                        password}, this.getProjectListOperationCompleted, userState);
        }
        
        private void OngetProjectListOperationCompleted(object arg) {
            if ((this.getProjectListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectListCompleted(this, new getProjectListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getProjectDataOptionList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pProjTypes")]
        public CProjectDataOption[] getProjectDataOptionList() {
            object[] results = this.Invoke("getProjectDataOptionList", new object[0]);
            return ((CProjectDataOption[])(results[0]));
        }
        
        /// <remarks/>
        public void getProjectDataOptionListAsync() {
            this.getProjectDataOptionListAsync(null);
        }
        
        /// <remarks/>
        public void getProjectDataOptionListAsync(object userState) {
            if ((this.getProjectDataOptionListOperationCompleted == null)) {
                this.getProjectDataOptionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProjectDataOptionListOperationCompleted);
            }
            this.InvokeAsync("getProjectDataOptionList", new object[0], this.getProjectDataOptionListOperationCompleted, userState);
        }
        
        private void OngetProjectDataOptionListOperationCompleted(object arg) {
            if ((this.getProjectDataOptionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProjectDataOptionListCompleted(this, new getProjectDataOptionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#DatabaseLogon", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("Cookie")]
        public long DatabaseLogon(string dbname, string username, string password) {
            object[] results = this.Invoke("DatabaseLogon", new object[] {
                        dbname,
                        username,
                        password});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void DatabaseLogonAsync(string dbname, string username, string password) {
            this.DatabaseLogonAsync(dbname, username, password, null);
        }
        
        /// <remarks/>
        public void DatabaseLogonAsync(string dbname, string username, string password, object userState) {
            if ((this.DatabaseLogonOperationCompleted == null)) {
                this.DatabaseLogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDatabaseLogonOperationCompleted);
            }
            this.InvokeAsync("DatabaseLogon", new object[] {
                        dbname,
                        username,
                        password}, this.DatabaseLogonOperationCompleted, userState);
        }
        
        private void OnDatabaseLogonOperationCompleted(object arg) {
            if ((this.DatabaseLogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DatabaseLogonCompleted(this, new DatabaseLogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#ProjectLogon", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("Cookie")]
        public long ProjectLogon(CProject pProj, string username, string password) {
            object[] results = this.Invoke("ProjectLogon", new object[] {
                        pProj,
                        username,
                        password});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void ProjectLogonAsync(CProject pProj, string username, string password) {
            this.ProjectLogonAsync(pProj, username, password, null);
        }
        
        /// <remarks/>
        public void ProjectLogonAsync(CProject pProj, string username, string password, object userState) {
            if ((this.ProjectLogonOperationCompleted == null)) {
                this.ProjectLogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProjectLogonOperationCompleted);
            }
            this.InvokeAsync("ProjectLogon", new object[] {
                        pProj,
                        username,
                        password}, this.ProjectLogonOperationCompleted, userState);
        }
        
        private void OnProjectLogonOperationCompleted(object arg) {
            if ((this.ProjectLogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProjectLogonCompleted(this, new ProjectLogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#DatabaseLogoff", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int DatabaseLogoff(long cookie) {
            object[] results = this.Invoke("DatabaseLogoff", new object[] {
                        cookie});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DatabaseLogoffAsync(long cookie) {
            this.DatabaseLogoffAsync(cookie, null);
        }
        
        /// <remarks/>
        public void DatabaseLogoffAsync(long cookie, object userState) {
            if ((this.DatabaseLogoffOperationCompleted == null)) {
                this.DatabaseLogoffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDatabaseLogoffOperationCompleted);
            }
            this.InvokeAsync("DatabaseLogoff", new object[] {
                        cookie}, this.DatabaseLogoffOperationCompleted, userState);
        }
        
        private void OnDatabaseLogoffOperationCompleted(object arg) {
            if ((this.DatabaseLogoffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DatabaseLogoffCompleted(this, new DatabaseLogoffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("formattingEnabled")]
        public bool formattedTextSupport(long cookie, bool enableFormattedText) {
            object[] results = this.Invoke("formattedTextSupport", new object[] {
                        cookie,
                        enableFormattedText});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void formattedTextSupportAsync(long cookie, bool enableFormattedText) {
            this.formattedTextSupportAsync(cookie, enableFormattedText, null);
        }
        
        /// <remarks/>
        public void formattedTextSupportAsync(long cookie, bool enableFormattedText, object userState) {
            if ((this.formattedTextSupportOperationCompleted == null)) {
                this.formattedTextSupportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnformattedTextSupportOperationCompleted);
            }
            this.InvokeAsync("formattedTextSupport", new object[] {
                        cookie,
                        enableFormattedText}, this.formattedTextSupportOperationCompleted, userState);
        }
        
        private void OnformattedTextSupportOperationCompleted(object arg) {
            if ((this.formattedTextSupportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.formattedTextSupportCompleted(this, new formattedTextSupportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getTableList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTableList")]
        public CDatabaseTable[] getTableList(long cookie) {
            object[] results = this.Invoke("getTableList", new object[] {
                        cookie});
            return ((CDatabaseTable[])(results[0]));
        }
        
        /// <remarks/>
        public void getTableListAsync(long cookie) {
            this.getTableListAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getTableListAsync(long cookie, object userState) {
            if ((this.getTableListOperationCompleted == null)) {
                this.getTableListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTableListOperationCompleted);
            }
            this.InvokeAsync("getTableList", new object[] {
                        cookie}, this.getTableListOperationCompleted, userState);
        }
        
        private void OngetTableListOperationCompleted(object arg) {
            if ((this.getTableListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTableListCompleted(this, new getTableListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getDropdownFieldForTable", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pFieldList")]
        public CTableField[] getDropdownFieldForTable(long cookie, string tablename) {
            object[] results = this.Invoke("getDropdownFieldForTable", new object[] {
                        cookie,
                        tablename});
            return ((CTableField[])(results[0]));
        }
        
        /// <remarks/>
        public void getDropdownFieldForTableAsync(long cookie, string tablename) {
            this.getDropdownFieldForTableAsync(cookie, tablename, null);
        }
        
        /// <remarks/>
        public void getDropdownFieldForTableAsync(long cookie, string tablename, object userState) {
            if ((this.getDropdownFieldForTableOperationCompleted == null)) {
                this.getDropdownFieldForTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDropdownFieldForTableOperationCompleted);
            }
            this.InvokeAsync("getDropdownFieldForTable", new object[] {
                        cookie,
                        tablename}, this.getDropdownFieldForTableOperationCompleted, userState);
        }
        
        private void OngetDropdownFieldForTableOperationCompleted(object arg) {
            if ((this.getDropdownFieldForTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDropdownFieldForTableCompleted(this, new getDropdownFieldForTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getDropdownFieldValuesForTable", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pValueList")]
        public CFieldValue[] getDropdownFieldValuesForTable(long cookie, string tablename, string fieldname) {
            object[] results = this.Invoke("getDropdownFieldValuesForTable", new object[] {
                        cookie,
                        tablename,
                        fieldname});
            return ((CFieldValue[])(results[0]));
        }
        
        /// <remarks/>
        public void getDropdownFieldValuesForTableAsync(long cookie, string tablename, string fieldname) {
            this.getDropdownFieldValuesForTableAsync(cookie, tablename, fieldname, null);
        }
        
        /// <remarks/>
        public void getDropdownFieldValuesForTableAsync(long cookie, string tablename, string fieldname, object userState) {
            if ((this.getDropdownFieldValuesForTableOperationCompleted == null)) {
                this.getDropdownFieldValuesForTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDropdownFieldValuesForTableOperationCompleted);
            }
            this.InvokeAsync("getDropdownFieldValuesForTable", new object[] {
                        cookie,
                        tablename,
                        fieldname}, this.getDropdownFieldValuesForTableOperationCompleted, userState);
        }
        
        private void OngetDropdownFieldValuesForTableOperationCompleted(object arg) {
            if ((this.getDropdownFieldValuesForTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDropdownFieldValuesForTableCompleted(this, new getDropdownFieldValuesForTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addDropdownFieldValuesForTable", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int addDropdownFieldValuesForTable(long cookie, string tablename, string fieldname, CFieldValue[] pValueList) {
            object[] results = this.Invoke("addDropdownFieldValuesForTable", new object[] {
                        cookie,
                        tablename,
                        fieldname,
                        pValueList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addDropdownFieldValuesForTableAsync(long cookie, string tablename, string fieldname, CFieldValue[] pValueList) {
            this.addDropdownFieldValuesForTableAsync(cookie, tablename, fieldname, pValueList, null);
        }
        
        /// <remarks/>
        public void addDropdownFieldValuesForTableAsync(long cookie, string tablename, string fieldname, CFieldValue[] pValueList, object userState) {
            if ((this.addDropdownFieldValuesForTableOperationCompleted == null)) {
                this.addDropdownFieldValuesForTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddDropdownFieldValuesForTableOperationCompleted);
            }
            this.InvokeAsync("addDropdownFieldValuesForTable", new object[] {
                        cookie,
                        tablename,
                        fieldname,
                        pValueList}, this.addDropdownFieldValuesForTableOperationCompleted, userState);
        }
        
        private void OnaddDropdownFieldValuesForTableOperationCompleted(object arg) {
            if ((this.addDropdownFieldValuesForTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addDropdownFieldValuesForTableCompleted(this, new addDropdownFieldValuesForTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#GetLinkDefinitionValues", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pValueList")]
        public CFieldValue[] GetLinkDefinitionValues(long cookie) {
            object[] results = this.Invoke("GetLinkDefinitionValues", new object[] {
                        cookie});
            return ((CFieldValue[])(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkDefinitionValuesAsync(long cookie) {
            this.GetLinkDefinitionValuesAsync(cookie, null);
        }
        
        /// <remarks/>
        public void GetLinkDefinitionValuesAsync(long cookie, object userState) {
            if ((this.GetLinkDefinitionValuesOperationCompleted == null)) {
                this.GetLinkDefinitionValuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkDefinitionValuesOperationCompleted);
            }
            this.InvokeAsync("GetLinkDefinitionValues", new object[] {
                        cookie}, this.GetLinkDefinitionValuesOperationCompleted, userState);
        }
        
        private void OnGetLinkDefinitionValuesOperationCompleted(object arg) {
            if ((this.GetLinkDefinitionValuesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkDefinitionValuesCompleted(this, new GetLinkDefinitionValuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getColumnsForTable", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pColumnList")]
        public CTableColumn[] getColumnsForTable(long cookie, string tablename) {
            object[] results = this.Invoke("getColumnsForTable", new object[] {
                        cookie,
                        tablename});
            return ((CTableColumn[])(results[0]));
        }
        
        /// <remarks/>
        public void getColumnsForTableAsync(long cookie, string tablename) {
            this.getColumnsForTableAsync(cookie, tablename, null);
        }
        
        /// <remarks/>
        public void getColumnsForTableAsync(long cookie, string tablename, object userState) {
            if ((this.getColumnsForTableOperationCompleted == null)) {
                this.getColumnsForTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetColumnsForTableOperationCompleted);
            }
            this.InvokeAsync("getColumnsForTable", new object[] {
                        cookie,
                        tablename}, this.getColumnsForTableOperationCompleted, userState);
        }
        
        private void OngetColumnsForTableOperationCompleted(object arg) {
            if ((this.getColumnsForTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getColumnsForTableCompleted(this, new getColumnsForTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getFilterList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pFilterList")]
        public CFilter[] getFilterList(long cookie) {
            object[] results = this.Invoke("getFilterList", new object[] {
                        cookie});
            return ((CFilter[])(results[0]));
        }
        
        /// <remarks/>
        public void getFilterListAsync(long cookie) {
            this.getFilterListAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getFilterListAsync(long cookie, object userState) {
            if ((this.getFilterListOperationCompleted == null)) {
                this.getFilterListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFilterListOperationCompleted);
            }
            this.InvokeAsync("getFilterList", new object[] {
                        cookie}, this.getFilterListOperationCompleted, userState);
        }
        
        private void OngetFilterListOperationCompleted(object arg) {
            if ((this.getFilterListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFilterListCompleted(this, new getFilterListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getFilterListForTable", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pFilterList")]
        public CFilter[] getFilterListForTable(long cookie, string tablename) {
            object[] results = this.Invoke("getFilterListForTable", new object[] {
                        cookie,
                        tablename});
            return ((CFilter[])(results[0]));
        }
        
        /// <remarks/>
        public void getFilterListForTableAsync(long cookie, string tablename) {
            this.getFilterListForTableAsync(cookie, tablename, null);
        }
        
        /// <remarks/>
        public void getFilterListForTableAsync(long cookie, string tablename, object userState) {
            if ((this.getFilterListForTableOperationCompleted == null)) {
                this.getFilterListForTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFilterListForTableOperationCompleted);
            }
            this.InvokeAsync("getFilterListForTable", new object[] {
                        cookie,
                        tablename}, this.getFilterListForTableOperationCompleted, userState);
        }
        
        private void OngetFilterListForTableOperationCompleted(object arg) {
            if ((this.getFilterListForTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFilterListForTableCompleted(this, new getFilterListForTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getRecordListForTable", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordlist")]
        public CRecordListSoap getRecordListForTable(long cookie, string tablename, string filtername, CTableColumn[] columnlist) {
            object[] results = this.Invoke("getRecordListForTable", new object[] {
                        cookie,
                        tablename,
                        filtername,
                        columnlist});
            return ((CRecordListSoap)(results[0]));
        }
        
        /// <remarks/>
        public void getRecordListForTableAsync(long cookie, string tablename, string filtername, CTableColumn[] columnlist) {
            this.getRecordListForTableAsync(cookie, tablename, filtername, columnlist, null);
        }
        
        /// <remarks/>
        public void getRecordListForTableAsync(long cookie, string tablename, string filtername, CTableColumn[] columnlist, object userState) {
            if ((this.getRecordListForTableOperationCompleted == null)) {
                this.getRecordListForTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRecordListForTableOperationCompleted);
            }
            this.InvokeAsync("getRecordListForTable", new object[] {
                        cookie,
                        tablename,
                        filtername,
                        columnlist}, this.getRecordListForTableOperationCompleted, userState);
        }
        
        private void OngetRecordListForTableOperationCompleted(object arg) {
            if ((this.getRecordListForTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRecordListForTableCompleted(this, new getRecordListForTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getTestConfig", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestConfig")]
        public CSystem getTestConfig(long cookie, string name) {
            object[] results = this.Invoke("getTestConfig", new object[] {
                        cookie,
                        name});
            return ((CSystem)(results[0]));
        }
        
        /// <remarks/>
        public void getTestConfigAsync(long cookie, string name) {
            this.getTestConfigAsync(cookie, name, null);
        }
        
        /// <remarks/>
        public void getTestConfigAsync(long cookie, string name, object userState) {
            if ((this.getTestConfigOperationCompleted == null)) {
                this.getTestConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTestConfigOperationCompleted);
            }
            this.InvokeAsync("getTestConfig", new object[] {
                        cookie,
                        name}, this.getTestConfigOperationCompleted, userState);
        }
        
        private void OngetTestConfigOperationCompleted(object arg) {
            if ((this.getTestConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTestConfigCompleted(this, new getTestConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getTestConfigByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestConfig")]
        public CSystem getTestConfigByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("getTestConfigByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((CSystem)(results[0]));
        }
        
        /// <remarks/>
        public void getTestConfigByRecordIDAsync(long cookie, long recordID) {
            this.getTestConfigByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void getTestConfigByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.getTestConfigByRecordIDOperationCompleted == null)) {
                this.getTestConfigByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTestConfigByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getTestConfigByRecordID", new object[] {
                        cookie,
                        recordID}, this.getTestConfigByRecordIDOperationCompleted, userState);
        }
        
        private void OngetTestConfigByRecordIDOperationCompleted(object arg) {
            if ((this.getTestConfigByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTestConfigByRecordIDCompleted(this, new getTestConfigByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addTestConfig", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordID")]
        public long addTestConfig(long cookie, CSystem pTestConfig) {
            object[] results = this.Invoke("addTestConfig", new object[] {
                        cookie,
                        pTestConfig});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void addTestConfigAsync(long cookie, CSystem pTestConfig) {
            this.addTestConfigAsync(cookie, pTestConfig, null);
        }
        
        /// <remarks/>
        public void addTestConfigAsync(long cookie, CSystem pTestConfig, object userState) {
            if ((this.addTestConfigOperationCompleted == null)) {
                this.addTestConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTestConfigOperationCompleted);
            }
            this.InvokeAsync("addTestConfig", new object[] {
                        cookie,
                        pTestConfig}, this.addTestConfigOperationCompleted, userState);
        }
        
        private void OnaddTestConfigOperationCompleted(object arg) {
            if ((this.addTestConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTestConfigCompleted(this, new addTestConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editTestConfig", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestConfig")]
        public CSystem editTestConfig(long cookie, string name) {
            object[] results = this.Invoke("editTestConfig", new object[] {
                        cookie,
                        name});
            return ((CSystem)(results[0]));
        }
        
        /// <remarks/>
        public void editTestConfigAsync(long cookie, string name) {
            this.editTestConfigAsync(cookie, name, null);
        }
        
        /// <remarks/>
        public void editTestConfigAsync(long cookie, string name, object userState) {
            if ((this.editTestConfigOperationCompleted == null)) {
                this.editTestConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditTestConfigOperationCompleted);
            }
            this.InvokeAsync("editTestConfig", new object[] {
                        cookie,
                        name}, this.editTestConfigOperationCompleted, userState);
        }
        
        private void OneditTestConfigOperationCompleted(object arg) {
            if ((this.editTestConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editTestConfigCompleted(this, new editTestConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editTestConfigByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestConfig")]
        public CSystem editTestConfigByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("editTestConfigByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((CSystem)(results[0]));
        }
        
        /// <remarks/>
        public void editTestConfigByRecordIDAsync(long cookie, long recordID) {
            this.editTestConfigByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void editTestConfigByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.editTestConfigByRecordIDOperationCompleted == null)) {
                this.editTestConfigByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditTestConfigByRecordIDOperationCompleted);
            }
            this.InvokeAsync("editTestConfigByRecordID", new object[] {
                        cookie,
                        recordID}, this.editTestConfigByRecordIDOperationCompleted, userState);
        }
        
        private void OneditTestConfigByRecordIDOperationCompleted(object arg) {
            if ((this.editTestConfigByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editTestConfigByRecordIDCompleted(this, new editTestConfigByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveTestConfig", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveTestConfig(long cookie, CSystem pTestConfig) {
            object[] results = this.Invoke("saveTestConfig", new object[] {
                        cookie,
                        pTestConfig});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveTestConfigAsync(long cookie, CSystem pTestConfig) {
            this.saveTestConfigAsync(cookie, pTestConfig, null);
        }
        
        /// <remarks/>
        public void saveTestConfigAsync(long cookie, CSystem pTestConfig, object userState) {
            if ((this.saveTestConfigOperationCompleted == null)) {
                this.saveTestConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveTestConfigOperationCompleted);
            }
            this.InvokeAsync("saveTestConfig", new object[] {
                        cookie,
                        pTestConfig}, this.saveTestConfigOperationCompleted, userState);
        }
        
        private void OnsaveTestConfigOperationCompleted(object arg) {
            if ((this.saveTestConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveTestConfigCompleted(this, new saveTestConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteTestConfig", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteTestConfig(long cookie, string name) {
            object[] results = this.Invoke("deleteTestConfig", new object[] {
                        cookie,
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteTestConfigAsync(long cookie, string name) {
            this.deleteTestConfigAsync(cookie, name, null);
        }
        
        /// <remarks/>
        public void deleteTestConfigAsync(long cookie, string name, object userState) {
            if ((this.deleteTestConfigOperationCompleted == null)) {
                this.deleteTestConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTestConfigOperationCompleted);
            }
            this.InvokeAsync("deleteTestConfig", new object[] {
                        cookie,
                        name}, this.deleteTestConfigOperationCompleted, userState);
        }
        
        private void OndeleteTestConfigOperationCompleted(object arg) {
            if ((this.deleteTestConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteTestConfigCompleted(this, new deleteTestConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteTestConfigByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteTestConfigByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("deleteTestConfigByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteTestConfigByRecordIDAsync(long cookie, long recordID) {
            this.deleteTestConfigByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void deleteTestConfigByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.deleteTestConfigByRecordIDOperationCompleted == null)) {
                this.deleteTestConfigByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTestConfigByRecordIDOperationCompleted);
            }
            this.InvokeAsync("deleteTestConfigByRecordID", new object[] {
                        cookie,
                        recordID}, this.deleteTestConfigByRecordIDOperationCompleted, userState);
        }
        
        private void OndeleteTestConfigByRecordIDOperationCompleted(object arg) {
            if ((this.deleteTestConfigByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteTestConfigByRecordIDCompleted(this, new deleteTestConfigByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveTestConfig", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveTestConfig(long cookie, long recordID) {
            object[] results = this.Invoke("cancelSaveTestConfig", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveTestConfigAsync(long cookie, long recordID) {
            this.cancelSaveTestConfigAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void cancelSaveTestConfigAsync(long cookie, long recordID, object userState) {
            if ((this.cancelSaveTestConfigOperationCompleted == null)) {
                this.cancelSaveTestConfigOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveTestConfigOperationCompleted);
            }
            this.InvokeAsync("cancelSaveTestConfig", new object[] {
                        cookie,
                        recordID}, this.cancelSaveTestConfigOperationCompleted, userState);
        }
        
        private void OncancelSaveTestConfigOperationCompleted(object arg) {
            if ((this.cancelSaveTestConfigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveTestConfigCompleted(this, new cancelSaveTestConfigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getAttachmentTypes", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTypeList")]
        public string[] getAttachmentTypes(long cookie) {
            object[] results = this.Invoke("getAttachmentTypes", new object[] {
                        cookie});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getAttachmentTypesAsync(long cookie) {
            this.getAttachmentTypesAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getAttachmentTypesAsync(long cookie, object userState) {
            if ((this.getAttachmentTypesOperationCompleted == null)) {
                this.getAttachmentTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAttachmentTypesOperationCompleted);
            }
            this.InvokeAsync("getAttachmentTypes", new object[] {
                        cookie}, this.getAttachmentTypesOperationCompleted, userState);
        }
        
        private void OngetAttachmentTypesOperationCompleted(object arg) {
            if ((this.getAttachmentTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAttachmentTypesCompleted(this, new getAttachmentTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getReportRunResultsByName", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("results")]
        public CReportRunResults getReportRunResultsByName(long cookie, string name) {
            object[] results = this.Invoke("getReportRunResultsByName", new object[] {
                        cookie,
                        name});
            return ((CReportRunResults)(results[0]));
        }
        
        /// <remarks/>
        public void getReportRunResultsByNameAsync(long cookie, string name) {
            this.getReportRunResultsByNameAsync(cookie, name, null);
        }
        
        /// <remarks/>
        public void getReportRunResultsByNameAsync(long cookie, string name, object userState) {
            if ((this.getReportRunResultsByNameOperationCompleted == null)) {
                this.getReportRunResultsByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetReportRunResultsByNameOperationCompleted);
            }
            this.InvokeAsync("getReportRunResultsByName", new object[] {
                        cookie,
                        name}, this.getReportRunResultsByNameOperationCompleted, userState);
        }
        
        private void OngetReportRunResultsByNameOperationCompleted(object arg) {
            if ((this.getReportRunResultsByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getReportRunResultsByNameCompleted(this, new getReportRunResultsByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getReportRunResultsByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("results")]
        public CReportRunResults getReportRunResultsByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("getReportRunResultsByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((CReportRunResults)(results[0]));
        }
        
        /// <remarks/>
        public void getReportRunResultsByRecordIDAsync(long cookie, long recordID) {
            this.getReportRunResultsByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void getReportRunResultsByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.getReportRunResultsByRecordIDOperationCompleted == null)) {
                this.getReportRunResultsByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetReportRunResultsByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getReportRunResultsByRecordID", new object[] {
                        cookie,
                        recordID}, this.getReportRunResultsByRecordIDOperationCompleted, userState);
        }
        
        private void OngetReportRunResultsByRecordIDOperationCompleted(object arg) {
            if ((this.getReportRunResultsByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getReportRunResultsByRecordIDCompleted(this, new getReportRunResultsByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getEventDefinitionList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("EventDefinitionList")]
        public CEventDefinition[] getEventDefinitionList(long cookie, string tablename) {
            object[] results = this.Invoke("getEventDefinitionList", new object[] {
                        cookie,
                        tablename});
            return ((CEventDefinition[])(results[0]));
        }
        
        /// <remarks/>
        public void getEventDefinitionListAsync(long cookie, string tablename) {
            this.getEventDefinitionListAsync(cookie, tablename, null);
        }
        
        /// <remarks/>
        public void getEventDefinitionListAsync(long cookie, string tablename, object userState) {
            if ((this.getEventDefinitionListOperationCompleted == null)) {
                this.getEventDefinitionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventDefinitionListOperationCompleted);
            }
            this.InvokeAsync("getEventDefinitionList", new object[] {
                        cookie,
                        tablename}, this.getEventDefinitionListOperationCompleted, userState);
        }
        
        private void OngetEventDefinitionListOperationCompleted(object arg) {
            if ((this.getEventDefinitionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEventDefinitionListCompleted(this, new getEventDefinitionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getDefectEventDefinitionList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("EventDefinitionList")]
        public CDefectEventDefinition[] getDefectEventDefinitionList(long cookie) {
            object[] results = this.Invoke("getDefectEventDefinitionList", new object[] {
                        cookie});
            return ((CDefectEventDefinition[])(results[0]));
        }
        
        /// <remarks/>
        public void getDefectEventDefinitionListAsync(long cookie) {
            this.getDefectEventDefinitionListAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getDefectEventDefinitionListAsync(long cookie, object userState) {
            if ((this.getDefectEventDefinitionListOperationCompleted == null)) {
                this.getDefectEventDefinitionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDefectEventDefinitionListOperationCompleted);
            }
            this.InvokeAsync("getDefectEventDefinitionList", new object[] {
                        cookie}, this.getDefectEventDefinitionListOperationCompleted, userState);
        }
        
        private void OngetDefectEventDefinitionListOperationCompleted(object arg) {
            if ((this.getDefectEventDefinitionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDefectEventDefinitionListCompleted(this, new getDefectEventDefinitionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getCustomFieldsDefinitionList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("customFields")]
        public CField[] getCustomFieldsDefinitionList(long cookie, string tablename) {
            object[] results = this.Invoke("getCustomFieldsDefinitionList", new object[] {
                        cookie,
                        tablename});
            return ((CField[])(results[0]));
        }
        
        /// <remarks/>
        public void getCustomFieldsDefinitionListAsync(long cookie, string tablename) {
            this.getCustomFieldsDefinitionListAsync(cookie, tablename, null);
        }
        
        /// <remarks/>
        public void getCustomFieldsDefinitionListAsync(long cookie, string tablename, object userState) {
            if ((this.getCustomFieldsDefinitionListOperationCompleted == null)) {
                this.getCustomFieldsDefinitionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCustomFieldsDefinitionListOperationCompleted);
            }
            this.InvokeAsync("getCustomFieldsDefinitionList", new object[] {
                        cookie,
                        tablename}, this.getCustomFieldsDefinitionListOperationCompleted, userState);
        }
        
        private void OngetCustomFieldsDefinitionListOperationCompleted(object arg) {
            if ((this.getCustomFieldsDefinitionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCustomFieldsDefinitionListCompleted(this, new getCustomFieldsDefinitionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getDefectCustomFieldsDefinitionList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("customFields")]
        public CField[] getDefectCustomFieldsDefinitionList(long cookie) {
            object[] results = this.Invoke("getDefectCustomFieldsDefinitionList", new object[] {
                        cookie});
            return ((CField[])(results[0]));
        }
        
        /// <remarks/>
        public void getDefectCustomFieldsDefinitionListAsync(long cookie) {
            this.getDefectCustomFieldsDefinitionListAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getDefectCustomFieldsDefinitionListAsync(long cookie, object userState) {
            if ((this.getDefectCustomFieldsDefinitionListOperationCompleted == null)) {
                this.getDefectCustomFieldsDefinitionListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDefectCustomFieldsDefinitionListOperationCompleted);
            }
            this.InvokeAsync("getDefectCustomFieldsDefinitionList", new object[] {
                        cookie}, this.getDefectCustomFieldsDefinitionListOperationCompleted, userState);
        }
        
        private void OngetDefectCustomFieldsDefinitionListOperationCompleted(object arg) {
            if ((this.getDefectCustomFieldsDefinitionListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDefectCustomFieldsDefinitionListCompleted(this, new getDefectCustomFieldsDefinitionListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getDefect", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pDefect")]
        public CDefect getDefect(long cookie, long defectNumber, string summary, bool bDownloadAttachments) {
            object[] results = this.Invoke("getDefect", new object[] {
                        cookie,
                        defectNumber,
                        summary,
                        bDownloadAttachments});
            return ((CDefect)(results[0]));
        }
        
        /// <remarks/>
        public void getDefectAsync(long cookie, long defectNumber, string summary, bool bDownloadAttachments) {
            this.getDefectAsync(cookie, defectNumber, summary, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void getDefectAsync(long cookie, long defectNumber, string summary, bool bDownloadAttachments, object userState) {
            if ((this.getDefectOperationCompleted == null)) {
                this.getDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDefectOperationCompleted);
            }
            this.InvokeAsync("getDefect", new object[] {
                        cookie,
                        defectNumber,
                        summary,
                        bDownloadAttachments}, this.getDefectOperationCompleted, userState);
        }
        
        private void OngetDefectOperationCompleted(object arg) {
            if ((this.getDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDefectCompleted(this, new getDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getDefectByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pDefect")]
        public CDefect getDefectByRecordID(long cookie, long recordID, bool bDownloadAttachments) {
            object[] results = this.Invoke("getDefectByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments});
            return ((CDefect)(results[0]));
        }
        
        /// <remarks/>
        public void getDefectByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments) {
            this.getDefectByRecordIDAsync(cookie, recordID, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void getDefectByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments, object userState) {
            if ((this.getDefectByRecordIDOperationCompleted == null)) {
                this.getDefectByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDefectByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getDefectByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments}, this.getDefectByRecordIDOperationCompleted, userState);
        }
        
        private void OngetDefectByRecordIDOperationCompleted(object arg) {
            if ((this.getDefectByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDefectByRecordIDCompleted(this, new getDefectByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addDefect", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordID")]
        public long addDefect(long cookie, CDefect pDefect) {
            object[] results = this.Invoke("addDefect", new object[] {
                        cookie,
                        pDefect});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void addDefectAsync(long cookie, CDefect pDefect) {
            this.addDefectAsync(cookie, pDefect, null);
        }
        
        /// <remarks/>
        public void addDefectAsync(long cookie, CDefect pDefect, object userState) {
            if ((this.addDefectOperationCompleted == null)) {
                this.addDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddDefectOperationCompleted);
            }
            this.InvokeAsync("addDefect", new object[] {
                        cookie,
                        pDefect}, this.addDefectOperationCompleted, userState);
        }
        
        private void OnaddDefectOperationCompleted(object arg) {
            if ((this.addDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addDefectCompleted(this, new addDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addDefectWithLink", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordID")]
        public long addDefectWithLink(long cookie, CDefect pDefect, long testRunRecordID) {
            object[] results = this.Invoke("addDefectWithLink", new object[] {
                        cookie,
                        pDefect,
                        testRunRecordID});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void addDefectWithLinkAsync(long cookie, CDefect pDefect, long testRunRecordID) {
            this.addDefectWithLinkAsync(cookie, pDefect, testRunRecordID, null);
        }
        
        /// <remarks/>
        public void addDefectWithLinkAsync(long cookie, CDefect pDefect, long testRunRecordID, object userState) {
            if ((this.addDefectWithLinkOperationCompleted == null)) {
                this.addDefectWithLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddDefectWithLinkOperationCompleted);
            }
            this.InvokeAsync("addDefectWithLink", new object[] {
                        cookie,
                        pDefect,
                        testRunRecordID}, this.addDefectWithLinkOperationCompleted, userState);
        }
        
        private void OnaddDefectWithLinkOperationCompleted(object arg) {
            if ((this.addDefectWithLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addDefectWithLinkCompleted(this, new addDefectWithLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteDefect", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteDefect(long cookie, long defectNumber, string summary) {
            object[] results = this.Invoke("deleteDefect", new object[] {
                        cookie,
                        defectNumber,
                        summary});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteDefectAsync(long cookie, long defectNumber, string summary) {
            this.deleteDefectAsync(cookie, defectNumber, summary, null);
        }
        
        /// <remarks/>
        public void deleteDefectAsync(long cookie, long defectNumber, string summary, object userState) {
            if ((this.deleteDefectOperationCompleted == null)) {
                this.deleteDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteDefectOperationCompleted);
            }
            this.InvokeAsync("deleteDefect", new object[] {
                        cookie,
                        defectNumber,
                        summary}, this.deleteDefectOperationCompleted, userState);
        }
        
        private void OndeleteDefectOperationCompleted(object arg) {
            if ((this.deleteDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteDefectCompleted(this, new deleteDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteDefectByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteDefectByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("deleteDefectByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteDefectByRecordIDAsync(long cookie, long recordID) {
            this.deleteDefectByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void deleteDefectByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.deleteDefectByRecordIDOperationCompleted == null)) {
                this.deleteDefectByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteDefectByRecordIDOperationCompleted);
            }
            this.InvokeAsync("deleteDefectByRecordID", new object[] {
                        cookie,
                        recordID}, this.deleteDefectByRecordIDOperationCompleted, userState);
        }
        
        private void OndeleteDefectByRecordIDOperationCompleted(object arg) {
            if ((this.deleteDefectByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteDefectByRecordIDCompleted(this, new deleteDefectByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editDefect", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pDefect")]
        public CDefect editDefect(long cookie, long defectNumber, string summary, bool bDownloadAttachments) {
            object[] results = this.Invoke("editDefect", new object[] {
                        cookie,
                        defectNumber,
                        summary,
                        bDownloadAttachments});
            return ((CDefect)(results[0]));
        }
        
        /// <remarks/>
        public void editDefectAsync(long cookie, long defectNumber, string summary, bool bDownloadAttachments) {
            this.editDefectAsync(cookie, defectNumber, summary, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void editDefectAsync(long cookie, long defectNumber, string summary, bool bDownloadAttachments, object userState) {
            if ((this.editDefectOperationCompleted == null)) {
                this.editDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditDefectOperationCompleted);
            }
            this.InvokeAsync("editDefect", new object[] {
                        cookie,
                        defectNumber,
                        summary,
                        bDownloadAttachments}, this.editDefectOperationCompleted, userState);
        }
        
        private void OneditDefectOperationCompleted(object arg) {
            if ((this.editDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editDefectCompleted(this, new editDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editDefectByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pDefect")]
        public CDefect editDefectByRecordID(long cookie, long recordID, bool bDownloadAttachments) {
            object[] results = this.Invoke("editDefectByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments});
            return ((CDefect)(results[0]));
        }
        
        /// <remarks/>
        public void editDefectByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments) {
            this.editDefectByRecordIDAsync(cookie, recordID, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void editDefectByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments, object userState) {
            if ((this.editDefectByRecordIDOperationCompleted == null)) {
                this.editDefectByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditDefectByRecordIDOperationCompleted);
            }
            this.InvokeAsync("editDefectByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments}, this.editDefectByRecordIDOperationCompleted, userState);
        }
        
        private void OneditDefectByRecordIDOperationCompleted(object arg) {
            if ((this.editDefectByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editDefectByRecordIDCompleted(this, new editDefectByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveDefect", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveDefect(long cookie, CDefect pDefect) {
            object[] results = this.Invoke("saveDefect", new object[] {
                        cookie,
                        pDefect});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveDefectAsync(long cookie, CDefect pDefect) {
            this.saveDefectAsync(cookie, pDefect, null);
        }
        
        /// <remarks/>
        public void saveDefectAsync(long cookie, CDefect pDefect, object userState) {
            if ((this.saveDefectOperationCompleted == null)) {
                this.saveDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveDefectOperationCompleted);
            }
            this.InvokeAsync("saveDefect", new object[] {
                        cookie,
                        pDefect}, this.saveDefectOperationCompleted, userState);
        }
        
        private void OnsaveDefectOperationCompleted(object arg) {
            if ((this.saveDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveDefectCompleted(this, new saveDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveDefect", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveDefect(long cookie, long recordID) {
            object[] results = this.Invoke("cancelSaveDefect", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveDefectAsync(long cookie, long recordID) {
            this.cancelSaveDefectAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void cancelSaveDefectAsync(long cookie, long recordID, object userState) {
            if ((this.cancelSaveDefectOperationCompleted == null)) {
                this.cancelSaveDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveDefectOperationCompleted);
            }
            this.InvokeAsync("cancelSaveDefect", new object[] {
                        cookie,
                        recordID}, this.cancelSaveDefectOperationCompleted, userState);
        }
        
        private void OncancelSaveDefectOperationCompleted(object arg) {
            if ((this.cancelSaveDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveDefectCompleted(this, new cancelSaveDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getAttachment", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pAttachment")]
        public CFileAttachment getAttachment(long cookie, string tablename, long recordID, long eventID, string pszArchiveName) {
            object[] results = this.Invoke("getAttachment", new object[] {
                        cookie,
                        tablename,
                        recordID,
                        eventID,
                        pszArchiveName});
            return ((CFileAttachment)(results[0]));
        }
        
        /// <remarks/>
        public void getAttachmentAsync(long cookie, string tablename, long recordID, long eventID, string pszArchiveName) {
            this.getAttachmentAsync(cookie, tablename, recordID, eventID, pszArchiveName, null);
        }
        
        /// <remarks/>
        public void getAttachmentAsync(long cookie, string tablename, long recordID, long eventID, string pszArchiveName, object userState) {
            if ((this.getAttachmentOperationCompleted == null)) {
                this.getAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAttachmentOperationCompleted);
            }
            this.InvokeAsync("getAttachment", new object[] {
                        cookie,
                        tablename,
                        recordID,
                        eventID,
                        pszArchiveName}, this.getAttachmentOperationCompleted, userState);
        }
        
        private void OngetAttachmentOperationCompleted(object arg) {
            if ((this.getAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAttachmentCompleted(this, new getAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getDefectAttachment", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pAttachment")]
        public CFileAttachment getDefectAttachment(long cookie, string pszArchiveName) {
            object[] results = this.Invoke("getDefectAttachment", new object[] {
                        cookie,
                        pszArchiveName});
            return ((CFileAttachment)(results[0]));
        }
        
        /// <remarks/>
        public void getDefectAttachmentAsync(long cookie, string pszArchiveName) {
            this.getDefectAttachmentAsync(cookie, pszArchiveName, null);
        }
        
        /// <remarks/>
        public void getDefectAttachmentAsync(long cookie, string pszArchiveName, object userState) {
            if ((this.getDefectAttachmentOperationCompleted == null)) {
                this.getDefectAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDefectAttachmentOperationCompleted);
            }
            this.InvokeAsync("getDefectAttachment", new object[] {
                        cookie,
                        pszArchiveName}, this.getDefectAttachmentOperationCompleted, userState);
        }
        
        private void OngetDefectAttachmentOperationCompleted(object arg) {
            if ((this.getDefectAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDefectAttachmentCompleted(this, new getDefectAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getTask", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTask")]
        public CTask getTask(long cookie, string summary) {
            object[] results = this.Invoke("getTask", new object[] {
                        cookie,
                        summary});
            return ((CTask)(results[0]));
        }
        
        /// <remarks/>
        public void getTaskAsync(long cookie, string summary) {
            this.getTaskAsync(cookie, summary, null);
        }
        
        /// <remarks/>
        public void getTaskAsync(long cookie, string summary, object userState) {
            if ((this.getTaskOperationCompleted == null)) {
                this.getTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTaskOperationCompleted);
            }
            this.InvokeAsync("getTask", new object[] {
                        cookie,
                        summary}, this.getTaskOperationCompleted, userState);
        }
        
        private void OngetTaskOperationCompleted(object arg) {
            if ((this.getTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTaskCompleted(this, new getTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getTaskByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTask")]
        public CTask getTaskByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("getTaskByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((CTask)(results[0]));
        }
        
        /// <remarks/>
        public void getTaskByRecordIDAsync(long cookie, long recordID) {
            this.getTaskByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void getTaskByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.getTaskByRecordIDOperationCompleted == null)) {
                this.getTaskByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTaskByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getTaskByRecordID", new object[] {
                        cookie,
                        recordID}, this.getTaskByRecordIDOperationCompleted, userState);
        }
        
        private void OngetTaskByRecordIDOperationCompleted(object arg) {
            if ((this.getTaskByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTaskByRecordIDCompleted(this, new getTaskByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addTask", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordID")]
        public long addTask(long cookie, CTask pTask) {
            object[] results = this.Invoke("addTask", new object[] {
                        cookie,
                        pTask});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void addTaskAsync(long cookie, CTask pTask) {
            this.addTaskAsync(cookie, pTask, null);
        }
        
        /// <remarks/>
        public void addTaskAsync(long cookie, CTask pTask, object userState) {
            if ((this.addTaskOperationCompleted == null)) {
                this.addTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTaskOperationCompleted);
            }
            this.InvokeAsync("addTask", new object[] {
                        cookie,
                        pTask}, this.addTaskOperationCompleted, userState);
        }
        
        private void OnaddTaskOperationCompleted(object arg) {
            if ((this.addTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTaskCompleted(this, new addTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteTask", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteTask(long cookie, string summary) {
            object[] results = this.Invoke("deleteTask", new object[] {
                        cookie,
                        summary});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteTaskAsync(long cookie, string summary) {
            this.deleteTaskAsync(cookie, summary, null);
        }
        
        /// <remarks/>
        public void deleteTaskAsync(long cookie, string summary, object userState) {
            if ((this.deleteTaskOperationCompleted == null)) {
                this.deleteTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTaskOperationCompleted);
            }
            this.InvokeAsync("deleteTask", new object[] {
                        cookie,
                        summary}, this.deleteTaskOperationCompleted, userState);
        }
        
        private void OndeleteTaskOperationCompleted(object arg) {
            if ((this.deleteTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteTaskCompleted(this, new deleteTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteTaskByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteTaskByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("deleteTaskByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteTaskByRecordIDAsync(long cookie, long recordID) {
            this.deleteTaskByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void deleteTaskByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.deleteTaskByRecordIDOperationCompleted == null)) {
                this.deleteTaskByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTaskByRecordIDOperationCompleted);
            }
            this.InvokeAsync("deleteTaskByRecordID", new object[] {
                        cookie,
                        recordID}, this.deleteTaskByRecordIDOperationCompleted, userState);
        }
        
        private void OndeleteTaskByRecordIDOperationCompleted(object arg) {
            if ((this.deleteTaskByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteTaskByRecordIDCompleted(this, new deleteTaskByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editTask", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTask")]
        public CTask editTask(long cookie, string summary) {
            object[] results = this.Invoke("editTask", new object[] {
                        cookie,
                        summary});
            return ((CTask)(results[0]));
        }
        
        /// <remarks/>
        public void editTaskAsync(long cookie, string summary) {
            this.editTaskAsync(cookie, summary, null);
        }
        
        /// <remarks/>
        public void editTaskAsync(long cookie, string summary, object userState) {
            if ((this.editTaskOperationCompleted == null)) {
                this.editTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditTaskOperationCompleted);
            }
            this.InvokeAsync("editTask", new object[] {
                        cookie,
                        summary}, this.editTaskOperationCompleted, userState);
        }
        
        private void OneditTaskOperationCompleted(object arg) {
            if ((this.editTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editTaskCompleted(this, new editTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editTaskByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTask")]
        public CTask editTaskByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("editTaskByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((CTask)(results[0]));
        }
        
        /// <remarks/>
        public void editTaskByRecordIDAsync(long cookie, long recordID) {
            this.editTaskByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void editTaskByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.editTaskByRecordIDOperationCompleted == null)) {
                this.editTaskByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditTaskByRecordIDOperationCompleted);
            }
            this.InvokeAsync("editTaskByRecordID", new object[] {
                        cookie,
                        recordID}, this.editTaskByRecordIDOperationCompleted, userState);
        }
        
        private void OneditTaskByRecordIDOperationCompleted(object arg) {
            if ((this.editTaskByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editTaskByRecordIDCompleted(this, new editTaskByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveTask", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveTask(long cookie, CTask pTask) {
            object[] results = this.Invoke("saveTask", new object[] {
                        cookie,
                        pTask});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveTaskAsync(long cookie, CTask pTask) {
            this.saveTaskAsync(cookie, pTask, null);
        }
        
        /// <remarks/>
        public void saveTaskAsync(long cookie, CTask pTask, object userState) {
            if ((this.saveTaskOperationCompleted == null)) {
                this.saveTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveTaskOperationCompleted);
            }
            this.InvokeAsync("saveTask", new object[] {
                        cookie,
                        pTask}, this.saveTaskOperationCompleted, userState);
        }
        
        private void OnsaveTaskOperationCompleted(object arg) {
            if ((this.saveTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveTaskCompleted(this, new saveTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveTask", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveTask(long cookie, long recordID) {
            object[] results = this.Invoke("cancelSaveTask", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveTaskAsync(long cookie, long recordID) {
            this.cancelSaveTaskAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void cancelSaveTaskAsync(long cookie, long recordID, object userState) {
            if ((this.cancelSaveTaskOperationCompleted == null)) {
                this.cancelSaveTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveTaskOperationCompleted);
            }
            this.InvokeAsync("cancelSaveTask", new object[] {
                        cookie,
                        recordID}, this.cancelSaveTaskOperationCompleted, userState);
        }
        
        private void OncancelSaveTaskOperationCompleted(object arg) {
            if ((this.cancelSaveTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveTaskCompleted(this, new cancelSaveTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getGlobalUserList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("GlobalUserList")]
        public CGlobalUser[] getGlobalUserList(long cookie) {
            object[] results = this.Invoke("getGlobalUserList", new object[] {
                        cookie});
            return ((CGlobalUser[])(results[0]));
        }
        
        /// <remarks/>
        public void getGlobalUserListAsync(long cookie) {
            this.getGlobalUserListAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getGlobalUserListAsync(long cookie, object userState) {
            if ((this.getGlobalUserListOperationCompleted == null)) {
                this.getGlobalUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGlobalUserListOperationCompleted);
            }
            this.InvokeAsync("getGlobalUserList", new object[] {
                        cookie}, this.getGlobalUserListOperationCompleted, userState);
        }
        
        private void OngetGlobalUserListOperationCompleted(object arg) {
            if ((this.getGlobalUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGlobalUserListCompleted(this, new getGlobalUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getGlobalCustomerList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("GlobalCustomerList")]
        public CGlobalUser[] getGlobalCustomerList(long cookie) {
            object[] results = this.Invoke("getGlobalCustomerList", new object[] {
                        cookie});
            return ((CGlobalUser[])(results[0]));
        }
        
        /// <remarks/>
        public void getGlobalCustomerListAsync(long cookie) {
            this.getGlobalCustomerListAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getGlobalCustomerListAsync(long cookie, object userState) {
            if ((this.getGlobalCustomerListOperationCompleted == null)) {
                this.getGlobalCustomerListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGlobalCustomerListOperationCompleted);
            }
            this.InvokeAsync("getGlobalCustomerList", new object[] {
                        cookie}, this.getGlobalCustomerListOperationCompleted, userState);
        }
        
        private void OngetGlobalCustomerListOperationCompleted(object arg) {
            if ((this.getGlobalCustomerListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGlobalCustomerListCompleted(this, new getGlobalCustomerListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getUserLicenseList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("UserLicenseList")]
        public CUserLicense[] getUserLicenseList(long cookie) {
            object[] results = this.Invoke("getUserLicenseList", new object[] {
                        cookie});
            return ((CUserLicense[])(results[0]));
        }
        
        /// <remarks/>
        public void getUserLicenseListAsync(long cookie) {
            this.getUserLicenseListAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getUserLicenseListAsync(long cookie, object userState) {
            if ((this.getUserLicenseListOperationCompleted == null)) {
                this.getUserLicenseListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserLicenseListOperationCompleted);
            }
            this.InvokeAsync("getUserLicenseList", new object[] {
                        cookie}, this.getUserLicenseListOperationCompleted, userState);
        }
        
        private void OngetUserLicenseListOperationCompleted(object arg) {
            if ((this.getUserLicenseListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserLicenseListCompleted(this, new getUserLicenseListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getUser", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pUser")]
        public CUser getUser(long cookie, string firstName, string middleInitials, string lastName) {
            object[] results = this.Invoke("getUser", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName});
            return ((CUser)(results[0]));
        }
        
        /// <remarks/>
        public void getUserAsync(long cookie, string firstName, string middleInitials, string lastName) {
            this.getUserAsync(cookie, firstName, middleInitials, lastName, null);
        }
        
        /// <remarks/>
        public void getUserAsync(long cookie, string firstName, string middleInitials, string lastName, object userState) {
            if ((this.getUserOperationCompleted == null)) {
                this.getUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserOperationCompleted);
            }
            this.InvokeAsync("getUser", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName}, this.getUserOperationCompleted, userState);
        }
        
        private void OngetUserOperationCompleted(object arg) {
            if ((this.getUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserCompleted(this, new getUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getUserByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pUser")]
        public CUser getUserByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("getUserByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((CUser)(results[0]));
        }
        
        /// <remarks/>
        public void getUserByRecordIDAsync(long cookie, long recordID) {
            this.getUserByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void getUserByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.getUserByRecordIDOperationCompleted == null)) {
                this.getUserByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getUserByRecordID", new object[] {
                        cookie,
                        recordID}, this.getUserByRecordIDOperationCompleted, userState);
        }
        
        private void OngetUserByRecordIDOperationCompleted(object arg) {
            if ((this.getUserByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserByRecordIDCompleted(this, new getUserByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getUserForCurrentSession", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pUser")]
        public CUser getUserForCurrentSession(long cookie) {
            object[] results = this.Invoke("getUserForCurrentSession", new object[] {
                        cookie});
            return ((CUser)(results[0]));
        }
        
        /// <remarks/>
        public void getUserForCurrentSessionAsync(long cookie) {
            this.getUserForCurrentSessionAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getUserForCurrentSessionAsync(long cookie, object userState) {
            if ((this.getUserForCurrentSessionOperationCompleted == null)) {
                this.getUserForCurrentSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserForCurrentSessionOperationCompleted);
            }
            this.InvokeAsync("getUserForCurrentSession", new object[] {
                        cookie}, this.getUserForCurrentSessionOperationCompleted, userState);
        }
        
        private void OngetUserForCurrentSessionOperationCompleted(object arg) {
            if ((this.getUserForCurrentSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserForCurrentSessionCompleted(this, new getUserForCurrentSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addUser", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordID")]
        public long addUser(long cookie, CUser pUser) {
            object[] results = this.Invoke("addUser", new object[] {
                        cookie,
                        pUser});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void addUserAsync(long cookie, CUser pUser) {
            this.addUserAsync(cookie, pUser, null);
        }
        
        /// <remarks/>
        public void addUserAsync(long cookie, CUser pUser, object userState) {
            if ((this.addUserOperationCompleted == null)) {
                this.addUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddUserOperationCompleted);
            }
            this.InvokeAsync("addUser", new object[] {
                        cookie,
                        pUser}, this.addUserOperationCompleted, userState);
        }
        
        private void OnaddUserOperationCompleted(object arg) {
            if ((this.addUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addUserCompleted(this, new addUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editUser", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pUser")]
        public CUser editUser(long cookie, string firstName, string middleInitials, string lastName) {
            object[] results = this.Invoke("editUser", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName});
            return ((CUser)(results[0]));
        }
        
        /// <remarks/>
        public void editUserAsync(long cookie, string firstName, string middleInitials, string lastName) {
            this.editUserAsync(cookie, firstName, middleInitials, lastName, null);
        }
        
        /// <remarks/>
        public void editUserAsync(long cookie, string firstName, string middleInitials, string lastName, object userState) {
            if ((this.editUserOperationCompleted == null)) {
                this.editUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditUserOperationCompleted);
            }
            this.InvokeAsync("editUser", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName}, this.editUserOperationCompleted, userState);
        }
        
        private void OneditUserOperationCompleted(object arg) {
            if ((this.editUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editUserCompleted(this, new editUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editUserByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pUser")]
        public CUser editUserByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("editUserByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((CUser)(results[0]));
        }
        
        /// <remarks/>
        public void editUserByRecordIDAsync(long cookie, long recordID) {
            this.editUserByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void editUserByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.editUserByRecordIDOperationCompleted == null)) {
                this.editUserByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditUserByRecordIDOperationCompleted);
            }
            this.InvokeAsync("editUserByRecordID", new object[] {
                        cookie,
                        recordID}, this.editUserByRecordIDOperationCompleted, userState);
        }
        
        private void OneditUserByRecordIDOperationCompleted(object arg) {
            if ((this.editUserByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editUserByRecordIDCompleted(this, new editUserByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveUser", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveUser(long cookie, string firstName, string middleInitials, string lastName, CUser pUser) {
            object[] results = this.Invoke("saveUser", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName,
                        pUser});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveUserAsync(long cookie, string firstName, string middleInitials, string lastName, CUser pUser) {
            this.saveUserAsync(cookie, firstName, middleInitials, lastName, pUser, null);
        }
        
        /// <remarks/>
        public void saveUserAsync(long cookie, string firstName, string middleInitials, string lastName, CUser pUser, object userState) {
            if ((this.saveUserOperationCompleted == null)) {
                this.saveUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveUserOperationCompleted);
            }
            this.InvokeAsync("saveUser", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName,
                        pUser}, this.saveUserOperationCompleted, userState);
        }
        
        private void OnsaveUserOperationCompleted(object arg) {
            if ((this.saveUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveUserCompleted(this, new saveUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteUser", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteUser(long cookie, string firstName, string middleInitials, string lastName) {
            object[] results = this.Invoke("deleteUser", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteUserAsync(long cookie, string firstName, string middleInitials, string lastName) {
            this.deleteUserAsync(cookie, firstName, middleInitials, lastName, null);
        }
        
        /// <remarks/>
        public void deleteUserAsync(long cookie, string firstName, string middleInitials, string lastName, object userState) {
            if ((this.deleteUserOperationCompleted == null)) {
                this.deleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteUserOperationCompleted);
            }
            this.InvokeAsync("deleteUser", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName}, this.deleteUserOperationCompleted, userState);
        }
        
        private void OndeleteUserOperationCompleted(object arg) {
            if ((this.deleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteUserCompleted(this, new deleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteUserByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteUserByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("deleteUserByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteUserByRecordIDAsync(long cookie, long recordID) {
            this.deleteUserByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void deleteUserByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.deleteUserByRecordIDOperationCompleted == null)) {
                this.deleteUserByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteUserByRecordIDOperationCompleted);
            }
            this.InvokeAsync("deleteUserByRecordID", new object[] {
                        cookie,
                        recordID}, this.deleteUserByRecordIDOperationCompleted, userState);
        }
        
        private void OndeleteUserByRecordIDOperationCompleted(object arg) {
            if ((this.deleteUserByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteUserByRecordIDCompleted(this, new deleteUserByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveUser", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveUser(long cookie, long recordID) {
            object[] results = this.Invoke("cancelSaveUser", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveUserAsync(long cookie, long recordID) {
            this.cancelSaveUserAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void cancelSaveUserAsync(long cookie, long recordID, object userState) {
            if ((this.cancelSaveUserOperationCompleted == null)) {
                this.cancelSaveUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveUserOperationCompleted);
            }
            this.InvokeAsync("cancelSaveUser", new object[] {
                        cookie,
                        recordID}, this.cancelSaveUserOperationCompleted, userState);
        }
        
        private void OncancelSaveUserOperationCompleted(object arg) {
            if ((this.cancelSaveUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveUserCompleted(this, new cancelSaveUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int promoteUser(long cookie, string localUser, string globalUser, string loginname) {
            object[] results = this.Invoke("promoteUser", new object[] {
                        cookie,
                        localUser,
                        globalUser,
                        loginname});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void promoteUserAsync(long cookie, string localUser, string globalUser, string loginname) {
            this.promoteUserAsync(cookie, localUser, globalUser, loginname, null);
        }
        
        /// <remarks/>
        public void promoteUserAsync(long cookie, string localUser, string globalUser, string loginname, object userState) {
            if ((this.promoteUserOperationCompleted == null)) {
                this.promoteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpromoteUserOperationCompleted);
            }
            this.InvokeAsync("promoteUser", new object[] {
                        cookie,
                        localUser,
                        globalUser,
                        loginname}, this.promoteUserOperationCompleted, userState);
        }
        
        private void OnpromoteUserOperationCompleted(object arg) {
            if ((this.promoteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.promoteUserCompleted(this, new promoteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int addGlobalUser(long cookie, CGlobalUser pUser) {
            object[] results = this.Invoke("addGlobalUser", new object[] {
                        cookie,
                        pUser});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addGlobalUserAsync(long cookie, CGlobalUser pUser) {
            this.addGlobalUserAsync(cookie, pUser, null);
        }
        
        /// <remarks/>
        public void addGlobalUserAsync(long cookie, CGlobalUser pUser, object userState) {
            if ((this.addGlobalUserOperationCompleted == null)) {
                this.addGlobalUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddGlobalUserOperationCompleted);
            }
            this.InvokeAsync("addGlobalUser", new object[] {
                        cookie,
                        pUser}, this.addGlobalUserOperationCompleted, userState);
        }
        
        private void OnaddGlobalUserOperationCompleted(object arg) {
            if ((this.addGlobalUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addGlobalUserCompleted(this, new addGlobalUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getCustomer", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pCustomer")]
        public CUser getCustomer(long cookie, string firstName, string middleInitials, string lastName) {
            object[] results = this.Invoke("getCustomer", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName});
            return ((CUser)(results[0]));
        }
        
        /// <remarks/>
        public void getCustomerAsync(long cookie, string firstName, string middleInitials, string lastName) {
            this.getCustomerAsync(cookie, firstName, middleInitials, lastName, null);
        }
        
        /// <remarks/>
        public void getCustomerAsync(long cookie, string firstName, string middleInitials, string lastName, object userState) {
            if ((this.getCustomerOperationCompleted == null)) {
                this.getCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCustomerOperationCompleted);
            }
            this.InvokeAsync("getCustomer", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName}, this.getCustomerOperationCompleted, userState);
        }
        
        private void OngetCustomerOperationCompleted(object arg) {
            if ((this.getCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCustomerCompleted(this, new getCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getCustomerByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pCustomer")]
        public CUser getCustomerByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("getCustomerByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((CUser)(results[0]));
        }
        
        /// <remarks/>
        public void getCustomerByRecordIDAsync(long cookie, long recordID) {
            this.getCustomerByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void getCustomerByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.getCustomerByRecordIDOperationCompleted == null)) {
                this.getCustomerByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCustomerByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getCustomerByRecordID", new object[] {
                        cookie,
                        recordID}, this.getCustomerByRecordIDOperationCompleted, userState);
        }
        
        private void OngetCustomerByRecordIDOperationCompleted(object arg) {
            if ((this.getCustomerByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCustomerByRecordIDCompleted(this, new getCustomerByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addCustomer", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordID")]
        public long addCustomer(long cookie, CUser pCustomer) {
            object[] results = this.Invoke("addCustomer", new object[] {
                        cookie,
                        pCustomer});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void addCustomerAsync(long cookie, CUser pCustomer) {
            this.addCustomerAsync(cookie, pCustomer, null);
        }
        
        /// <remarks/>
        public void addCustomerAsync(long cookie, CUser pCustomer, object userState) {
            if ((this.addCustomerOperationCompleted == null)) {
                this.addCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddCustomerOperationCompleted);
            }
            this.InvokeAsync("addCustomer", new object[] {
                        cookie,
                        pCustomer}, this.addCustomerOperationCompleted, userState);
        }
        
        private void OnaddCustomerOperationCompleted(object arg) {
            if ((this.addCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCustomerCompleted(this, new addCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editCustomer", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pCustomer")]
        public CUser editCustomer(long cookie, string firstName, string middleInitials, string lastName) {
            object[] results = this.Invoke("editCustomer", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName});
            return ((CUser)(results[0]));
        }
        
        /// <remarks/>
        public void editCustomerAsync(long cookie, string firstName, string middleInitials, string lastName) {
            this.editCustomerAsync(cookie, firstName, middleInitials, lastName, null);
        }
        
        /// <remarks/>
        public void editCustomerAsync(long cookie, string firstName, string middleInitials, string lastName, object userState) {
            if ((this.editCustomerOperationCompleted == null)) {
                this.editCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditCustomerOperationCompleted);
            }
            this.InvokeAsync("editCustomer", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName}, this.editCustomerOperationCompleted, userState);
        }
        
        private void OneditCustomerOperationCompleted(object arg) {
            if ((this.editCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editCustomerCompleted(this, new editCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editCustomerByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pCustomer")]
        public CUser editCustomerByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("editCustomerByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((CUser)(results[0]));
        }
        
        /// <remarks/>
        public void editCustomerByRecordIDAsync(long cookie, long recordID) {
            this.editCustomerByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void editCustomerByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.editCustomerByRecordIDOperationCompleted == null)) {
                this.editCustomerByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditCustomerByRecordIDOperationCompleted);
            }
            this.InvokeAsync("editCustomerByRecordID", new object[] {
                        cookie,
                        recordID}, this.editCustomerByRecordIDOperationCompleted, userState);
        }
        
        private void OneditCustomerByRecordIDOperationCompleted(object arg) {
            if ((this.editCustomerByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editCustomerByRecordIDCompleted(this, new editCustomerByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveCustomer", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveCustomer(long cookie, string firstName, string middleInitials, string lastName, CUser pCustomer) {
            object[] results = this.Invoke("saveCustomer", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName,
                        pCustomer});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveCustomerAsync(long cookie, string firstName, string middleInitials, string lastName, CUser pCustomer) {
            this.saveCustomerAsync(cookie, firstName, middleInitials, lastName, pCustomer, null);
        }
        
        /// <remarks/>
        public void saveCustomerAsync(long cookie, string firstName, string middleInitials, string lastName, CUser pCustomer, object userState) {
            if ((this.saveCustomerOperationCompleted == null)) {
                this.saveCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveCustomerOperationCompleted);
            }
            this.InvokeAsync("saveCustomer", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName,
                        pCustomer}, this.saveCustomerOperationCompleted, userState);
        }
        
        private void OnsaveCustomerOperationCompleted(object arg) {
            if ((this.saveCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveCustomerCompleted(this, new saveCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteCustomer", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteCustomer(long cookie, string firstName, string middleInitials, string lastName) {
            object[] results = this.Invoke("deleteCustomer", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteCustomerAsync(long cookie, string firstName, string middleInitials, string lastName) {
            this.deleteCustomerAsync(cookie, firstName, middleInitials, lastName, null);
        }
        
        /// <remarks/>
        public void deleteCustomerAsync(long cookie, string firstName, string middleInitials, string lastName, object userState) {
            if ((this.deleteCustomerOperationCompleted == null)) {
                this.deleteCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteCustomerOperationCompleted);
            }
            this.InvokeAsync("deleteCustomer", new object[] {
                        cookie,
                        firstName,
                        middleInitials,
                        lastName}, this.deleteCustomerOperationCompleted, userState);
        }
        
        private void OndeleteCustomerOperationCompleted(object arg) {
            if ((this.deleteCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCustomerCompleted(this, new deleteCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteCustomerByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteCustomerByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("deleteCustomerByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteCustomerByRecordIDAsync(long cookie, long recordID) {
            this.deleteCustomerByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void deleteCustomerByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.deleteCustomerByRecordIDOperationCompleted == null)) {
                this.deleteCustomerByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteCustomerByRecordIDOperationCompleted);
            }
            this.InvokeAsync("deleteCustomerByRecordID", new object[] {
                        cookie,
                        recordID}, this.deleteCustomerByRecordIDOperationCompleted, userState);
        }
        
        private void OndeleteCustomerByRecordIDOperationCompleted(object arg) {
            if ((this.deleteCustomerByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCustomerByRecordIDCompleted(this, new deleteCustomerByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveCustomer", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveCustomer(long cookie, long recordID) {
            object[] results = this.Invoke("cancelSaveCustomer", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveCustomerAsync(long cookie, long recordID) {
            this.cancelSaveCustomerAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void cancelSaveCustomerAsync(long cookie, long recordID, object userState) {
            if ((this.cancelSaveCustomerOperationCompleted == null)) {
                this.cancelSaveCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveCustomerOperationCompleted);
            }
            this.InvokeAsync("cancelSaveCustomer", new object[] {
                        cookie,
                        recordID}, this.cancelSaveCustomerOperationCompleted, userState);
        }
        
        private void OncancelSaveCustomerOperationCompleted(object arg) {
            if ((this.cancelSaveCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveCustomerCompleted(this, new cancelSaveCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int promoteCustomer(long cookie, string localCustomer, string globalUser, string loginname) {
            object[] results = this.Invoke("promoteCustomer", new object[] {
                        cookie,
                        localCustomer,
                        globalUser,
                        loginname});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void promoteCustomerAsync(long cookie, string localCustomer, string globalUser, string loginname) {
            this.promoteCustomerAsync(cookie, localCustomer, globalUser, loginname, null);
        }
        
        /// <remarks/>
        public void promoteCustomerAsync(long cookie, string localCustomer, string globalUser, string loginname, object userState) {
            if ((this.promoteCustomerOperationCompleted == null)) {
                this.promoteCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpromoteCustomerOperationCompleted);
            }
            this.InvokeAsync("promoteCustomer", new object[] {
                        cookie,
                        localCustomer,
                        globalUser,
                        loginname}, this.promoteCustomerOperationCompleted, userState);
        }
        
        private void OnpromoteCustomerOperationCompleted(object arg) {
            if ((this.promoteCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.promoteCustomerCompleted(this, new promoteCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int addGlobalCustomer(long cookie, CGlobalUser pUser) {
            object[] results = this.Invoke("addGlobalCustomer", new object[] {
                        cookie,
                        pUser});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addGlobalCustomerAsync(long cookie, CGlobalUser pUser) {
            this.addGlobalCustomerAsync(cookie, pUser, null);
        }
        
        /// <remarks/>
        public void addGlobalCustomerAsync(long cookie, CGlobalUser pUser, object userState) {
            if ((this.addGlobalCustomerOperationCompleted == null)) {
                this.addGlobalCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddGlobalCustomerOperationCompleted);
            }
            this.InvokeAsync("addGlobalCustomer", new object[] {
                        cookie,
                        pUser}, this.addGlobalCustomerOperationCompleted, userState);
        }
        
        private void OnaddGlobalCustomerOperationCompleted(object arg) {
            if ((this.addGlobalCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addGlobalCustomerCompleted(this, new addGlobalCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getLinksForItem", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pLinkList")]
        public CLink[] getLinksForItem(long cookie, string tablename, long itemRecordID) {
            object[] results = this.Invoke("getLinksForItem", new object[] {
                        cookie,
                        tablename,
                        itemRecordID});
            return ((CLink[])(results[0]));
        }
        
        /// <remarks/>
        public void getLinksForItemAsync(long cookie, string tablename, long itemRecordID) {
            this.getLinksForItemAsync(cookie, tablename, itemRecordID, null);
        }
        
        /// <remarks/>
        public void getLinksForItemAsync(long cookie, string tablename, long itemRecordID, object userState) {
            if ((this.getLinksForItemOperationCompleted == null)) {
                this.getLinksForItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLinksForItemOperationCompleted);
            }
            this.InvokeAsync("getLinksForItem", new object[] {
                        cookie,
                        tablename,
                        itemRecordID}, this.getLinksForItemOperationCompleted, userState);
        }
        
        private void OngetLinksForItemOperationCompleted(object arg) {
            if ((this.getLinksForItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLinksForItemCompleted(this, new getLinksForItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getLinksForDefect", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pLinkList")]
        public CLink[] getLinksForDefect(long cookie, long defectRecordID) {
            object[] results = this.Invoke("getLinksForDefect", new object[] {
                        cookie,
                        defectRecordID});
            return ((CLink[])(results[0]));
        }
        
        /// <remarks/>
        public void getLinksForDefectAsync(long cookie, long defectRecordID) {
            this.getLinksForDefectAsync(cookie, defectRecordID, null);
        }
        
        /// <remarks/>
        public void getLinksForDefectAsync(long cookie, long defectRecordID, object userState) {
            if ((this.getLinksForDefectOperationCompleted == null)) {
                this.getLinksForDefectOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLinksForDefectOperationCompleted);
            }
            this.InvokeAsync("getLinksForDefect", new object[] {
                        cookie,
                        defectRecordID}, this.getLinksForDefectOperationCompleted, userState);
        }
        
        private void OngetLinksForDefectOperationCompleted(object arg) {
            if ((this.getLinksForDefectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLinksForDefectCompleted(this, new getLinksForDefectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getLink", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pLink")]
        public CLink getLink(long cookie, long linkID) {
            object[] results = this.Invoke("getLink", new object[] {
                        cookie,
                        linkID});
            return ((CLink)(results[0]));
        }
        
        /// <remarks/>
        public void getLinkAsync(long cookie, long linkID) {
            this.getLinkAsync(cookie, linkID, null);
        }
        
        /// <remarks/>
        public void getLinkAsync(long cookie, long linkID, object userState) {
            if ((this.getLinkOperationCompleted == null)) {
                this.getLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetLinkOperationCompleted);
            }
            this.InvokeAsync("getLink", new object[] {
                        cookie,
                        linkID}, this.getLinkOperationCompleted, userState);
        }
        
        private void OngetLinkOperationCompleted(object arg) {
            if ((this.getLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getLinkCompleted(this, new getLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addLink", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordID")]
        public long addLink(long cookie, CLink pLink) {
            object[] results = this.Invoke("addLink", new object[] {
                        cookie,
                        pLink});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void addLinkAsync(long cookie, CLink pLink) {
            this.addLinkAsync(cookie, pLink, null);
        }
        
        /// <remarks/>
        public void addLinkAsync(long cookie, CLink pLink, object userState) {
            if ((this.addLinkOperationCompleted == null)) {
                this.addLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddLinkOperationCompleted);
            }
            this.InvokeAsync("addLink", new object[] {
                        cookie,
                        pLink}, this.addLinkOperationCompleted, userState);
        }
        
        private void OnaddLinkOperationCompleted(object arg) {
            if ((this.addLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addLinkCompleted(this, new addLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteLink", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteLink(long cookie, long linkID) {
            object[] results = this.Invoke("deleteLink", new object[] {
                        cookie,
                        linkID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteLinkAsync(long cookie, long linkID) {
            this.deleteLinkAsync(cookie, linkID, null);
        }
        
        /// <remarks/>
        public void deleteLinkAsync(long cookie, long linkID, object userState) {
            if ((this.deleteLinkOperationCompleted == null)) {
                this.deleteLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteLinkOperationCompleted);
            }
            this.InvokeAsync("deleteLink", new object[] {
                        cookie,
                        linkID}, this.deleteLinkOperationCompleted, userState);
        }
        
        private void OndeleteLinkOperationCompleted(object arg) {
            if ((this.deleteLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteLinkCompleted(this, new deleteLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editLink", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pLink")]
        public CLink editLink(long cookie, long linkID) {
            object[] results = this.Invoke("editLink", new object[] {
                        cookie,
                        linkID});
            return ((CLink)(results[0]));
        }
        
        /// <remarks/>
        public void editLinkAsync(long cookie, long linkID) {
            this.editLinkAsync(cookie, linkID, null);
        }
        
        /// <remarks/>
        public void editLinkAsync(long cookie, long linkID, object userState) {
            if ((this.editLinkOperationCompleted == null)) {
                this.editLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditLinkOperationCompleted);
            }
            this.InvokeAsync("editLink", new object[] {
                        cookie,
                        linkID}, this.editLinkOperationCompleted, userState);
        }
        
        private void OneditLinkOperationCompleted(object arg) {
            if ((this.editLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editLinkCompleted(this, new editLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveLink", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveLink(long cookie, CLink pLink) {
            object[] results = this.Invoke("saveLink", new object[] {
                        cookie,
                        pLink});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveLinkAsync(long cookie, CLink pLink) {
            this.saveLinkAsync(cookie, pLink, null);
        }
        
        /// <remarks/>
        public void saveLinkAsync(long cookie, CLink pLink, object userState) {
            if ((this.saveLinkOperationCompleted == null)) {
                this.saveLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveLinkOperationCompleted);
            }
            this.InvokeAsync("saveLink", new object[] {
                        cookie,
                        pLink}, this.saveLinkOperationCompleted, userState);
        }
        
        private void OnsaveLinkOperationCompleted(object arg) {
            if ((this.saveLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveLinkCompleted(this, new saveLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveLink", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveLink(long cookie, long linkID) {
            object[] results = this.Invoke("cancelSaveLink", new object[] {
                        cookie,
                        linkID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveLinkAsync(long cookie, long linkID) {
            this.cancelSaveLinkAsync(cookie, linkID, null);
        }
        
        /// <remarks/>
        public void cancelSaveLinkAsync(long cookie, long linkID, object userState) {
            if ((this.cancelSaveLinkOperationCompleted == null)) {
                this.cancelSaveLinkOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveLinkOperationCompleted);
            }
            this.InvokeAsync("cancelSaveLink", new object[] {
                        cookie,
                        linkID}, this.cancelSaveLinkOperationCompleted, userState);
        }
        
        private void OncancelSaveLinkOperationCompleted(object arg) {
            if ((this.cancelSaveLinkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveLinkCompleted(this, new cancelSaveLinkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getTestVariantTypes", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTypeList")]
        public string[] getTestVariantTypes(long cookie) {
            object[] results = this.Invoke("getTestVariantTypes", new object[] {
                        cookie});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getTestVariantTypesAsync(long cookie) {
            this.getTestVariantTypesAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getTestVariantTypesAsync(long cookie, object userState) {
            if ((this.getTestVariantTypesOperationCompleted == null)) {
                this.getTestVariantTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTestVariantTypesOperationCompleted);
            }
            this.InvokeAsync("getTestVariantTypes", new object[] {
                        cookie}, this.getTestVariantTypesOperationCompleted, userState);
        }
        
        private void OngetTestVariantTypesOperationCompleted(object arg) {
            if ((this.getTestVariantTypesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTestVariantTypesCompleted(this, new getTestVariantTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getTestRunStepsModes", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pModeList")]
        public string[] getTestRunStepsModes(long cookie) {
            object[] results = this.Invoke("getTestRunStepsModes", new object[] {
                        cookie});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void getTestRunStepsModesAsync(long cookie) {
            this.getTestRunStepsModesAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getTestRunStepsModesAsync(long cookie, object userState) {
            if ((this.getTestRunStepsModesOperationCompleted == null)) {
                this.getTestRunStepsModesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTestRunStepsModesOperationCompleted);
            }
            this.InvokeAsync("getTestRunStepsModes", new object[] {
                        cookie}, this.getTestRunStepsModesOperationCompleted, userState);
        }
        
        private void OngetTestRunStepsModesOperationCompleted(object arg) {
            if ((this.getTestRunStepsModesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTestRunStepsModesCompleted(this, new getTestRunStepsModesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getTestCase", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestCase")]
        public CTestCase getTestCase(long cookie, long testCaseNumber, string summary, bool bDownloadAttachments) {
            object[] results = this.Invoke("getTestCase", new object[] {
                        cookie,
                        testCaseNumber,
                        summary,
                        bDownloadAttachments});
            return ((CTestCase)(results[0]));
        }
        
        /// <remarks/>
        public void getTestCaseAsync(long cookie, long testCaseNumber, string summary, bool bDownloadAttachments) {
            this.getTestCaseAsync(cookie, testCaseNumber, summary, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void getTestCaseAsync(long cookie, long testCaseNumber, string summary, bool bDownloadAttachments, object userState) {
            if ((this.getTestCaseOperationCompleted == null)) {
                this.getTestCaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTestCaseOperationCompleted);
            }
            this.InvokeAsync("getTestCase", new object[] {
                        cookie,
                        testCaseNumber,
                        summary,
                        bDownloadAttachments}, this.getTestCaseOperationCompleted, userState);
        }
        
        private void OngetTestCaseOperationCompleted(object arg) {
            if ((this.getTestCaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTestCaseCompleted(this, new getTestCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getTestCaseByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestCase")]
        public CTestCase getTestCaseByRecordID(long cookie, long recordID, bool bDownloadAttachments) {
            object[] results = this.Invoke("getTestCaseByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments});
            return ((CTestCase)(results[0]));
        }
        
        /// <remarks/>
        public void getTestCaseByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments) {
            this.getTestCaseByRecordIDAsync(cookie, recordID, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void getTestCaseByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments, object userState) {
            if ((this.getTestCaseByRecordIDOperationCompleted == null)) {
                this.getTestCaseByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTestCaseByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getTestCaseByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments}, this.getTestCaseByRecordIDOperationCompleted, userState);
        }
        
        private void OngetTestCaseByRecordIDOperationCompleted(object arg) {
            if ((this.getTestCaseByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTestCaseByRecordIDCompleted(this, new getTestCaseByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addTestCase", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordID")]
        public long addTestCase(long cookie, CTestCase pTestCase) {
            object[] results = this.Invoke("addTestCase", new object[] {
                        cookie,
                        pTestCase});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void addTestCaseAsync(long cookie, CTestCase pTestCase) {
            this.addTestCaseAsync(cookie, pTestCase, null);
        }
        
        /// <remarks/>
        public void addTestCaseAsync(long cookie, CTestCase pTestCase, object userState) {
            if ((this.addTestCaseOperationCompleted == null)) {
                this.addTestCaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddTestCaseOperationCompleted);
            }
            this.InvokeAsync("addTestCase", new object[] {
                        cookie,
                        pTestCase}, this.addTestCaseOperationCompleted, userState);
        }
        
        private void OnaddTestCaseOperationCompleted(object arg) {
            if ((this.addTestCaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addTestCaseCompleted(this, new addTestCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteTestCase", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteTestCase(long cookie, long testCaseNumber, string summary, bool bDeleteAssociatedTestRuns) {
            object[] results = this.Invoke("deleteTestCase", new object[] {
                        cookie,
                        testCaseNumber,
                        summary,
                        bDeleteAssociatedTestRuns});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteTestCaseAsync(long cookie, long testCaseNumber, string summary, bool bDeleteAssociatedTestRuns) {
            this.deleteTestCaseAsync(cookie, testCaseNumber, summary, bDeleteAssociatedTestRuns, null);
        }
        
        /// <remarks/>
        public void deleteTestCaseAsync(long cookie, long testCaseNumber, string summary, bool bDeleteAssociatedTestRuns, object userState) {
            if ((this.deleteTestCaseOperationCompleted == null)) {
                this.deleteTestCaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTestCaseOperationCompleted);
            }
            this.InvokeAsync("deleteTestCase", new object[] {
                        cookie,
                        testCaseNumber,
                        summary,
                        bDeleteAssociatedTestRuns}, this.deleteTestCaseOperationCompleted, userState);
        }
        
        private void OndeleteTestCaseOperationCompleted(object arg) {
            if ((this.deleteTestCaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteTestCaseCompleted(this, new deleteTestCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteTestCaseByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteTestCaseByRecordID(long cookie, long recordID, bool bDeleteAssociatedTestRun) {
            object[] results = this.Invoke("deleteTestCaseByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDeleteAssociatedTestRun});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteTestCaseByRecordIDAsync(long cookie, long recordID, bool bDeleteAssociatedTestRun) {
            this.deleteTestCaseByRecordIDAsync(cookie, recordID, bDeleteAssociatedTestRun, null);
        }
        
        /// <remarks/>
        public void deleteTestCaseByRecordIDAsync(long cookie, long recordID, bool bDeleteAssociatedTestRun, object userState) {
            if ((this.deleteTestCaseByRecordIDOperationCompleted == null)) {
                this.deleteTestCaseByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTestCaseByRecordIDOperationCompleted);
            }
            this.InvokeAsync("deleteTestCaseByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDeleteAssociatedTestRun}, this.deleteTestCaseByRecordIDOperationCompleted, userState);
        }
        
        private void OndeleteTestCaseByRecordIDOperationCompleted(object arg) {
            if ((this.deleteTestCaseByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteTestCaseByRecordIDCompleted(this, new deleteTestCaseByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editTestCase", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestCase")]
        public CTestCase editTestCase(long cookie, long testCaseNumber, string summary, bool bDownloadAttachments) {
            object[] results = this.Invoke("editTestCase", new object[] {
                        cookie,
                        testCaseNumber,
                        summary,
                        bDownloadAttachments});
            return ((CTestCase)(results[0]));
        }
        
        /// <remarks/>
        public void editTestCaseAsync(long cookie, long testCaseNumber, string summary, bool bDownloadAttachments) {
            this.editTestCaseAsync(cookie, testCaseNumber, summary, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void editTestCaseAsync(long cookie, long testCaseNumber, string summary, bool bDownloadAttachments, object userState) {
            if ((this.editTestCaseOperationCompleted == null)) {
                this.editTestCaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditTestCaseOperationCompleted);
            }
            this.InvokeAsync("editTestCase", new object[] {
                        cookie,
                        testCaseNumber,
                        summary,
                        bDownloadAttachments}, this.editTestCaseOperationCompleted, userState);
        }
        
        private void OneditTestCaseOperationCompleted(object arg) {
            if ((this.editTestCaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editTestCaseCompleted(this, new editTestCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editTestCaseByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestCase")]
        public CTestCase editTestCaseByRecordID(long cookie, long recordID, bool bDownloadAttachments) {
            object[] results = this.Invoke("editTestCaseByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments});
            return ((CTestCase)(results[0]));
        }
        
        /// <remarks/>
        public void editTestCaseByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments) {
            this.editTestCaseByRecordIDAsync(cookie, recordID, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void editTestCaseByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments, object userState) {
            if ((this.editTestCaseByRecordIDOperationCompleted == null)) {
                this.editTestCaseByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditTestCaseByRecordIDOperationCompleted);
            }
            this.InvokeAsync("editTestCaseByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments}, this.editTestCaseByRecordIDOperationCompleted, userState);
        }
        
        private void OneditTestCaseByRecordIDOperationCompleted(object arg) {
            if ((this.editTestCaseByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editTestCaseByRecordIDCompleted(this, new editTestCaseByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveTestCase", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveTestCase(long cookie, CTestCase pTestCase) {
            object[] results = this.Invoke("saveTestCase", new object[] {
                        cookie,
                        pTestCase});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveTestCaseAsync(long cookie, CTestCase pTestCase) {
            this.saveTestCaseAsync(cookie, pTestCase, null);
        }
        
        /// <remarks/>
        public void saveTestCaseAsync(long cookie, CTestCase pTestCase, object userState) {
            if ((this.saveTestCaseOperationCompleted == null)) {
                this.saveTestCaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveTestCaseOperationCompleted);
            }
            this.InvokeAsync("saveTestCase", new object[] {
                        cookie,
                        pTestCase}, this.saveTestCaseOperationCompleted, userState);
        }
        
        private void OnsaveTestCaseOperationCompleted(object arg) {
            if ((this.saveTestCaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveTestCaseCompleted(this, new saveTestCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveTestCase", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveTestCase(long cookie, long recordID) {
            object[] results = this.Invoke("cancelSaveTestCase", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveTestCaseAsync(long cookie, long recordID) {
            this.cancelSaveTestCaseAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void cancelSaveTestCaseAsync(long cookie, long recordID, object userState) {
            if ((this.cancelSaveTestCaseOperationCompleted == null)) {
                this.cancelSaveTestCaseOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveTestCaseOperationCompleted);
            }
            this.InvokeAsync("cancelSaveTestCase", new object[] {
                        cookie,
                        recordID}, this.cancelSaveTestCaseOperationCompleted, userState);
        }
        
        private void OncancelSaveTestCaseOperationCompleted(object arg) {
            if ((this.cancelSaveTestCaseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveTestCaseCompleted(this, new cancelSaveTestCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getTestRun", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestRun")]
        public CTestRun getTestRun(long cookie, long testRunNumber, string summary, bool bDownloadAttachments) {
            object[] results = this.Invoke("getTestRun", new object[] {
                        cookie,
                        testRunNumber,
                        summary,
                        bDownloadAttachments});
            return ((CTestRun)(results[0]));
        }
        
        /// <remarks/>
        public void getTestRunAsync(long cookie, long testRunNumber, string summary, bool bDownloadAttachments) {
            this.getTestRunAsync(cookie, testRunNumber, summary, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void getTestRunAsync(long cookie, long testRunNumber, string summary, bool bDownloadAttachments, object userState) {
            if ((this.getTestRunOperationCompleted == null)) {
                this.getTestRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTestRunOperationCompleted);
            }
            this.InvokeAsync("getTestRun", new object[] {
                        cookie,
                        testRunNumber,
                        summary,
                        bDownloadAttachments}, this.getTestRunOperationCompleted, userState);
        }
        
        private void OngetTestRunOperationCompleted(object arg) {
            if ((this.getTestRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTestRunCompleted(this, new getTestRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getTestRunByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestRun")]
        public CTestRun getTestRunByRecordID(long cookie, long recordID, bool bDownloadAttachments) {
            object[] results = this.Invoke("getTestRunByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments});
            return ((CTestRun)(results[0]));
        }
        
        /// <remarks/>
        public void getTestRunByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments) {
            this.getTestRunByRecordIDAsync(cookie, recordID, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void getTestRunByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments, object userState) {
            if ((this.getTestRunByRecordIDOperationCompleted == null)) {
                this.getTestRunByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTestRunByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getTestRunByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments}, this.getTestRunByRecordIDOperationCompleted, userState);
        }
        
        private void OngetTestRunByRecordIDOperationCompleted(object arg) {
            if ((this.getTestRunByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTestRunByRecordIDCompleted(this, new getTestRunByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteTestRun", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteTestRun(long cookie, long testRunNumber, string summary) {
            object[] results = this.Invoke("deleteTestRun", new object[] {
                        cookie,
                        testRunNumber,
                        summary});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteTestRunAsync(long cookie, long testRunNumber, string summary) {
            this.deleteTestRunAsync(cookie, testRunNumber, summary, null);
        }
        
        /// <remarks/>
        public void deleteTestRunAsync(long cookie, long testRunNumber, string summary, object userState) {
            if ((this.deleteTestRunOperationCompleted == null)) {
                this.deleteTestRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTestRunOperationCompleted);
            }
            this.InvokeAsync("deleteTestRun", new object[] {
                        cookie,
                        testRunNumber,
                        summary}, this.deleteTestRunOperationCompleted, userState);
        }
        
        private void OndeleteTestRunOperationCompleted(object arg) {
            if ((this.deleteTestRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteTestRunCompleted(this, new deleteTestRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteTestRunByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteTestRunByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("deleteTestRunByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteTestRunByRecordIDAsync(long cookie, long recordID) {
            this.deleteTestRunByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void deleteTestRunByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.deleteTestRunByRecordIDOperationCompleted == null)) {
                this.deleteTestRunByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteTestRunByRecordIDOperationCompleted);
            }
            this.InvokeAsync("deleteTestRunByRecordID", new object[] {
                        cookie,
                        recordID}, this.deleteTestRunByRecordIDOperationCompleted, userState);
        }
        
        private void OndeleteTestRunByRecordIDOperationCompleted(object arg) {
            if ((this.deleteTestRunByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteTestRunByRecordIDCompleted(this, new deleteTestRunByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editTestRun", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestRun")]
        public CTestRun editTestRun(long cookie, long testRunNumber, string summary, bool bDownloadAttachments) {
            object[] results = this.Invoke("editTestRun", new object[] {
                        cookie,
                        testRunNumber,
                        summary,
                        bDownloadAttachments});
            return ((CTestRun)(results[0]));
        }
        
        /// <remarks/>
        public void editTestRunAsync(long cookie, long testRunNumber, string summary, bool bDownloadAttachments) {
            this.editTestRunAsync(cookie, testRunNumber, summary, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void editTestRunAsync(long cookie, long testRunNumber, string summary, bool bDownloadAttachments, object userState) {
            if ((this.editTestRunOperationCompleted == null)) {
                this.editTestRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditTestRunOperationCompleted);
            }
            this.InvokeAsync("editTestRun", new object[] {
                        cookie,
                        testRunNumber,
                        summary,
                        bDownloadAttachments}, this.editTestRunOperationCompleted, userState);
        }
        
        private void OneditTestRunOperationCompleted(object arg) {
            if ((this.editTestRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editTestRunCompleted(this, new editTestRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editTestRunByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTestRun")]
        public CTestRun editTestRunByRecordID(long cookie, long recordID, bool bDownloadAttachments) {
            object[] results = this.Invoke("editTestRunByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments});
            return ((CTestRun)(results[0]));
        }
        
        /// <remarks/>
        public void editTestRunByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments) {
            this.editTestRunByRecordIDAsync(cookie, recordID, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void editTestRunByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments, object userState) {
            if ((this.editTestRunByRecordIDOperationCompleted == null)) {
                this.editTestRunByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditTestRunByRecordIDOperationCompleted);
            }
            this.InvokeAsync("editTestRunByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments}, this.editTestRunByRecordIDOperationCompleted, userState);
        }
        
        private void OneditTestRunByRecordIDOperationCompleted(object arg) {
            if ((this.editTestRunByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editTestRunByRecordIDCompleted(this, new editTestRunByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveTestRun", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveTestRun(long cookie, CTestRun pTestRun) {
            object[] results = this.Invoke("saveTestRun", new object[] {
                        cookie,
                        pTestRun});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveTestRunAsync(long cookie, CTestRun pTestRun) {
            this.saveTestRunAsync(cookie, pTestRun, null);
        }
        
        /// <remarks/>
        public void saveTestRunAsync(long cookie, CTestRun pTestRun, object userState) {
            if ((this.saveTestRunOperationCompleted == null)) {
                this.saveTestRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveTestRunOperationCompleted);
            }
            this.InvokeAsync("saveTestRun", new object[] {
                        cookie,
                        pTestRun}, this.saveTestRunOperationCompleted, userState);
        }
        
        private void OnsaveTestRunOperationCompleted(object arg) {
            if ((this.saveTestRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveTestRunCompleted(this, new saveTestRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveTestRun", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveTestRun(long cookie, long recordID) {
            object[] results = this.Invoke("cancelSaveTestRun", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveTestRunAsync(long cookie, long recordID) {
            this.cancelSaveTestRunAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void cancelSaveTestRunAsync(long cookie, long recordID, object userState) {
            if ((this.cancelSaveTestRunOperationCompleted == null)) {
                this.cancelSaveTestRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveTestRunOperationCompleted);
            }
            this.InvokeAsync("cancelSaveTestRun", new object[] {
                        cookie,
                        recordID}, this.cancelSaveTestRunOperationCompleted, userState);
        }
        
        private void OncancelSaveTestRunOperationCompleted(object arg) {
            if ((this.cancelSaveTestRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveTestRunCompleted(this, new cancelSaveTestRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#createDefectForTestRun", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pDefect")]
        public CDefect createDefectForTestRun(long cookie, long recordID) {
            object[] results = this.Invoke("createDefectForTestRun", new object[] {
                        cookie,
                        recordID});
            return ((CDefect)(results[0]));
        }
        
        /// <remarks/>
        public void createDefectForTestRunAsync(long cookie, long recordID) {
            this.createDefectForTestRunAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void createDefectForTestRunAsync(long cookie, long recordID, object userState) {
            if ((this.createDefectForTestRunOperationCompleted == null)) {
                this.createDefectForTestRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateDefectForTestRunOperationCompleted);
            }
            this.InvokeAsync("createDefectForTestRun", new object[] {
                        cookie,
                        recordID}, this.createDefectForTestRunOperationCompleted, userState);
        }
        
        private void OncreateDefectForTestRunOperationCompleted(object arg) {
            if ((this.createDefectForTestRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createDefectForTestRunCompleted(this, new createDefectForTestRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#generateTestRuns", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pResults")]
        public CItemToTrack[] generateTestRuns(long cookie, long recordID, CTestRunVariantField[] testVariants, string testRunSet) {
            object[] results = this.Invoke("generateTestRuns", new object[] {
                        cookie,
                        recordID,
                        testVariants,
                        testRunSet});
            return ((CItemToTrack[])(results[0]));
        }
        
        /// <remarks/>
        public void generateTestRunsAsync(long cookie, long recordID, CTestRunVariantField[] testVariants, string testRunSet) {
            this.generateTestRunsAsync(cookie, recordID, testVariants, testRunSet, null);
        }
        
        /// <remarks/>
        public void generateTestRunsAsync(long cookie, long recordID, CTestRunVariantField[] testVariants, string testRunSet, object userState) {
            if ((this.generateTestRunsOperationCompleted == null)) {
                this.generateTestRunsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngenerateTestRunsOperationCompleted);
            }
            this.InvokeAsync("generateTestRuns", new object[] {
                        cookie,
                        recordID,
                        testVariants,
                        testRunSet}, this.generateTestRunsOperationCompleted, userState);
        }
        
        private void OngenerateTestRunsOperationCompleted(object arg) {
            if ((this.generateTestRunsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.generateTestRunsCompleted(this, new generateTestRunsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getFolderTypeByName", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pType")]
        public CFolderType getFolderTypeByName(long cookie, string name) {
            object[] results = this.Invoke("getFolderTypeByName", new object[] {
                        cookie,
                        name});
            return ((CFolderType)(results[0]));
        }
        
        /// <remarks/>
        public void getFolderTypeByNameAsync(long cookie, string name) {
            this.getFolderTypeByNameAsync(cookie, name, null);
        }
        
        /// <remarks/>
        public void getFolderTypeByNameAsync(long cookie, string name, object userState) {
            if ((this.getFolderTypeByNameOperationCompleted == null)) {
                this.getFolderTypeByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFolderTypeByNameOperationCompleted);
            }
            this.InvokeAsync("getFolderTypeByName", new object[] {
                        cookie,
                        name}, this.getFolderTypeByNameOperationCompleted, userState);
        }
        
        private void OngetFolderTypeByNameOperationCompleted(object arg) {
            if ((this.getFolderTypeByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFolderTypeByNameCompleted(this, new getFolderTypeByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getFolderTypeList", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pTypeList")]
        public CFolderType[] getFolderTypeList(long cookie) {
            object[] results = this.Invoke("getFolderTypeList", new object[] {
                        cookie});
            return ((CFolderType[])(results[0]));
        }
        
        /// <remarks/>
        public void getFolderTypeListAsync(long cookie) {
            this.getFolderTypeListAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getFolderTypeListAsync(long cookie, object userState) {
            if ((this.getFolderTypeListOperationCompleted == null)) {
                this.getFolderTypeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFolderTypeListOperationCompleted);
            }
            this.InvokeAsync("getFolderTypeList", new object[] {
                        cookie}, this.getFolderTypeListOperationCompleted, userState);
        }
        
        private void OngetFolderTypeListOperationCompleted(object arg) {
            if ((this.getFolderTypeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFolderTypeListCompleted(this, new getFolderTypeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addFolder", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordID")]
        public long addFolder(long cookie, CFolder pFolder) {
            object[] results = this.Invoke("addFolder", new object[] {
                        cookie,
                        pFolder});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void addFolderAsync(long cookie, CFolder pFolder) {
            this.addFolderAsync(cookie, pFolder, null);
        }
        
        /// <remarks/>
        public void addFolderAsync(long cookie, CFolder pFolder, object userState) {
            if ((this.addFolderOperationCompleted == null)) {
                this.addFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddFolderOperationCompleted);
            }
            this.InvokeAsync("addFolder", new object[] {
                        cookie,
                        pFolder}, this.addFolderOperationCompleted, userState);
        }
        
        private void OnaddFolderOperationCompleted(object arg) {
            if ((this.addFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addFolderCompleted(this, new addFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editFolder", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pFolder")]
        public CFolder editFolder(long cookie, string folderPath) {
            object[] results = this.Invoke("editFolder", new object[] {
                        cookie,
                        folderPath});
            return ((CFolder)(results[0]));
        }
        
        /// <remarks/>
        public void editFolderAsync(long cookie, string folderPath) {
            this.editFolderAsync(cookie, folderPath, null);
        }
        
        /// <remarks/>
        public void editFolderAsync(long cookie, string folderPath, object userState) {
            if ((this.editFolderOperationCompleted == null)) {
                this.editFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditFolderOperationCompleted);
            }
            this.InvokeAsync("editFolder", new object[] {
                        cookie,
                        folderPath}, this.editFolderOperationCompleted, userState);
        }
        
        private void OneditFolderOperationCompleted(object arg) {
            if ((this.editFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editFolderCompleted(this, new editFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editFolderByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pFolder")]
        public CFolder editFolderByRecordID(long cookie, long recordID, bool publicFolder) {
            object[] results = this.Invoke("editFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder});
            return ((CFolder)(results[0]));
        }
        
        /// <remarks/>
        public void editFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder) {
            this.editFolderByRecordIDAsync(cookie, recordID, publicFolder, null);
        }
        
        /// <remarks/>
        public void editFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder, object userState) {
            if ((this.editFolderByRecordIDOperationCompleted == null)) {
                this.editFolderByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditFolderByRecordIDOperationCompleted);
            }
            this.InvokeAsync("editFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder}, this.editFolderByRecordIDOperationCompleted, userState);
        }
        
        private void OneditFolderByRecordIDOperationCompleted(object arg) {
            if ((this.editFolderByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editFolderByRecordIDCompleted(this, new editFolderByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveFolder", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveFolder(long cookie, CFolder pFolder) {
            object[] results = this.Invoke("saveFolder", new object[] {
                        cookie,
                        pFolder});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveFolderAsync(long cookie, CFolder pFolder) {
            this.saveFolderAsync(cookie, pFolder, null);
        }
        
        /// <remarks/>
        public void saveFolderAsync(long cookie, CFolder pFolder, object userState) {
            if ((this.saveFolderOperationCompleted == null)) {
                this.saveFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveFolderOperationCompleted);
            }
            this.InvokeAsync("saveFolder", new object[] {
                        cookie,
                        pFolder}, this.saveFolderOperationCompleted, userState);
        }
        
        private void OnsaveFolderOperationCompleted(object arg) {
            if ((this.saveFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveFolderCompleted(this, new saveFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveFolder", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveFolder(long cookie, long recordID) {
            object[] results = this.Invoke("cancelSaveFolder", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveFolderAsync(long cookie, long recordID) {
            this.cancelSaveFolderAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void cancelSaveFolderAsync(long cookie, long recordID, object userState) {
            if ((this.cancelSaveFolderOperationCompleted == null)) {
                this.cancelSaveFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveFolderOperationCompleted);
            }
            this.InvokeAsync("cancelSaveFolder", new object[] {
                        cookie,
                        recordID}, this.cancelSaveFolderOperationCompleted, userState);
        }
        
        private void OncancelSaveFolderOperationCompleted(object arg) {
            if ((this.cancelSaveFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveFolderCompleted(this, new cancelSaveFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getFolder", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pFolder")]
        public CFolder getFolder(long cookie, string path) {
            object[] results = this.Invoke("getFolder", new object[] {
                        cookie,
                        path});
            return ((CFolder)(results[0]));
        }
        
        /// <remarks/>
        public void getFolderAsync(long cookie, string path) {
            this.getFolderAsync(cookie, path, null);
        }
        
        /// <remarks/>
        public void getFolderAsync(long cookie, string path, object userState) {
            if ((this.getFolderOperationCompleted == null)) {
                this.getFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFolderOperationCompleted);
            }
            this.InvokeAsync("getFolder", new object[] {
                        cookie,
                        path}, this.getFolderOperationCompleted, userState);
        }
        
        private void OngetFolderOperationCompleted(object arg) {
            if ((this.getFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFolderCompleted(this, new getFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getFolderByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pFolder")]
        public CFolder getFolderByRecordID(long cookie, long recordID, bool publicFolder) {
            object[] results = this.Invoke("getFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder});
            return ((CFolder)(results[0]));
        }
        
        /// <remarks/>
        public void getFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder) {
            this.getFolderByRecordIDAsync(cookie, recordID, publicFolder, null);
        }
        
        /// <remarks/>
        public void getFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder, object userState) {
            if ((this.getFolderByRecordIDOperationCompleted == null)) {
                this.getFolderByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFolderByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder}, this.getFolderByRecordIDOperationCompleted, userState);
        }
        
        private void OngetFolderByRecordIDOperationCompleted(object arg) {
            if ((this.getFolderByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFolderByRecordIDCompleted(this, new getFolderByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteFolder", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteFolder(long cookie, string folderPath) {
            object[] results = this.Invoke("deleteFolder", new object[] {
                        cookie,
                        folderPath});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteFolderAsync(long cookie, string folderPath) {
            this.deleteFolderAsync(cookie, folderPath, null);
        }
        
        /// <remarks/>
        public void deleteFolderAsync(long cookie, string folderPath, object userState) {
            if ((this.deleteFolderOperationCompleted == null)) {
                this.deleteFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteFolderOperationCompleted);
            }
            this.InvokeAsync("deleteFolder", new object[] {
                        cookie,
                        folderPath}, this.deleteFolderOperationCompleted, userState);
        }
        
        private void OndeleteFolderOperationCompleted(object arg) {
            if ((this.deleteFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteFolderCompleted(this, new deleteFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteFolderByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteFolderByRecordID(long cookie, long recordID, bool publicFolder) {
            object[] results = this.Invoke("deleteFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder) {
            this.deleteFolderByRecordIDAsync(cookie, recordID, publicFolder, null);
        }
        
        /// <remarks/>
        public void deleteFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder, object userState) {
            if ((this.deleteFolderByRecordIDOperationCompleted == null)) {
                this.deleteFolderByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteFolderByRecordIDOperationCompleted);
            }
            this.InvokeAsync("deleteFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder}, this.deleteFolderByRecordIDOperationCompleted, userState);
        }
        
        private void OndeleteFolderByRecordIDOperationCompleted(object arg) {
            if ((this.deleteFolderByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteFolderByRecordIDCompleted(this, new deleteFolderByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addEntityToFolderByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("itemRecordID")]
        public int addEntityToFolderByRecordID(long cookie, long recordID, bool publicFolder, long entityRecordID, string entityTableName) {
            object[] results = this.Invoke("addEntityToFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder,
                        entityRecordID,
                        entityTableName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void addEntityToFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder, long entityRecordID, string entityTableName) {
            this.addEntityToFolderByRecordIDAsync(cookie, recordID, publicFolder, entityRecordID, entityTableName, null);
        }
        
        /// <remarks/>
        public void addEntityToFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder, long entityRecordID, string entityTableName, object userState) {
            if ((this.addEntityToFolderByRecordIDOperationCompleted == null)) {
                this.addEntityToFolderByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddEntityToFolderByRecordIDOperationCompleted);
            }
            this.InvokeAsync("addEntityToFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder,
                        entityRecordID,
                        entityTableName}, this.addEntityToFolderByRecordIDOperationCompleted, userState);
        }
        
        private void OnaddEntityToFolderByRecordIDOperationCompleted(object arg) {
            if ((this.addEntityToFolderByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addEntityToFolderByRecordIDCompleted(this, new addEntityToFolderByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#removeEntityFromFolderByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int removeEntityFromFolderByRecordID(long cookie, long recordID, bool publicFolder, CFolderItem entity) {
            object[] results = this.Invoke("removeEntityFromFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder,
                        entity});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void removeEntityFromFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder, CFolderItem entity) {
            this.removeEntityFromFolderByRecordIDAsync(cookie, recordID, publicFolder, entity, null);
        }
        
        /// <remarks/>
        public void removeEntityFromFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder, CFolderItem entity, object userState) {
            if ((this.removeEntityFromFolderByRecordIDOperationCompleted == null)) {
                this.removeEntityFromFolderByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveEntityFromFolderByRecordIDOperationCompleted);
            }
            this.InvokeAsync("removeEntityFromFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder,
                        entity}, this.removeEntityFromFolderByRecordIDOperationCompleted, userState);
        }
        
        private void OnremoveEntityFromFolderByRecordIDOperationCompleted(object arg) {
            if ((this.removeEntityFromFolderByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeEntityFromFolderByRecordIDCompleted(this, new removeEntityFromFolderByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getEntityListForFolderByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pEntityList")]
        public CFolderItem[] getEntityListForFolderByRecordID(long cookie, long recordID, bool publicFolder) {
            object[] results = this.Invoke("getEntityListForFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder});
            return ((CFolderItem[])(results[0]));
        }
        
        /// <remarks/>
        public void getEntityListForFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder) {
            this.getEntityListForFolderByRecordIDAsync(cookie, recordID, publicFolder, null);
        }
        
        /// <remarks/>
        public void getEntityListForFolderByRecordIDAsync(long cookie, long recordID, bool publicFolder, object userState) {
            if ((this.getEntityListForFolderByRecordIDOperationCompleted == null)) {
                this.getEntityListForFolderByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEntityListForFolderByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getEntityListForFolderByRecordID", new object[] {
                        cookie,
                        recordID,
                        publicFolder}, this.getEntityListForFolderByRecordIDOperationCompleted, userState);
        }
        
        private void OngetEntityListForFolderByRecordIDOperationCompleted(object arg) {
            if ((this.getEntityListForFolderByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEntityListForFolderByRecordIDCompleted(this, new getEntityListForFolderByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getFolderListForEntityByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pFolderList")]
        public CFolder[] getFolderListForEntityByRecordID(long cookie, string tablename, long recordID) {
            object[] results = this.Invoke("getFolderListForEntityByRecordID", new object[] {
                        cookie,
                        tablename,
                        recordID});
            return ((CFolder[])(results[0]));
        }
        
        /// <remarks/>
        public void getFolderListForEntityByRecordIDAsync(long cookie, string tablename, long recordID) {
            this.getFolderListForEntityByRecordIDAsync(cookie, tablename, recordID, null);
        }
        
        /// <remarks/>
        public void getFolderListForEntityByRecordIDAsync(long cookie, string tablename, long recordID, object userState) {
            if ((this.getFolderListForEntityByRecordIDOperationCompleted == null)) {
                this.getFolderListForEntityByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFolderListForEntityByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getFolderListForEntityByRecordID", new object[] {
                        cookie,
                        tablename,
                        recordID}, this.getFolderListForEntityByRecordIDOperationCompleted, userState);
        }
        
        private void OngetFolderListForEntityByRecordIDOperationCompleted(object arg) {
            if ((this.getFolderListForEntityByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFolderListForEntityByRecordIDCompleted(this, new getFolderListForEntityByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getFolderPathSeparator", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("separator")]
        public sbyte getFolderPathSeparator(long cookie) {
            object[] results = this.Invoke("getFolderPathSeparator", new object[] {
                        cookie});
            return ((sbyte)(results[0]));
        }
        
        /// <remarks/>
        public void getFolderPathSeparatorAsync(long cookie) {
            this.getFolderPathSeparatorAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getFolderPathSeparatorAsync(long cookie, object userState) {
            if ((this.getFolderPathSeparatorOperationCompleted == null)) {
                this.getFolderPathSeparatorOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFolderPathSeparatorOperationCompleted);
            }
            this.InvokeAsync("getFolderPathSeparator", new object[] {
                        cookie}, this.getFolderPathSeparatorOperationCompleted, userState);
        }
        
        private void OngetFolderPathSeparatorOperationCompleted(object arg) {
            if ((this.getFolderPathSeparatorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFolderPathSeparatorCompleted(this, new getFolderPathSeparatorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getRootPublicFolderPath", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("strPublicPath")]
        public string getRootPublicFolderPath(long cookie) {
            object[] results = this.Invoke("getRootPublicFolderPath", new object[] {
                        cookie});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getRootPublicFolderPathAsync(long cookie) {
            this.getRootPublicFolderPathAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getRootPublicFolderPathAsync(long cookie, object userState) {
            if ((this.getRootPublicFolderPathOperationCompleted == null)) {
                this.getRootPublicFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRootPublicFolderPathOperationCompleted);
            }
            this.InvokeAsync("getRootPublicFolderPath", new object[] {
                        cookie}, this.getRootPublicFolderPathOperationCompleted, userState);
        }
        
        private void OngetRootPublicFolderPathOperationCompleted(object arg) {
            if ((this.getRootPublicFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRootPublicFolderPathCompleted(this, new getRootPublicFolderPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getRootPrivateFolderPath", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("strPrivatePath")]
        public string getRootPrivateFolderPath(long cookie) {
            object[] results = this.Invoke("getRootPrivateFolderPath", new object[] {
                        cookie});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getRootPrivateFolderPathAsync(long cookie) {
            this.getRootPrivateFolderPathAsync(cookie, null);
        }
        
        /// <remarks/>
        public void getRootPrivateFolderPathAsync(long cookie, object userState) {
            if ((this.getRootPrivateFolderPathOperationCompleted == null)) {
                this.getRootPrivateFolderPathOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRootPrivateFolderPathOperationCompleted);
            }
            this.InvokeAsync("getRootPrivateFolderPath", new object[] {
                        cookie}, this.getRootPrivateFolderPathOperationCompleted, userState);
        }
        
        private void OngetRootPrivateFolderPathOperationCompleted(object arg) {
            if ((this.getRootPrivateFolderPathCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRootPrivateFolderPathCompleted(this, new getRootPrivateFolderPathCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editFolderItemRank", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pEntityList")]
        public CFolderItem[] editFolderItemRank(long cookie, long recordID, bool publicFolder) {
            object[] results = this.Invoke("editFolderItemRank", new object[] {
                        cookie,
                        recordID,
                        publicFolder});
            return ((CFolderItem[])(results[0]));
        }
        
        /// <remarks/>
        public void editFolderItemRankAsync(long cookie, long recordID, bool publicFolder) {
            this.editFolderItemRankAsync(cookie, recordID, publicFolder, null);
        }
        
        /// <remarks/>
        public void editFolderItemRankAsync(long cookie, long recordID, bool publicFolder, object userState) {
            if ((this.editFolderItemRankOperationCompleted == null)) {
                this.editFolderItemRankOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditFolderItemRankOperationCompleted);
            }
            this.InvokeAsync("editFolderItemRank", new object[] {
                        cookie,
                        recordID,
                        publicFolder}, this.editFolderItemRankOperationCompleted, userState);
        }
        
        private void OneditFolderItemRankOperationCompleted(object arg) {
            if ((this.editFolderItemRankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editFolderItemRankCompleted(this, new editFolderItemRankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveFolderItemRank", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveFolderItemRank(long cookie, long recordID, bool publicFolder, CFolderItem[] folderItemList) {
            object[] results = this.Invoke("saveFolderItemRank", new object[] {
                        cookie,
                        recordID,
                        publicFolder,
                        folderItemList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveFolderItemRankAsync(long cookie, long recordID, bool publicFolder, CFolderItem[] folderItemList) {
            this.saveFolderItemRankAsync(cookie, recordID, publicFolder, folderItemList, null);
        }
        
        /// <remarks/>
        public void saveFolderItemRankAsync(long cookie, long recordID, bool publicFolder, CFolderItem[] folderItemList, object userState) {
            if ((this.saveFolderItemRankOperationCompleted == null)) {
                this.saveFolderItemRankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveFolderItemRankOperationCompleted);
            }
            this.InvokeAsync("saveFolderItemRank", new object[] {
                        cookie,
                        recordID,
                        publicFolder,
                        folderItemList}, this.saveFolderItemRankOperationCompleted, userState);
        }
        
        private void OnsaveFolderItemRankOperationCompleted(object arg) {
            if ((this.saveFolderItemRankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveFolderItemRankCompleted(this, new saveFolderItemRankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveFolderItemRank", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveFolderItemRank(long cookie, long recordID) {
            object[] results = this.Invoke("cancelSaveFolderItemRank", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveFolderItemRankAsync(long cookie, long recordID) {
            this.cancelSaveFolderItemRankAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void cancelSaveFolderItemRankAsync(long cookie, long recordID, object userState) {
            if ((this.cancelSaveFolderItemRankOperationCompleted == null)) {
                this.cancelSaveFolderItemRankOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveFolderItemRankOperationCompleted);
            }
            this.InvokeAsync("cancelSaveFolderItemRank", new object[] {
                        cookie,
                        recordID}, this.cancelSaveFolderItemRankOperationCompleted, userState);
        }
        
        private void OncancelSaveFolderItemRankOperationCompleted(object arg) {
            if ((this.cancelSaveFolderItemRankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveFolderItemRankCompleted(this, new cancelSaveFolderItemRankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getRequirement", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pRequirement")]
        public CRequirement getRequirement(long cookie, long requirementNumber, string summary, bool bDownloadAttachments) {
            object[] results = this.Invoke("getRequirement", new object[] {
                        cookie,
                        requirementNumber,
                        summary,
                        bDownloadAttachments});
            return ((CRequirement)(results[0]));
        }
        
        /// <remarks/>
        public void getRequirementAsync(long cookie, long requirementNumber, string summary, bool bDownloadAttachments) {
            this.getRequirementAsync(cookie, requirementNumber, summary, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void getRequirementAsync(long cookie, long requirementNumber, string summary, bool bDownloadAttachments, object userState) {
            if ((this.getRequirementOperationCompleted == null)) {
                this.getRequirementOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRequirementOperationCompleted);
            }
            this.InvokeAsync("getRequirement", new object[] {
                        cookie,
                        requirementNumber,
                        summary,
                        bDownloadAttachments}, this.getRequirementOperationCompleted, userState);
        }
        
        private void OngetRequirementOperationCompleted(object arg) {
            if ((this.getRequirementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRequirementCompleted(this, new getRequirementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getRequirementByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pRequirement")]
        public CRequirement getRequirementByRecordID(long cookie, long recordID, bool bDownloadAttachments) {
            object[] results = this.Invoke("getRequirementByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments});
            return ((CRequirement)(results[0]));
        }
        
        /// <remarks/>
        public void getRequirementByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments) {
            this.getRequirementByRecordIDAsync(cookie, recordID, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void getRequirementByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments, object userState) {
            if ((this.getRequirementByRecordIDOperationCompleted == null)) {
                this.getRequirementByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRequirementByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getRequirementByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments}, this.getRequirementByRecordIDOperationCompleted, userState);
        }
        
        private void OngetRequirementByRecordIDOperationCompleted(object arg) {
            if ((this.getRequirementByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRequirementByRecordIDCompleted(this, new getRequirementByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addRequirement", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordID")]
        public long addRequirement(long cookie, CRequirement pRequirement) {
            object[] results = this.Invoke("addRequirement", new object[] {
                        cookie,
                        pRequirement});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void addRequirementAsync(long cookie, CRequirement pRequirement) {
            this.addRequirementAsync(cookie, pRequirement, null);
        }
        
        /// <remarks/>
        public void addRequirementAsync(long cookie, CRequirement pRequirement, object userState) {
            if ((this.addRequirementOperationCompleted == null)) {
                this.addRequirementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddRequirementOperationCompleted);
            }
            this.InvokeAsync("addRequirement", new object[] {
                        cookie,
                        pRequirement}, this.addRequirementOperationCompleted, userState);
        }
        
        private void OnaddRequirementOperationCompleted(object arg) {
            if ((this.addRequirementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addRequirementCompleted(this, new addRequirementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteRequirement", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteRequirement(long cookie, long requirementNumber, string summary) {
            object[] results = this.Invoke("deleteRequirement", new object[] {
                        cookie,
                        requirementNumber,
                        summary});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteRequirementAsync(long cookie, long requirementNumber, string summary) {
            this.deleteRequirementAsync(cookie, requirementNumber, summary, null);
        }
        
        /// <remarks/>
        public void deleteRequirementAsync(long cookie, long requirementNumber, string summary, object userState) {
            if ((this.deleteRequirementOperationCompleted == null)) {
                this.deleteRequirementOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteRequirementOperationCompleted);
            }
            this.InvokeAsync("deleteRequirement", new object[] {
                        cookie,
                        requirementNumber,
                        summary}, this.deleteRequirementOperationCompleted, userState);
        }
        
        private void OndeleteRequirementOperationCompleted(object arg) {
            if ((this.deleteRequirementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteRequirementCompleted(this, new deleteRequirementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteRequirementByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteRequirementByRecordID(long cookie, long recordID) {
            object[] results = this.Invoke("deleteRequirementByRecordID", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteRequirementByRecordIDAsync(long cookie, long recordID) {
            this.deleteRequirementByRecordIDAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void deleteRequirementByRecordIDAsync(long cookie, long recordID, object userState) {
            if ((this.deleteRequirementByRecordIDOperationCompleted == null)) {
                this.deleteRequirementByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteRequirementByRecordIDOperationCompleted);
            }
            this.InvokeAsync("deleteRequirementByRecordID", new object[] {
                        cookie,
                        recordID}, this.deleteRequirementByRecordIDOperationCompleted, userState);
        }
        
        private void OndeleteRequirementByRecordIDOperationCompleted(object arg) {
            if ((this.deleteRequirementByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteRequirementByRecordIDCompleted(this, new deleteRequirementByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editRequirement", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pRequirement")]
        public CRequirement editRequirement(long cookie, long requirementNumber, string summary, bool bDownloadAttachments) {
            object[] results = this.Invoke("editRequirement", new object[] {
                        cookie,
                        requirementNumber,
                        summary,
                        bDownloadAttachments});
            return ((CRequirement)(results[0]));
        }
        
        /// <remarks/>
        public void editRequirementAsync(long cookie, long requirementNumber, string summary, bool bDownloadAttachments) {
            this.editRequirementAsync(cookie, requirementNumber, summary, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void editRequirementAsync(long cookie, long requirementNumber, string summary, bool bDownloadAttachments, object userState) {
            if ((this.editRequirementOperationCompleted == null)) {
                this.editRequirementOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditRequirementOperationCompleted);
            }
            this.InvokeAsync("editRequirement", new object[] {
                        cookie,
                        requirementNumber,
                        summary,
                        bDownloadAttachments}, this.editRequirementOperationCompleted, userState);
        }
        
        private void OneditRequirementOperationCompleted(object arg) {
            if ((this.editRequirementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editRequirementCompleted(this, new editRequirementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editRequirementByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pRequirement")]
        public CRequirement editRequirementByRecordID(long cookie, long recordID, bool bDownloadAttachments) {
            object[] results = this.Invoke("editRequirementByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments});
            return ((CRequirement)(results[0]));
        }
        
        /// <remarks/>
        public void editRequirementByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments) {
            this.editRequirementByRecordIDAsync(cookie, recordID, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void editRequirementByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments, object userState) {
            if ((this.editRequirementByRecordIDOperationCompleted == null)) {
                this.editRequirementByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditRequirementByRecordIDOperationCompleted);
            }
            this.InvokeAsync("editRequirementByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments}, this.editRequirementByRecordIDOperationCompleted, userState);
        }
        
        private void OneditRequirementByRecordIDOperationCompleted(object arg) {
            if ((this.editRequirementByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editRequirementByRecordIDCompleted(this, new editRequirementByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveRequirement", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveRequirement(long cookie, CRequirement pRequirement) {
            object[] results = this.Invoke("saveRequirement", new object[] {
                        cookie,
                        pRequirement});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveRequirementAsync(long cookie, CRequirement pRequirement) {
            this.saveRequirementAsync(cookie, pRequirement, null);
        }
        
        /// <remarks/>
        public void saveRequirementAsync(long cookie, CRequirement pRequirement, object userState) {
            if ((this.saveRequirementOperationCompleted == null)) {
                this.saveRequirementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveRequirementOperationCompleted);
            }
            this.InvokeAsync("saveRequirement", new object[] {
                        cookie,
                        pRequirement}, this.saveRequirementOperationCompleted, userState);
        }
        
        private void OnsaveRequirementOperationCompleted(object arg) {
            if ((this.saveRequirementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveRequirementCompleted(this, new saveRequirementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveRequirement", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveRequirement(long cookie, long recordID) {
            object[] results = this.Invoke("cancelSaveRequirement", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveRequirementAsync(long cookie, long recordID) {
            this.cancelSaveRequirementAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void cancelSaveRequirementAsync(long cookie, long recordID, object userState) {
            if ((this.cancelSaveRequirementOperationCompleted == null)) {
                this.cancelSaveRequirementOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveRequirementOperationCompleted);
            }
            this.InvokeAsync("cancelSaveRequirement", new object[] {
                        cookie,
                        recordID}, this.cancelSaveRequirementOperationCompleted, userState);
        }
        
        private void OncancelSaveRequirementOperationCompleted(object arg) {
            if ((this.cancelSaveRequirementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveRequirementCompleted(this, new cancelSaveRequirementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#appendToRequirementDocument", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int appendToRequirementDocument(long cookie, long requirementID, long documentID, long parentRequirementID) {
            object[] results = this.Invoke("appendToRequirementDocument", new object[] {
                        cookie,
                        requirementID,
                        documentID,
                        parentRequirementID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void appendToRequirementDocumentAsync(long cookie, long requirementID, long documentID, long parentRequirementID) {
            this.appendToRequirementDocumentAsync(cookie, requirementID, documentID, parentRequirementID, null);
        }
        
        /// <remarks/>
        public void appendToRequirementDocumentAsync(long cookie, long requirementID, long documentID, long parentRequirementID, object userState) {
            if ((this.appendToRequirementDocumentOperationCompleted == null)) {
                this.appendToRequirementDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnappendToRequirementDocumentOperationCompleted);
            }
            this.InvokeAsync("appendToRequirementDocument", new object[] {
                        cookie,
                        requirementID,
                        documentID,
                        parentRequirementID}, this.appendToRequirementDocumentOperationCompleted, userState);
        }
        
        private void OnappendToRequirementDocumentOperationCompleted(object arg) {
            if ((this.appendToRequirementDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.appendToRequirementDocumentCompleted(this, new appendToRequirementDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getDocumentIDsForRequirement", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordIDs")]
        public long[] getDocumentIDsForRequirement(long cookie, long requirementID) {
            object[] results = this.Invoke("getDocumentIDsForRequirement", new object[] {
                        cookie,
                        requirementID});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentIDsForRequirementAsync(long cookie, long requirementID) {
            this.getDocumentIDsForRequirementAsync(cookie, requirementID, null);
        }
        
        /// <remarks/>
        public void getDocumentIDsForRequirementAsync(long cookie, long requirementID, object userState) {
            if ((this.getDocumentIDsForRequirementOperationCompleted == null)) {
                this.getDocumentIDsForRequirementOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentIDsForRequirementOperationCompleted);
            }
            this.InvokeAsync("getDocumentIDsForRequirement", new object[] {
                        cookie,
                        requirementID}, this.getDocumentIDsForRequirementOperationCompleted, userState);
        }
        
        private void OngetDocumentIDsForRequirementOperationCompleted(object arg) {
            if ((this.getDocumentIDsForRequirementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentIDsForRequirementCompleted(this, new getDocumentIDsForRequirementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#changeRequirementType", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int changeRequirementType(long cookie, long requirementID, string newTypeName) {
            object[] results = this.Invoke("changeRequirementType", new object[] {
                        cookie,
                        requirementID,
                        newTypeName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void changeRequirementTypeAsync(long cookie, long requirementID, string newTypeName) {
            this.changeRequirementTypeAsync(cookie, requirementID, newTypeName, null);
        }
        
        /// <remarks/>
        public void changeRequirementTypeAsync(long cookie, long requirementID, string newTypeName, object userState) {
            if ((this.changeRequirementTypeOperationCompleted == null)) {
                this.changeRequirementTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangeRequirementTypeOperationCompleted);
            }
            this.InvokeAsync("changeRequirementType", new object[] {
                        cookie,
                        requirementID,
                        newTypeName}, this.changeRequirementTypeOperationCompleted, userState);
        }
        
        private void OnchangeRequirementTypeOperationCompleted(object arg) {
            if ((this.changeRequirementTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changeRequirementTypeCompleted(this, new changeRequirementTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getRequirementDocument", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pRequirementDocument")]
        public CRequirementDocument getRequirementDocument(long cookie, long documentNumber, string name, bool bDownloadAttachments) {
            object[] results = this.Invoke("getRequirementDocument", new object[] {
                        cookie,
                        documentNumber,
                        name,
                        bDownloadAttachments});
            return ((CRequirementDocument)(results[0]));
        }
        
        /// <remarks/>
        public void getRequirementDocumentAsync(long cookie, long documentNumber, string name, bool bDownloadAttachments) {
            this.getRequirementDocumentAsync(cookie, documentNumber, name, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void getRequirementDocumentAsync(long cookie, long documentNumber, string name, bool bDownloadAttachments, object userState) {
            if ((this.getRequirementDocumentOperationCompleted == null)) {
                this.getRequirementDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRequirementDocumentOperationCompleted);
            }
            this.InvokeAsync("getRequirementDocument", new object[] {
                        cookie,
                        documentNumber,
                        name,
                        bDownloadAttachments}, this.getRequirementDocumentOperationCompleted, userState);
        }
        
        private void OngetRequirementDocumentOperationCompleted(object arg) {
            if ((this.getRequirementDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRequirementDocumentCompleted(this, new getRequirementDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getRequirementDocumentByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pRequirementDocument")]
        public CRequirementDocument getRequirementDocumentByRecordID(long cookie, long recordID, bool bDownloadAttachments) {
            object[] results = this.Invoke("getRequirementDocumentByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments});
            return ((CRequirementDocument)(results[0]));
        }
        
        /// <remarks/>
        public void getRequirementDocumentByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments) {
            this.getRequirementDocumentByRecordIDAsync(cookie, recordID, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void getRequirementDocumentByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments, object userState) {
            if ((this.getRequirementDocumentByRecordIDOperationCompleted == null)) {
                this.getRequirementDocumentByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRequirementDocumentByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getRequirementDocumentByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments}, this.getRequirementDocumentByRecordIDOperationCompleted, userState);
        }
        
        private void OngetRequirementDocumentByRecordIDOperationCompleted(object arg) {
            if ((this.getRequirementDocumentByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRequirementDocumentByRecordIDCompleted(this, new getRequirementDocumentByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#addRequirementDocument", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordID")]
        public long addRequirementDocument(long cookie, CRequirementDocument pRequirementDocument) {
            object[] results = this.Invoke("addRequirementDocument", new object[] {
                        cookie,
                        pRequirementDocument});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void addRequirementDocumentAsync(long cookie, CRequirementDocument pRequirementDocument) {
            this.addRequirementDocumentAsync(cookie, pRequirementDocument, null);
        }
        
        /// <remarks/>
        public void addRequirementDocumentAsync(long cookie, CRequirementDocument pRequirementDocument, object userState) {
            if ((this.addRequirementDocumentOperationCompleted == null)) {
                this.addRequirementDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddRequirementDocumentOperationCompleted);
            }
            this.InvokeAsync("addRequirementDocument", new object[] {
                        cookie,
                        pRequirementDocument}, this.addRequirementDocumentOperationCompleted, userState);
        }
        
        private void OnaddRequirementDocumentOperationCompleted(object arg) {
            if ((this.addRequirementDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addRequirementDocumentCompleted(this, new addRequirementDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteRequirementDocument", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteRequirementDocument(long cookie, long documentNumber, string name, bool bDeleteAssociatedRequirements) {
            object[] results = this.Invoke("deleteRequirementDocument", new object[] {
                        cookie,
                        documentNumber,
                        name,
                        bDeleteAssociatedRequirements});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteRequirementDocumentAsync(long cookie, long documentNumber, string name, bool bDeleteAssociatedRequirements) {
            this.deleteRequirementDocumentAsync(cookie, documentNumber, name, bDeleteAssociatedRequirements, null);
        }
        
        /// <remarks/>
        public void deleteRequirementDocumentAsync(long cookie, long documentNumber, string name, bool bDeleteAssociatedRequirements, object userState) {
            if ((this.deleteRequirementDocumentOperationCompleted == null)) {
                this.deleteRequirementDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteRequirementDocumentOperationCompleted);
            }
            this.InvokeAsync("deleteRequirementDocument", new object[] {
                        cookie,
                        documentNumber,
                        name,
                        bDeleteAssociatedRequirements}, this.deleteRequirementDocumentOperationCompleted, userState);
        }
        
        private void OndeleteRequirementDocumentOperationCompleted(object arg) {
            if ((this.deleteRequirementDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteRequirementDocumentCompleted(this, new deleteRequirementDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#deleteRequirementDocumentByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int deleteRequirementDocumentByRecordID(long cookie, long recordID, bool bDeleteAssociatedRequirements) {
            object[] results = this.Invoke("deleteRequirementDocumentByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDeleteAssociatedRequirements});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void deleteRequirementDocumentByRecordIDAsync(long cookie, long recordID, bool bDeleteAssociatedRequirements) {
            this.deleteRequirementDocumentByRecordIDAsync(cookie, recordID, bDeleteAssociatedRequirements, null);
        }
        
        /// <remarks/>
        public void deleteRequirementDocumentByRecordIDAsync(long cookie, long recordID, bool bDeleteAssociatedRequirements, object userState) {
            if ((this.deleteRequirementDocumentByRecordIDOperationCompleted == null)) {
                this.deleteRequirementDocumentByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteRequirementDocumentByRecordIDOperationCompleted);
            }
            this.InvokeAsync("deleteRequirementDocumentByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDeleteAssociatedRequirements}, this.deleteRequirementDocumentByRecordIDOperationCompleted, userState);
        }
        
        private void OndeleteRequirementDocumentByRecordIDOperationCompleted(object arg) {
            if ((this.deleteRequirementDocumentByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteRequirementDocumentByRecordIDCompleted(this, new deleteRequirementDocumentByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editRequirementDocument", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pRequirementDocument")]
        public CRequirementDocument editRequirementDocument(long cookie, long documentNumber, string name, bool bDownloadAttachments) {
            object[] results = this.Invoke("editRequirementDocument", new object[] {
                        cookie,
                        documentNumber,
                        name,
                        bDownloadAttachments});
            return ((CRequirementDocument)(results[0]));
        }
        
        /// <remarks/>
        public void editRequirementDocumentAsync(long cookie, long documentNumber, string name, bool bDownloadAttachments) {
            this.editRequirementDocumentAsync(cookie, documentNumber, name, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void editRequirementDocumentAsync(long cookie, long documentNumber, string name, bool bDownloadAttachments, object userState) {
            if ((this.editRequirementDocumentOperationCompleted == null)) {
                this.editRequirementDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditRequirementDocumentOperationCompleted);
            }
            this.InvokeAsync("editRequirementDocument", new object[] {
                        cookie,
                        documentNumber,
                        name,
                        bDownloadAttachments}, this.editRequirementDocumentOperationCompleted, userState);
        }
        
        private void OneditRequirementDocumentOperationCompleted(object arg) {
            if ((this.editRequirementDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editRequirementDocumentCompleted(this, new editRequirementDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#editRequirementDocumentByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("pRequirementDocument")]
        public CRequirementDocument editRequirementDocumentByRecordID(long cookie, long recordID, bool bDownloadAttachments) {
            object[] results = this.Invoke("editRequirementDocumentByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments});
            return ((CRequirementDocument)(results[0]));
        }
        
        /// <remarks/>
        public void editRequirementDocumentByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments) {
            this.editRequirementDocumentByRecordIDAsync(cookie, recordID, bDownloadAttachments, null);
        }
        
        /// <remarks/>
        public void editRequirementDocumentByRecordIDAsync(long cookie, long recordID, bool bDownloadAttachments, object userState) {
            if ((this.editRequirementDocumentByRecordIDOperationCompleted == null)) {
                this.editRequirementDocumentByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditRequirementDocumentByRecordIDOperationCompleted);
            }
            this.InvokeAsync("editRequirementDocumentByRecordID", new object[] {
                        cookie,
                        recordID,
                        bDownloadAttachments}, this.editRequirementDocumentByRecordIDOperationCompleted, userState);
        }
        
        private void OneditRequirementDocumentByRecordIDOperationCompleted(object arg) {
            if ((this.editRequirementDocumentByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editRequirementDocumentByRecordIDCompleted(this, new editRequirementDocumentByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#saveRequirementDocument", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int saveRequirementDocument(long cookie, CRequirementDocument pRequirementDocument) {
            object[] results = this.Invoke("saveRequirementDocument", new object[] {
                        cookie,
                        pRequirementDocument});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void saveRequirementDocumentAsync(long cookie, CRequirementDocument pRequirementDocument) {
            this.saveRequirementDocumentAsync(cookie, pRequirementDocument, null);
        }
        
        /// <remarks/>
        public void saveRequirementDocumentAsync(long cookie, CRequirementDocument pRequirementDocument, object userState) {
            if ((this.saveRequirementDocumentOperationCompleted == null)) {
                this.saveRequirementDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveRequirementDocumentOperationCompleted);
            }
            this.InvokeAsync("saveRequirementDocument", new object[] {
                        cookie,
                        pRequirementDocument}, this.saveRequirementDocumentOperationCompleted, userState);
        }
        
        private void OnsaveRequirementDocumentOperationCompleted(object arg) {
            if ((this.saveRequirementDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveRequirementDocumentCompleted(this, new saveRequirementDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#cancelSaveRequirementDocument", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int cancelSaveRequirementDocument(long cookie, long recordID) {
            object[] results = this.Invoke("cancelSaveRequirementDocument", new object[] {
                        cookie,
                        recordID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void cancelSaveRequirementDocumentAsync(long cookie, long recordID) {
            this.cancelSaveRequirementDocumentAsync(cookie, recordID, null);
        }
        
        /// <remarks/>
        public void cancelSaveRequirementDocumentAsync(long cookie, long recordID, object userState) {
            if ((this.cancelSaveRequirementDocumentOperationCompleted == null)) {
                this.cancelSaveRequirementDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OncancelSaveRequirementDocumentOperationCompleted);
            }
            this.InvokeAsync("cancelSaveRequirementDocument", new object[] {
                        cookie,
                        recordID}, this.cancelSaveRequirementDocumentOperationCompleted, userState);
        }
        
        private void OncancelSaveRequirementDocumentOperationCompleted(object arg) {
            if ((this.cancelSaveRequirementDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.cancelSaveRequirementDocumentCompleted(this, new cancelSaveRequirementDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#createSnapshot", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("result")]
        public int createSnapshot(long cookie, long documentID, CSnapshotInfo snapshot) {
            object[] results = this.Invoke("createSnapshot", new object[] {
                        cookie,
                        documentID,
                        snapshot});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void createSnapshotAsync(long cookie, long documentID, CSnapshotInfo snapshot) {
            this.createSnapshotAsync(cookie, documentID, snapshot, null);
        }
        
        /// <remarks/>
        public void createSnapshotAsync(long cookie, long documentID, CSnapshotInfo snapshot, object userState) {
            if ((this.createSnapshotOperationCompleted == null)) {
                this.createSnapshotOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateSnapshotOperationCompleted);
            }
            this.InvokeAsync("createSnapshot", new object[] {
                        cookie,
                        documentID,
                        snapshot}, this.createSnapshotOperationCompleted, userState);
        }
        
        private void OncreateSnapshotOperationCompleted(object arg) {
            if ((this.createSnapshotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createSnapshotCompleted(this, new createSnapshotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getRequirementIDsForDocument", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("recordIDs")]
        public long[] getRequirementIDsForDocument(long cookie, long documentID) {
            object[] results = this.Invoke("getRequirementIDsForDocument", new object[] {
                        cookie,
                        documentID});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void getRequirementIDsForDocumentAsync(long cookie, long documentID) {
            this.getRequirementIDsForDocumentAsync(cookie, documentID, null);
        }
        
        /// <remarks/>
        public void getRequirementIDsForDocumentAsync(long cookie, long documentID, object userState) {
            if ((this.getRequirementIDsForDocumentOperationCompleted == null)) {
                this.getRequirementIDsForDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetRequirementIDsForDocumentOperationCompleted);
            }
            this.InvokeAsync("getRequirementIDsForDocument", new object[] {
                        cookie,
                        documentID}, this.getRequirementIDsForDocumentOperationCompleted, userState);
        }
        
        private void OngetRequirementIDsForDocumentOperationCompleted(object arg) {
            if ((this.getRequirementIDsForDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getRequirementIDsForDocumentCompleted(this, new getRequirementIDsForDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getDocumentTree", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("docTreeRootNode")]
        public CTreeNodeSoap getDocumentTree(long cookie, long documentID) {
            object[] results = this.Invoke("getDocumentTree", new object[] {
                        cookie,
                        documentID});
            return ((CTreeNodeSoap)(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentTreeAsync(long cookie, long documentID) {
            this.getDocumentTreeAsync(cookie, documentID, null);
        }
        
        /// <remarks/>
        public void getDocumentTreeAsync(long cookie, long documentID, object userState) {
            if ((this.getDocumentTreeOperationCompleted == null)) {
                this.getDocumentTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentTreeOperationCompleted);
            }
            this.InvokeAsync("getDocumentTree", new object[] {
                        cookie,
                        documentID}, this.getDocumentTreeOperationCompleted, userState);
        }
        
        private void OngetDocumentTreeOperationCompleted(object arg) {
            if ((this.getDocumentTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentTreeCompleted(this, new getDocumentTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getFolderTreeByRecordID", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("folderTreeRoot")]
        public CTreeNodeSoap getFolderTreeByRecordID(long cookie, long treeRootFolderID) {
            object[] results = this.Invoke("getFolderTreeByRecordID", new object[] {
                        cookie,
                        treeRootFolderID});
            return ((CTreeNodeSoap)(results[0]));
        }
        
        /// <remarks/>
        public void getFolderTreeByRecordIDAsync(long cookie, long treeRootFolderID) {
            this.getFolderTreeByRecordIDAsync(cookie, treeRootFolderID, null);
        }
        
        /// <remarks/>
        public void getFolderTreeByRecordIDAsync(long cookie, long treeRootFolderID, object userState) {
            if ((this.getFolderTreeByRecordIDOperationCompleted == null)) {
                this.getFolderTreeByRecordIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFolderTreeByRecordIDOperationCompleted);
            }
            this.InvokeAsync("getFolderTreeByRecordID", new object[] {
                        cookie,
                        treeRootFolderID}, this.getFolderTreeByRecordIDOperationCompleted, userState);
        }
        
        private void OngetFolderTreeByRecordIDOperationCompleted(object arg) {
            if ((this.getFolderTreeByRecordIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFolderTreeByRecordIDCompleted(this, new getFolderTreeByRecordIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getFolderTree", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("folderTreeRoot")]
        public CTreeNodeSoap getFolderTree(long cookie, string treeRootFolderPath) {
            object[] results = this.Invoke("getFolderTree", new object[] {
                        cookie,
                        treeRootFolderPath});
            return ((CTreeNodeSoap)(results[0]));
        }
        
        /// <remarks/>
        public void getFolderTreeAsync(long cookie, string treeRootFolderPath) {
            this.getFolderTreeAsync(cookie, treeRootFolderPath, null);
        }
        
        /// <remarks/>
        public void getFolderTreeAsync(long cookie, string treeRootFolderPath, object userState) {
            if ((this.getFolderTreeOperationCompleted == null)) {
                this.getFolderTreeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFolderTreeOperationCompleted);
            }
            this.InvokeAsync("getFolderTree", new object[] {
                        cookie,
                        treeRootFolderPath}, this.getFolderTreeOperationCompleted, userState);
        }
        
        private void OngetFolderTreeOperationCompleted(object arg) {
            if ((this.getFolderTreeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFolderTreeCompleted(this, new getFolderTreeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("urn:testtrack-interface#getItemHyperlinks", RequestNamespace="urn:testtrack-interface", ResponseNamespace="urn:testtrack-interface")]
        [return: System.Xml.Serialization.SoapElementAttribute("hyperlinks")]
        public CItemHyperlinkContainer getItemHyperlinks(long cookie, string itemType, long itemID) {
            object[] results = this.Invoke("getItemHyperlinks", new object[] {
                        cookie,
                        itemType,
                        itemID});
            return ((CItemHyperlinkContainer)(results[0]));
        }
        
        /// <remarks/>
        public void getItemHyperlinksAsync(long cookie, string itemType, long itemID) {
            this.getItemHyperlinksAsync(cookie, itemType, itemID, null);
        }
        
        /// <remarks/>
        public void getItemHyperlinksAsync(long cookie, string itemType, long itemID, object userState) {
            if ((this.getItemHyperlinksOperationCompleted == null)) {
                this.getItemHyperlinksOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetItemHyperlinksOperationCompleted);
            }
            this.InvokeAsync("getItemHyperlinks", new object[] {
                        cookie,
                        itemType,
                        itemID}, this.getItemHyperlinksOperationCompleted, userState);
        }
        
        private void OngetItemHyperlinksOperationCompleted(object arg) {
            if ((this.getItemHyperlinksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getItemHyperlinksCompleted(this, new getItemHyperlinksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CDatabase {
        
        private string nameField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CItemHyperlinkContainer {
        
        private string ttstudioHyperlinkField;
        
        private string httpHyperlinkField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ttstudioHyperlink {
            get {
                return this.ttstudioHyperlinkField;
            }
            set {
                this.ttstudioHyperlinkField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string httpHyperlink {
            get {
                return this.httpHyperlinkField;
            }
            set {
                this.httpHyperlinkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDocumentTreeNode))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CTreeNodeSoap {
        
        private string entityTableNameField;
        
        private long entityRecordIDField;
        
        private CTreeNodeSoap[] childListField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string entityTableName {
            get {
                return this.entityTableNameField;
            }
            set {
                this.entityTableNameField = value;
            }
        }
        
        /// <remarks/>
        public long entityRecordID {
            get {
                return this.entityRecordIDField;
            }
            set {
                this.entityRecordIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CTreeNodeSoap[] childList {
            get {
                return this.childListField;
            }
            set {
                this.childListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CDocumentTreeNode : CTreeNodeSoap {
        
        private string summaryField;
        
        private string outlineNumberField;
        
        private string tagField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string outlineNumber {
            get {
                return this.outlineNumberField;
            }
            set {
                this.outlineNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CUserLicense {
        
        private string nameField;
        
        private int numberUsedField;
        
        private bool numberUsedFieldSpecified;
        
        private int numberTotalField;
        
        private bool numberTotalFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public int numberUsed {
            get {
                return this.numberUsedField;
            }
            set {
                this.numberUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool numberUsedSpecified {
            get {
                return this.numberUsedFieldSpecified;
            }
            set {
                this.numberUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int numberTotal {
            get {
                return this.numberTotalField;
            }
            set {
                this.numberTotalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool numberTotalSpecified {
            get {
                return this.numberTotalFieldSpecified;
            }
            set {
                this.numberTotalFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CGlobalUser {
        
        private string loginnameField;
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string loginname {
            get {
                return this.loginnameField;
            }
            set {
                this.loginnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDefectEventDefinition))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CEventDefinition {
        
        private string nameField;
        
        private bool userField;
        
        private bool userFieldSpecified;
        
        private bool datetimeField;
        
        private bool datetimeFieldSpecified;
        
        private bool notesField;
        
        private bool notesFieldSpecified;
        
        private bool resultingStateField;
        
        private bool resultingStateFieldSpecified;
        
        private CFieldValue[] resultingStateValuesField;
        
        private bool fileattachmentsField;
        
        private bool fileattachmentsFieldSpecified;
        
        private bool timeTrackingField;
        
        private bool timeTrackingFieldSpecified;
        
        private bool timeSumOfAllField;
        
        private bool timeSumOfAllFieldSpecified;
        
        private bool timeHoursSinceLastField;
        
        private bool timeHoursSinceLastFieldSpecified;
        
        private bool newAssignmentField;
        
        private bool newAssignmentFieldSpecified;
        
        private bool releaseNotesField;
        
        private bool releaseNotesFieldSpecified;
        
        private bool marksuspectField;
        
        private bool marksuspectFieldSpecified;
        
        private bool reviewnoteField;
        
        private bool reviewnoteFieldSpecified;
        
        private CField[] customFieldsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public bool user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool userSpecified {
            get {
                return this.userFieldSpecified;
            }
            set {
                this.userFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool datetime {
            get {
                return this.datetimeField;
            }
            set {
                this.datetimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool datetimeSpecified {
            get {
                return this.datetimeFieldSpecified;
            }
            set {
                this.datetimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool notesSpecified {
            get {
                return this.notesFieldSpecified;
            }
            set {
                this.notesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool resultingState {
            get {
                return this.resultingStateField;
            }
            set {
                this.resultingStateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool resultingStateSpecified {
            get {
                return this.resultingStateFieldSpecified;
            }
            set {
                this.resultingStateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFieldValue[] resultingStateValues {
            get {
                return this.resultingStateValuesField;
            }
            set {
                this.resultingStateValuesField = value;
            }
        }
        
        /// <remarks/>
        public bool fileattachments {
            get {
                return this.fileattachmentsField;
            }
            set {
                this.fileattachmentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool fileattachmentsSpecified {
            get {
                return this.fileattachmentsFieldSpecified;
            }
            set {
                this.fileattachmentsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool timeTracking {
            get {
                return this.timeTrackingField;
            }
            set {
                this.timeTrackingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool timeTrackingSpecified {
            get {
                return this.timeTrackingFieldSpecified;
            }
            set {
                this.timeTrackingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool timeSumOfAll {
            get {
                return this.timeSumOfAllField;
            }
            set {
                this.timeSumOfAllField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool timeSumOfAllSpecified {
            get {
                return this.timeSumOfAllFieldSpecified;
            }
            set {
                this.timeSumOfAllFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool timeHoursSinceLast {
            get {
                return this.timeHoursSinceLastField;
            }
            set {
                this.timeHoursSinceLastField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool timeHoursSinceLastSpecified {
            get {
                return this.timeHoursSinceLastFieldSpecified;
            }
            set {
                this.timeHoursSinceLastFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool newAssignment {
            get {
                return this.newAssignmentField;
            }
            set {
                this.newAssignmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool newAssignmentSpecified {
            get {
                return this.newAssignmentFieldSpecified;
            }
            set {
                this.newAssignmentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool releaseNotes {
            get {
                return this.releaseNotesField;
            }
            set {
                this.releaseNotesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool releaseNotesSpecified {
            get {
                return this.releaseNotesFieldSpecified;
            }
            set {
                this.releaseNotesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool marksuspect {
            get {
                return this.marksuspectField;
            }
            set {
                this.marksuspectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool marksuspectSpecified {
            get {
                return this.marksuspectFieldSpecified;
            }
            set {
                this.marksuspectFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool reviewnote {
            get {
                return this.reviewnoteField;
            }
            set {
                this.reviewnoteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool reviewnoteSpecified {
            get {
                return this.reviewnoteFieldSpecified;
            }
            set {
                this.reviewnoteFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CField[] customFields {
            get {
                return this.customFieldsField;
            }
            set {
                this.customFieldsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CFieldValue {
        
        private string valueField;
        
        /// <remarks/>
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTimespanField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CVersionField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CMultiSelectDropdownField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTestRunVariantField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTestCaseVariantField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDropdownField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDateTimeField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDateField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CBooleanField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDecimalField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CIntegerField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CStringField))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CField : CItemWithDBRecordId {
        
        private string nameField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFolderItem))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(COrderedItemWithDBRecordId))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CLinkHistoryItem))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CLinkedItem))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CSCCFileRecord))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTimespanField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CVersionField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CMultiSelectDropdownField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTestRunVariantField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTestCaseVariantField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDropdownField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDateTimeField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDateField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CBooleanField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDecimalField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CIntegerField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CStringField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CEvent))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDefectEvent))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CReportedByRecord))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CItemToTrack))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CRequirementDocument))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CRequirement))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFolder))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFolderType))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTestRun))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTestCase))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CLink))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CUser))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTask))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDefect))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CSystemBase))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CSystem))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CItemWithDBRecordId {
        
        private long recordidField;
        
        /// <remarks/>
        public long recordid {
            get {
                return this.recordidField;
            }
            set {
                this.recordidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CFolderItem : CItemWithDBRecordId {
        
        private string entitytablenameField;
        
        private long entityrecordidField;
        
        private long rankField;
        
        private bool rankFieldSpecified;
        
        /// <remarks/>
        public string entitytablename {
            get {
                return this.entitytablenameField;
            }
            set {
                this.entitytablenameField = value;
            }
        }
        
        /// <remarks/>
        public long entityrecordid {
            get {
                return this.entityrecordidField;
            }
            set {
                this.entityrecordidField = value;
            }
        }
        
        /// <remarks/>
        public long rank {
            get {
                return this.rankField;
            }
            set {
                this.rankField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool rankSpecified {
            get {
                return this.rankFieldSpecified;
            }
            set {
                this.rankFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CLinkHistoryItem))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CLinkedItem))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class COrderedItemWithDBRecordId : CItemWithDBRecordId {
        
        private long orderField;
        
        /// <remarks/>
        public long order {
            get {
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CLinkHistoryItem : COrderedItemWithDBRecordId {
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private string firstnameField;
        
        private string lastnameField;
        
        private string historyField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool dateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                this.firstnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                this.lastnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string history {
            get {
                return this.historyField;
            }
            set {
                this.historyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CLinkedItem : COrderedItemWithDBRecordId {
        
        private long entityTypeField;
        
        private bool entityTypeFieldSpecified;
        
        private string tablenameField;
        
        private long entityIDField;
        
        private string numberField;
        
        private string summaryField;
        
        private string statusField;
        
        private string stateField;
        
        private bool issuspectField;
        
        private bool issuspectFieldSpecified;
        
        /// <remarks/>
        public long entityType {
            get {
                return this.entityTypeField;
            }
            set {
                this.entityTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool entityTypeSpecified {
            get {
                return this.entityTypeFieldSpecified;
            }
            set {
                this.entityTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string tablename {
            get {
                return this.tablenameField;
            }
            set {
                this.tablenameField = value;
            }
        }
        
        /// <remarks/>
        public long entityID {
            get {
                return this.entityIDField;
            }
            set {
                this.entityIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public bool issuspect {
            get {
                return this.issuspectField;
            }
            set {
                this.issuspectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool issuspectSpecified {
            get {
                return this.issuspectFieldSpecified;
            }
            set {
                this.issuspectFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CSCCFileRecord : CItemWithDBRecordId {
        
        private string mstrFileNameField;
        
        private string mstrFixedRevisionField;
        
        private System.DateTime mdateFixedTimestampField;
        
        private bool mdateFixedTimestampFieldSpecified;
        
        private string mstrTypeField;
        
        private long mscriptOrderField;
        
        private bool mscriptOrderFieldSpecified;
        
        private string mstrScriptStateField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-strFileName")]
        public string mstrFileName {
            get {
                return this.mstrFileNameField;
            }
            set {
                this.mstrFileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-strFixedRevision", IsNullable=true)]
        public string mstrFixedRevision {
            get {
                return this.mstrFixedRevisionField;
            }
            set {
                this.mstrFixedRevisionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-dateFixedTimestamp", IsNullable=true)]
        public System.DateTime mdateFixedTimestamp {
            get {
                return this.mdateFixedTimestampField;
            }
            set {
                this.mdateFixedTimestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool mdateFixedTimestampSpecified {
            get {
                return this.mdateFixedTimestampFieldSpecified;
            }
            set {
                this.mdateFixedTimestampFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-strType", IsNullable=true)]
        public string mstrType {
            get {
                return this.mstrTypeField;
            }
            set {
                this.mstrTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-scriptOrder")]
        public long mscriptOrder {
            get {
                return this.mscriptOrderField;
            }
            set {
                this.mscriptOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool mscriptOrderSpecified {
            get {
                return this.mscriptOrderFieldSpecified;
            }
            set {
                this.mscriptOrderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-strScriptState", IsNullable=true)]
        public string mstrScriptState {
            get {
                return this.mstrScriptStateField;
            }
            set {
                this.mstrScriptStateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDefectEvent))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CEvent : CItemWithDBRecordId {
        
        private string userField;
        
        private System.DateTime dateField;
        
        private string notesField;
        
        private short eventaddorderField;
        
        private string nameField;
        
        private long parenteventidField;
        
        private bool parenteventidFieldSpecified;
        
        private CFileAttachment[] attachmentlistField;
        
        private CField[] fieldlistField;
        
        private string resultingstateField;
        
        private double hoursField;
        
        private bool hoursFieldSpecified;
        
        private string[] assigntolistField;
        
        private string releasenotesversionField;
        
        private string generatedeventtypeField;
        
        private string generatedbynameField;
        
        private double totaltimespentField;
        
        private bool totaltimespentFieldSpecified;
        
        private string overrideuserField;
        
        private bool marksuspectField;
        
        private bool marksuspectFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string user {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        public short eventaddorder {
            get {
                return this.eventaddorderField;
            }
            set {
                this.eventaddorderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public long parenteventid {
            get {
                return this.parenteventidField;
            }
            set {
                this.parenteventidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool parenteventidSpecified {
            get {
                return this.parenteventidFieldSpecified;
            }
            set {
                this.parenteventidFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] attachmentlist {
            get {
                return this.attachmentlistField;
            }
            set {
                this.attachmentlistField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CField[] fieldlist {
            get {
                return this.fieldlistField;
            }
            set {
                this.fieldlistField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string resultingstate {
            get {
                return this.resultingstateField;
            }
            set {
                this.resultingstateField = value;
            }
        }
        
        /// <remarks/>
        public double hours {
            get {
                return this.hoursField;
            }
            set {
                this.hoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool hoursSpecified {
            get {
                return this.hoursFieldSpecified;
            }
            set {
                this.hoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string[] assigntolist {
            get {
                return this.assigntolistField;
            }
            set {
                this.assigntolistField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string releasenotesversion {
            get {
                return this.releasenotesversionField;
            }
            set {
                this.releasenotesversionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string generatedeventtype {
            get {
                return this.generatedeventtypeField;
            }
            set {
                this.generatedeventtypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string generatedbyname {
            get {
                return this.generatedbynameField;
            }
            set {
                this.generatedbynameField = value;
            }
        }
        
        /// <remarks/>
        public double totaltimespent {
            get {
                return this.totaltimespentField;
            }
            set {
                this.totaltimespentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool totaltimespentSpecified {
            get {
                return this.totaltimespentFieldSpecified;
            }
            set {
                this.totaltimespentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string overrideuser {
            get {
                return this.overrideuserField;
            }
            set {
                this.overrideuserField = value;
            }
        }
        
        /// <remarks/>
        public bool marksuspect {
            get {
                return this.marksuspectField;
            }
            set {
                this.marksuspectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool marksuspectSpecified {
            get {
                return this.marksuspectFieldSpecified;
            }
            set {
                this.marksuspectFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CFileAttachment : CFile {
        
        private long mrecordidField;
        
        private string mstrArchiveNameField;
        
        private string mstrTypeField;
        
        private long mscriptOrderField;
        
        private bool mscriptOrderFieldSpecified;
        
        private string mstrScriptStateField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-recordid")]
        public long mrecordid {
            get {
                return this.mrecordidField;
            }
            set {
                this.mrecordidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-strArchiveName", IsNullable=true)]
        public string mstrArchiveName {
            get {
                return this.mstrArchiveNameField;
            }
            set {
                this.mstrArchiveNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-strType", IsNullable=true)]
        public string mstrType {
            get {
                return this.mstrTypeField;
            }
            set {
                this.mstrTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-scriptOrder")]
        public long mscriptOrder {
            get {
                return this.mscriptOrderField;
            }
            set {
                this.mscriptOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool mscriptOrderSpecified {
            get {
                return this.mscriptOrderFieldSpecified;
            }
            set {
                this.mscriptOrderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-strScriptState", IsNullable=true)]
        public string mstrScriptState {
            get {
                return this.mstrScriptStateField;
            }
            set {
                this.mstrScriptStateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFileAttachment))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CFile {
        
        private byte[] mpFileDataField;
        
        private string mstrFileNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-pFileData", DataType="base64Binary", IsNullable=true)]
        public byte[] mpFileData {
            get {
                return this.mpFileDataField;
            }
            set {
                this.mpFileDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-strFileName", IsNullable=true)]
        public string mstrFileName {
            get {
                return this.mstrFileNameField;
            }
            set {
                this.mstrFileNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CDefectEvent : CEvent {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CReportedByRecord : CItemWithDBRecordId {
        
        private string foundbyField;
        
        private System.DateTime datefoundField;
        
        private bool datefoundFieldSpecified;
        
        private string contactinfoField;
        
        private string foundinversionField;
        
        private string commentsField;
        
        private CFileAttachment[] commentsInlineAttachListField;
        
        private string reproducedField;
        
        private string reproducedstepsField;
        
        private CFileAttachment[] reproStepsInlineAttachListField;
        
        private CSystem standardtestconfigField;
        
        private string otherhardwaresoftwareField;
        
        private CFileAttachment[] otherHWSWInlineAttachListField;
        
        private short testconfigtypeField;
        
        private bool testconfigtypeFieldSpecified;
        
        private CFileAttachment[] attachmentlistField;
        
        private short showorderField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string foundby {
            get {
                return this.foundbyField;
            }
            set {
                this.foundbyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="date", IsNullable=true)]
        public System.DateTime datefound {
            get {
                return this.datefoundField;
            }
            set {
                this.datefoundField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool datefoundSpecified {
            get {
                return this.datefoundFieldSpecified;
            }
            set {
                this.datefoundFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string contactinfo {
            get {
                return this.contactinfoField;
            }
            set {
                this.contactinfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string foundinversion {
            get {
                return this.foundinversionField;
            }
            set {
                this.foundinversionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] commentsInlineAttachList {
            get {
                return this.commentsInlineAttachListField;
            }
            set {
                this.commentsInlineAttachListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string reproduced {
            get {
                return this.reproducedField;
            }
            set {
                this.reproducedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string reproducedsteps {
            get {
                return this.reproducedstepsField;
            }
            set {
                this.reproducedstepsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] reproStepsInlineAttachList {
            get {
                return this.reproStepsInlineAttachListField;
            }
            set {
                this.reproStepsInlineAttachListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CSystem standardtestconfig {
            get {
                return this.standardtestconfigField;
            }
            set {
                this.standardtestconfigField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string otherhardwaresoftware {
            get {
                return this.otherhardwaresoftwareField;
            }
            set {
                this.otherhardwaresoftwareField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] otherHWSWInlineAttachList {
            get {
                return this.otherHWSWInlineAttachListField;
            }
            set {
                this.otherHWSWInlineAttachListField = value;
            }
        }
        
        /// <remarks/>
        public short testconfigtype {
            get {
                return this.testconfigtypeField;
            }
            set {
                this.testconfigtypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool testconfigtypeSpecified {
            get {
                return this.testconfigtypeFieldSpecified;
            }
            set {
                this.testconfigtypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] attachmentlist {
            get {
                return this.attachmentlistField;
            }
            set {
                this.attachmentlistField = value;
            }
        }
        
        /// <remarks/>
        public short showorder {
            get {
                return this.showorderField;
            }
            set {
                this.showorderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CSystem : CSystemBase {
        
        private string computermodelField;
        
        private string computerbrandField;
        
        private string cputypeField;
        
        private string cpuspeedField;
        
        private string harddisktypeField;
        
        private string harddisksizeField;
        
        private string ramsizeField;
        
        private string romsizeField;
        
        private string osnameField;
        
        private string osversionField;
        
        private string videonameField;
        
        private bool hascdromField;
        
        private bool hascdromFieldSpecified;
        
        private string cdrommodelField;
        
        private bool hasscannerField;
        
        private bool hasscannerFieldSpecified;
        
        private string scannermodelField;
        
        private bool hasmodemField;
        
        private bool hasmodemFieldSpecified;
        
        private string modemmodelField;
        
        private bool hasprinterField;
        
        private bool hasprinterFieldSpecified;
        
        private string printermodelField;
        
        private string otherhardwareField;
        
        private bool hasmultiplemonitorsField;
        
        private bool hasmultiplemonitorsFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string computermodel {
            get {
                return this.computermodelField;
            }
            set {
                this.computermodelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string computerbrand {
            get {
                return this.computerbrandField;
            }
            set {
                this.computerbrandField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string cputype {
            get {
                return this.cputypeField;
            }
            set {
                this.cputypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string cpuspeed {
            get {
                return this.cpuspeedField;
            }
            set {
                this.cpuspeedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string harddisktype {
            get {
                return this.harddisktypeField;
            }
            set {
                this.harddisktypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string harddisksize {
            get {
                return this.harddisksizeField;
            }
            set {
                this.harddisksizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string ramsize {
            get {
                return this.ramsizeField;
            }
            set {
                this.ramsizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string romsize {
            get {
                return this.romsizeField;
            }
            set {
                this.romsizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string osname {
            get {
                return this.osnameField;
            }
            set {
                this.osnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string osversion {
            get {
                return this.osversionField;
            }
            set {
                this.osversionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string videoname {
            get {
                return this.videonameField;
            }
            set {
                this.videonameField = value;
            }
        }
        
        /// <remarks/>
        public bool hascdrom {
            get {
                return this.hascdromField;
            }
            set {
                this.hascdromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool hascdromSpecified {
            get {
                return this.hascdromFieldSpecified;
            }
            set {
                this.hascdromFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string cdrommodel {
            get {
                return this.cdrommodelField;
            }
            set {
                this.cdrommodelField = value;
            }
        }
        
        /// <remarks/>
        public bool hasscanner {
            get {
                return this.hasscannerField;
            }
            set {
                this.hasscannerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool hasscannerSpecified {
            get {
                return this.hasscannerFieldSpecified;
            }
            set {
                this.hasscannerFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string scannermodel {
            get {
                return this.scannermodelField;
            }
            set {
                this.scannermodelField = value;
            }
        }
        
        /// <remarks/>
        public bool hasmodem {
            get {
                return this.hasmodemField;
            }
            set {
                this.hasmodemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool hasmodemSpecified {
            get {
                return this.hasmodemFieldSpecified;
            }
            set {
                this.hasmodemFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string modemmodel {
            get {
                return this.modemmodelField;
            }
            set {
                this.modemmodelField = value;
            }
        }
        
        /// <remarks/>
        public bool hasprinter {
            get {
                return this.hasprinterField;
            }
            set {
                this.hasprinterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool hasprinterSpecified {
            get {
                return this.hasprinterFieldSpecified;
            }
            set {
                this.hasprinterFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string printermodel {
            get {
                return this.printermodelField;
            }
            set {
                this.printermodelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string otherhardware {
            get {
                return this.otherhardwareField;
            }
            set {
                this.otherhardwareField = value;
            }
        }
        
        /// <remarks/>
        public bool hasmultiplemonitors {
            get {
                return this.hasmultiplemonitorsField;
            }
            set {
                this.hasmultiplemonitorsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool hasmultiplemonitorsSpecified {
            get {
                return this.hasmultiplemonitorsFieldSpecified;
            }
            set {
                this.hasmultiplemonitorsFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CSystem))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CSystemBase : CItemToTrack {
        
        private string systemnameField;
        
        /// <remarks/>
        public string systemname {
            get {
                return this.systemnameField;
            }
            set {
                this.systemnameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CRequirementDocument))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CRequirement))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFolder))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CFolderType))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTestRun))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTestCase))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CLink))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CUser))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTask))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CDefect))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CSystemBase))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CSystem))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CItemToTrack : CItemWithDBRecordId {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CRequirementDocument : CItemToTrack {
        
        private long numberField;
        
        private bool numberFieldSpecified;
        
        private string nameField;
        
        private string descriptionField;
        
        private CFileAttachment[] descriptionInlineAttachListField;
        
        private string stateField;
        
        private CFileAttachment[] attachmentListField;
        
        private CSCCFileRecord[] sccFileListField;
        
        private CField[] customFieldListField;
        
        private CEvent[] eventListField;
        
        private CSnapshotInfo[] snapshotListField;
        
        private System.DateTime dateTimeCreatedField;
        
        private bool dateTimeCreatedFieldSpecified;
        
        private string createdByUserField;
        
        private string locationAddedFromField;
        
        private string modifiedByUserField;
        
        private System.DateTime dateTimeModifiedField;
        
        private bool dateTimeModifiedFieldSpecified;
        
        private double actualHoursField;
        
        private bool actualHoursFieldSpecified;
        
        private double estimatedHoursField;
        
        private bool estimatedHoursFieldSpecified;
        
        private double remainingHoursField;
        
        private bool remainingHoursFieldSpecified;
        
        private double varianceField;
        
        private bool varianceFieldSpecified;
        
        private long storyPointsField;
        
        private bool storyPointsFieldSpecified;
        
        private long percentDoneField;
        
        private bool percentDoneFieldSpecified;
        
        /// <remarks/>
        public long number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool numberSpecified {
            get {
                return this.numberFieldSpecified;
            }
            set {
                this.numberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] descriptionInlineAttachList {
            get {
                return this.descriptionInlineAttachListField;
            }
            set {
                this.descriptionInlineAttachListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] attachmentList {
            get {
                return this.attachmentListField;
            }
            set {
                this.attachmentListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CSCCFileRecord[] sccFileList {
            get {
                return this.sccFileListField;
            }
            set {
                this.sccFileListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CField[] customFieldList {
            get {
                return this.customFieldListField;
            }
            set {
                this.customFieldListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CEvent[] eventList {
            get {
                return this.eventListField;
            }
            set {
                this.eventListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CSnapshotInfo[] snapshotList {
            get {
                return this.snapshotListField;
            }
            set {
                this.snapshotListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime dateTimeCreated {
            get {
                return this.dateTimeCreatedField;
            }
            set {
                this.dateTimeCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool dateTimeCreatedSpecified {
            get {
                return this.dateTimeCreatedFieldSpecified;
            }
            set {
                this.dateTimeCreatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdByUser {
            get {
                return this.createdByUserField;
            }
            set {
                this.createdByUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string locationAddedFrom {
            get {
                return this.locationAddedFromField;
            }
            set {
                this.locationAddedFromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string modifiedByUser {
            get {
                return this.modifiedByUserField;
            }
            set {
                this.modifiedByUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime dateTimeModified {
            get {
                return this.dateTimeModifiedField;
            }
            set {
                this.dateTimeModifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool dateTimeModifiedSpecified {
            get {
                return this.dateTimeModifiedFieldSpecified;
            }
            set {
                this.dateTimeModifiedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double actualHours {
            get {
                return this.actualHoursField;
            }
            set {
                this.actualHoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool actualHoursSpecified {
            get {
                return this.actualHoursFieldSpecified;
            }
            set {
                this.actualHoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double estimatedHours {
            get {
                return this.estimatedHoursField;
            }
            set {
                this.estimatedHoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool estimatedHoursSpecified {
            get {
                return this.estimatedHoursFieldSpecified;
            }
            set {
                this.estimatedHoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double remainingHours {
            get {
                return this.remainingHoursField;
            }
            set {
                this.remainingHoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool remainingHoursSpecified {
            get {
                return this.remainingHoursFieldSpecified;
            }
            set {
                this.remainingHoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double variance {
            get {
                return this.varianceField;
            }
            set {
                this.varianceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool varianceSpecified {
            get {
                return this.varianceFieldSpecified;
            }
            set {
                this.varianceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long storyPoints {
            get {
                return this.storyPointsField;
            }
            set {
                this.storyPointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool storyPointsSpecified {
            get {
                return this.storyPointsFieldSpecified;
            }
            set {
                this.storyPointsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long percentDone {
            get {
                return this.percentDoneField;
            }
            set {
                this.percentDoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool percentDoneSpecified {
            get {
                return this.percentDoneFieldSpecified;
            }
            set {
                this.percentDoneFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CSnapshotInfo : CVersionInfo {
        
        private string labelField;
        
        private string commentField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CSnapshotInfo))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CVersionInfo {
        
        private long versionNumberField;
        
        private bool versionNumberFieldSpecified;
        
        private string createdByUserField;
        
        private string dateTimeCreatedField;
        
        /// <remarks/>
        public long versionNumber {
            get {
                return this.versionNumberField;
            }
            set {
                this.versionNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool versionNumberSpecified {
            get {
                return this.versionNumberFieldSpecified;
            }
            set {
                this.versionNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdByUser {
            get {
                return this.createdByUserField;
            }
            set {
                this.createdByUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string dateTimeCreated {
            get {
                return this.dateTimeCreatedField;
            }
            set {
                this.dateTimeCreatedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CRequirement : CItemToTrack {
        
        private long numberField;
        
        private bool numberFieldSpecified;
        
        private string typeField;
        
        private string summaryField;
        
        private string tagField;
        
        private System.DateTime dateEnteredField;
        
        private bool dateEnteredFieldSpecified;
        
        private string enteredByField;
        
        private string importanceField;
        
        private string descriptionField;
        
        private CFileAttachment[] descriptionInlineAttachListField;
        
        private string stateField;
        
        private CFileAttachment[] attachmentListField;
        
        private CSCCFileRecord[] sccFileListField;
        
        private CField[] customFieldListField;
        
        private CEvent[] eventListField;
        
        private CVersionInfo[] versionListField;
        
        private System.DateTime dateTimeCreatedField;
        
        private bool dateTimeCreatedFieldSpecified;
        
        private string createdByUserField;
        
        private string locationAddedFromField;
        
        private string modifiedByUserField;
        
        private System.DateTime dateTimeModifiedField;
        
        private bool dateTimeModifiedFieldSpecified;
        
        private double actualHoursField;
        
        private bool actualHoursFieldSpecified;
        
        private double estimatedHoursField;
        
        private bool estimatedHoursFieldSpecified;
        
        private double remainingHoursField;
        
        private bool remainingHoursFieldSpecified;
        
        private double varianceField;
        
        private bool varianceFieldSpecified;
        
        private long storyPointsField;
        
        private bool storyPointsFieldSpecified;
        
        private long percentDoneField;
        
        private bool percentDoneFieldSpecified;
        
        /// <remarks/>
        public long number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool numberSpecified {
            get {
                return this.numberFieldSpecified;
            }
            set {
                this.numberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="date", IsNullable=true)]
        public System.DateTime dateEntered {
            get {
                return this.dateEnteredField;
            }
            set {
                this.dateEnteredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool dateEnteredSpecified {
            get {
                return this.dateEnteredFieldSpecified;
            }
            set {
                this.dateEnteredFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string enteredBy {
            get {
                return this.enteredByField;
            }
            set {
                this.enteredByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string importance {
            get {
                return this.importanceField;
            }
            set {
                this.importanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] descriptionInlineAttachList {
            get {
                return this.descriptionInlineAttachListField;
            }
            set {
                this.descriptionInlineAttachListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] attachmentList {
            get {
                return this.attachmentListField;
            }
            set {
                this.attachmentListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CSCCFileRecord[] sccFileList {
            get {
                return this.sccFileListField;
            }
            set {
                this.sccFileListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CField[] customFieldList {
            get {
                return this.customFieldListField;
            }
            set {
                this.customFieldListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CEvent[] eventList {
            get {
                return this.eventListField;
            }
            set {
                this.eventListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CVersionInfo[] versionList {
            get {
                return this.versionListField;
            }
            set {
                this.versionListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime dateTimeCreated {
            get {
                return this.dateTimeCreatedField;
            }
            set {
                this.dateTimeCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool dateTimeCreatedSpecified {
            get {
                return this.dateTimeCreatedFieldSpecified;
            }
            set {
                this.dateTimeCreatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdByUser {
            get {
                return this.createdByUserField;
            }
            set {
                this.createdByUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string locationAddedFrom {
            get {
                return this.locationAddedFromField;
            }
            set {
                this.locationAddedFromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string modifiedByUser {
            get {
                return this.modifiedByUserField;
            }
            set {
                this.modifiedByUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime dateTimeModified {
            get {
                return this.dateTimeModifiedField;
            }
            set {
                this.dateTimeModifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool dateTimeModifiedSpecified {
            get {
                return this.dateTimeModifiedFieldSpecified;
            }
            set {
                this.dateTimeModifiedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double actualHours {
            get {
                return this.actualHoursField;
            }
            set {
                this.actualHoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool actualHoursSpecified {
            get {
                return this.actualHoursFieldSpecified;
            }
            set {
                this.actualHoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double estimatedHours {
            get {
                return this.estimatedHoursField;
            }
            set {
                this.estimatedHoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool estimatedHoursSpecified {
            get {
                return this.estimatedHoursFieldSpecified;
            }
            set {
                this.estimatedHoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double remainingHours {
            get {
                return this.remainingHoursField;
            }
            set {
                this.remainingHoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool remainingHoursSpecified {
            get {
                return this.remainingHoursFieldSpecified;
            }
            set {
                this.remainingHoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double variance {
            get {
                return this.varianceField;
            }
            set {
                this.varianceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool varianceSpecified {
            get {
                return this.varianceFieldSpecified;
            }
            set {
                this.varianceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long storyPoints {
            get {
                return this.storyPointsField;
            }
            set {
                this.storyPointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool storyPointsSpecified {
            get {
                return this.storyPointsFieldSpecified;
            }
            set {
                this.storyPointsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long percentDone {
            get {
                return this.percentDoneField;
            }
            set {
                this.percentDoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool percentDoneSpecified {
            get {
                return this.percentDoneFieldSpecified;
            }
            set {
                this.percentDoneFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CFolder : CItemToTrack {
        
        private long createdbyuserField;
        
        private bool createdbyuserFieldSpecified;
        
        private bool ispublicField;
        
        private bool ispublicFieldSpecified;
        
        private long modifiedbyuserField;
        
        private bool modifiedbyuserFieldSpecified;
        
        private string locationaddedfromField;
        
        private System.DateTime datetimecreatedField;
        
        private bool datetimecreatedFieldSpecified;
        
        private System.DateTime datetimemodifiedField;
        
        private bool datetimemodifiedFieldSpecified;
        
        private string nameField;
        
        private string descriptionField;
        
        private string pathField;
        
        private long orderField;
        
        private bool orderFieldSpecified;
        
        private long parentidField;
        
        private bool parentidFieldSpecified;
        
        private string foldertypenameField;
        
        private string webviewField;
        
        private string notesField;
        
        private CFileAttachment[] notesInlineAttachListField;
        
        private bool noteseditableField;
        
        private bool noteseditableFieldSpecified;
        
        private CScheduleInfo scheduleinfoField;
        
        /// <remarks/>
        public long createdbyuser {
            get {
                return this.createdbyuserField;
            }
            set {
                this.createdbyuserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool createdbyuserSpecified {
            get {
                return this.createdbyuserFieldSpecified;
            }
            set {
                this.createdbyuserFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool ispublic {
            get {
                return this.ispublicField;
            }
            set {
                this.ispublicField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool ispublicSpecified {
            get {
                return this.ispublicFieldSpecified;
            }
            set {
                this.ispublicFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long modifiedbyuser {
            get {
                return this.modifiedbyuserField;
            }
            set {
                this.modifiedbyuserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool modifiedbyuserSpecified {
            get {
                return this.modifiedbyuserFieldSpecified;
            }
            set {
                this.modifiedbyuserFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string locationaddedfrom {
            get {
                return this.locationaddedfromField;
            }
            set {
                this.locationaddedfromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime datetimecreated {
            get {
                return this.datetimecreatedField;
            }
            set {
                this.datetimecreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool datetimecreatedSpecified {
            get {
                return this.datetimecreatedFieldSpecified;
            }
            set {
                this.datetimecreatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime datetimemodified {
            get {
                return this.datetimemodifiedField;
            }
            set {
                this.datetimemodifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool datetimemodifiedSpecified {
            get {
                return this.datetimemodifiedFieldSpecified;
            }
            set {
                this.datetimemodifiedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        public long order {
            get {
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool orderSpecified {
            get {
                return this.orderFieldSpecified;
            }
            set {
                this.orderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long parentid {
            get {
                return this.parentidField;
            }
            set {
                this.parentidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool parentidSpecified {
            get {
                return this.parentidFieldSpecified;
            }
            set {
                this.parentidFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string foldertypename {
            get {
                return this.foldertypenameField;
            }
            set {
                this.foldertypenameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string webview {
            get {
                return this.webviewField;
            }
            set {
                this.webviewField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] notesInlineAttachList {
            get {
                return this.notesInlineAttachListField;
            }
            set {
                this.notesInlineAttachListField = value;
            }
        }
        
        /// <remarks/>
        public bool noteseditable {
            get {
                return this.noteseditableField;
            }
            set {
                this.noteseditableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool noteseditableSpecified {
            get {
                return this.noteseditableFieldSpecified;
            }
            set {
                this.noteseditableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CScheduleInfo scheduleinfo {
            get {
                return this.scheduleinfoField;
            }
            set {
                this.scheduleinfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CScheduleInfo {
        
        private System.DateTime startdateField;
        
        private bool startdateFieldSpecified;
        
        private System.DateTime enddateField;
        
        private bool enddateFieldSpecified;
        
        private bool includeweekendsField;
        
        private bool includeweekendsFieldSpecified;
        
        private long nonworkingdaysField;
        
        private bool nonworkingdaysFieldSpecified;
        
        private double hoursperdayField;
        
        private bool hoursperdayFieldSpecified;
        
        private double ptohoursField;
        
        private bool ptohoursFieldSpecified;
        
        private double usersavailableField;
        
        private bool usersavailableFieldSpecified;
        
        private long storypointsField;
        
        private bool storypointsFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="date", IsNullable=true)]
        public System.DateTime startdate {
            get {
                return this.startdateField;
            }
            set {
                this.startdateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool startdateSpecified {
            get {
                return this.startdateFieldSpecified;
            }
            set {
                this.startdateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="date", IsNullable=true)]
        public System.DateTime enddate {
            get {
                return this.enddateField;
            }
            set {
                this.enddateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool enddateSpecified {
            get {
                return this.enddateFieldSpecified;
            }
            set {
                this.enddateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool includeweekends {
            get {
                return this.includeweekendsField;
            }
            set {
                this.includeweekendsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool includeweekendsSpecified {
            get {
                return this.includeweekendsFieldSpecified;
            }
            set {
                this.includeweekendsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long nonworkingdays {
            get {
                return this.nonworkingdaysField;
            }
            set {
                this.nonworkingdaysField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool nonworkingdaysSpecified {
            get {
                return this.nonworkingdaysFieldSpecified;
            }
            set {
                this.nonworkingdaysFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double hoursperday {
            get {
                return this.hoursperdayField;
            }
            set {
                this.hoursperdayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool hoursperdaySpecified {
            get {
                return this.hoursperdayFieldSpecified;
            }
            set {
                this.hoursperdayFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double ptohours {
            get {
                return this.ptohoursField;
            }
            set {
                this.ptohoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool ptohoursSpecified {
            get {
                return this.ptohoursFieldSpecified;
            }
            set {
                this.ptohoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double usersavailable {
            get {
                return this.usersavailableField;
            }
            set {
                this.usersavailableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool usersavailableSpecified {
            get {
                return this.usersavailableFieldSpecified;
            }
            set {
                this.usersavailableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long storypoints {
            get {
                return this.storypointsField;
            }
            set {
                this.storypointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool storypointsSpecified {
            get {
                return this.storypointsFieldSpecified;
            }
            set {
                this.storypointsFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CFolderType : CItemToTrack {
        
        private string nameField;
        
        private string descriptionField;
        
        private bool allowwebField;
        
        private bool allowwebFieldSpecified;
        
        private bool allowdetailsField;
        
        private bool allowdetailsFieldSpecified;
        
        private bool releaseplanningField;
        
        private bool releaseplanningFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public bool allowweb {
            get {
                return this.allowwebField;
            }
            set {
                this.allowwebField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool allowwebSpecified {
            get {
                return this.allowwebFieldSpecified;
            }
            set {
                this.allowwebFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool allowdetails {
            get {
                return this.allowdetailsField;
            }
            set {
                this.allowdetailsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool allowdetailsSpecified {
            get {
                return this.allowdetailsFieldSpecified;
            }
            set {
                this.allowdetailsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool releaseplanning {
            get {
                return this.releaseplanningField;
            }
            set {
                this.releaseplanningField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool releaseplanningSpecified {
            get {
                return this.releaseplanningFieldSpecified;
            }
            set {
                this.releaseplanningFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CTestRun : CItemToTrack {
        
        private long testrunnumberField;
        
        private bool testrunnumberFieldSpecified;
        
        private string summaryField;
        
        private string stateField;
        
        private string createdbyuserField;
        
        private System.DateTime datetimecreatedField;
        
        private bool datetimecreatedFieldSpecified;
        
        private string locationaddedfromField;
        
        private string modifiedbyuserField;
        
        private System.DateTime datetimemodifiedField;
        
        private bool datetimemodifiedFieldSpecified;
        
        private CField[] customFieldListField;
        
        private CEvent[] eventlistField;
        
        private double actualhoursField;
        
        private bool actualhoursFieldSpecified;
        
        private double estimatedhoursField;
        
        private bool estimatedhoursFieldSpecified;
        
        private double remaininghoursField;
        
        private bool remaininghoursFieldSpecified;
        
        private double varianceField;
        
        private bool varianceFieldSpecified;
        
        private long storypointsField;
        
        private bool storypointsFieldSpecified;
        
        private long percentdoneField;
        
        private bool percentdoneFieldSpecified;
        
        private long testcasenumberField;
        
        private bool testcasenumberFieldSpecified;
        
        private long testcaserecordidField;
        
        private bool testcaserecordidFieldSpecified;
        
        private string typeField;
        
        private string testrunsetField;
        
        private bool isautomatedField;
        
        private bool isautomatedFieldSpecified;
        
        private string estimatedtimeField;
        
        private string stepsField;
        
        private string problemstatementField;
        
        private CTestCaseVariantField[] testVariantsField;
        
        private CFileAttachment[] attachmentlistField;
        
        private CSCCFileRecord[] sccFileListField;
        
        private string stepsmodeField;
        
        /// <remarks/>
        public long testrunnumber {
            get {
                return this.testrunnumberField;
            }
            set {
                this.testrunnumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool testrunnumberSpecified {
            get {
                return this.testrunnumberFieldSpecified;
            }
            set {
                this.testrunnumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdbyuser {
            get {
                return this.createdbyuserField;
            }
            set {
                this.createdbyuserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime datetimecreated {
            get {
                return this.datetimecreatedField;
            }
            set {
                this.datetimecreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool datetimecreatedSpecified {
            get {
                return this.datetimecreatedFieldSpecified;
            }
            set {
                this.datetimecreatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string locationaddedfrom {
            get {
                return this.locationaddedfromField;
            }
            set {
                this.locationaddedfromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string modifiedbyuser {
            get {
                return this.modifiedbyuserField;
            }
            set {
                this.modifiedbyuserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime datetimemodified {
            get {
                return this.datetimemodifiedField;
            }
            set {
                this.datetimemodifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool datetimemodifiedSpecified {
            get {
                return this.datetimemodifiedFieldSpecified;
            }
            set {
                this.datetimemodifiedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CField[] customFieldList {
            get {
                return this.customFieldListField;
            }
            set {
                this.customFieldListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CEvent[] eventlist {
            get {
                return this.eventlistField;
            }
            set {
                this.eventlistField = value;
            }
        }
        
        /// <remarks/>
        public double actualhours {
            get {
                return this.actualhoursField;
            }
            set {
                this.actualhoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool actualhoursSpecified {
            get {
                return this.actualhoursFieldSpecified;
            }
            set {
                this.actualhoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double estimatedhours {
            get {
                return this.estimatedhoursField;
            }
            set {
                this.estimatedhoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool estimatedhoursSpecified {
            get {
                return this.estimatedhoursFieldSpecified;
            }
            set {
                this.estimatedhoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double remaininghours {
            get {
                return this.remaininghoursField;
            }
            set {
                this.remaininghoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool remaininghoursSpecified {
            get {
                return this.remaininghoursFieldSpecified;
            }
            set {
                this.remaininghoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double variance {
            get {
                return this.varianceField;
            }
            set {
                this.varianceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool varianceSpecified {
            get {
                return this.varianceFieldSpecified;
            }
            set {
                this.varianceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long storypoints {
            get {
                return this.storypointsField;
            }
            set {
                this.storypointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool storypointsSpecified {
            get {
                return this.storypointsFieldSpecified;
            }
            set {
                this.storypointsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long percentdone {
            get {
                return this.percentdoneField;
            }
            set {
                this.percentdoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool percentdoneSpecified {
            get {
                return this.percentdoneFieldSpecified;
            }
            set {
                this.percentdoneFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long testcasenumber {
            get {
                return this.testcasenumberField;
            }
            set {
                this.testcasenumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool testcasenumberSpecified {
            get {
                return this.testcasenumberFieldSpecified;
            }
            set {
                this.testcasenumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long testcaserecordid {
            get {
                return this.testcaserecordidField;
            }
            set {
                this.testcaserecordidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool testcaserecordidSpecified {
            get {
                return this.testcaserecordidFieldSpecified;
            }
            set {
                this.testcaserecordidFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string testrunset {
            get {
                return this.testrunsetField;
            }
            set {
                this.testrunsetField = value;
            }
        }
        
        /// <remarks/>
        public bool isautomated {
            get {
                return this.isautomatedField;
            }
            set {
                this.isautomatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool isautomatedSpecified {
            get {
                return this.isautomatedFieldSpecified;
            }
            set {
                this.isautomatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string estimatedtime {
            get {
                return this.estimatedtimeField;
            }
            set {
                this.estimatedtimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string steps {
            get {
                return this.stepsField;
            }
            set {
                this.stepsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string problemstatement {
            get {
                return this.problemstatementField;
            }
            set {
                this.problemstatementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CTestCaseVariantField[] testVariants {
            get {
                return this.testVariantsField;
            }
            set {
                this.testVariantsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] attachmentlist {
            get {
                return this.attachmentlistField;
            }
            set {
                this.attachmentlistField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CSCCFileRecord[] sccFileList {
            get {
                return this.sccFileListField;
            }
            set {
                this.sccFileListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string stepsmode {
            get {
                return this.stepsmodeField;
            }
            set {
                this.stepsmodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CTestCaseVariantField : CTestRunVariantField {
        
        private string typeField;
        
        /// <remarks/>
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTestCaseVariantField))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CTestRunVariantField : CMultiSelectDropdownField {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTestRunVariantField))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(CTestCaseVariantField))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CMultiSelectDropdownField : CField {
        
        private CFieldValue[] valuesField;
        
        private CFieldValue[] dropdownValuesField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFieldValue[] values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFieldValue[] dropdownValues {
            get {
                return this.dropdownValuesField;
            }
            set {
                this.dropdownValuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CTestCase : CItemToTrack {
        
        private long testcasenumberField;
        
        private bool testcasenumberFieldSpecified;
        
        private string summaryField;
        
        private string stateField;
        
        private string createdbyuserField;
        
        private System.DateTime datetimecreatedField;
        
        private bool datetimecreatedFieldSpecified;
        
        private string locationaddedfromField;
        
        private string modifiedbyuserField;
        
        private System.DateTime datetimemodifiedField;
        
        private bool datetimemodifiedFieldSpecified;
        
        private CField[] customFieldListField;
        
        private CEvent[] eventlistField;
        
        private double actualhoursField;
        
        private bool actualhoursFieldSpecified;
        
        private double estimatedhoursField;
        
        private bool estimatedhoursFieldSpecified;
        
        private double remaininghoursField;
        
        private bool remaininghoursFieldSpecified;
        
        private double varianceField;
        
        private bool varianceFieldSpecified;
        
        private long storypointsField;
        
        private bool storypointsFieldSpecified;
        
        private long percentdoneField;
        
        private bool percentdoneFieldSpecified;
        
        private string typeField;
        
        private string testrunstepsmodeField;
        
        private bool isautomatedField;
        
        private bool isautomatedFieldSpecified;
        
        private string estimatedtimeField;
        
        private string stepsField;
        
        private CTestCaseVariantField[] testVariantsField;
        
        private CFileAttachment[] attachmentlistField;
        
        private CSCCFileRecord[] sccFileListField;
        
        /// <remarks/>
        public long testcasenumber {
            get {
                return this.testcasenumberField;
            }
            set {
                this.testcasenumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool testcasenumberSpecified {
            get {
                return this.testcasenumberFieldSpecified;
            }
            set {
                this.testcasenumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdbyuser {
            get {
                return this.createdbyuserField;
            }
            set {
                this.createdbyuserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime datetimecreated {
            get {
                return this.datetimecreatedField;
            }
            set {
                this.datetimecreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool datetimecreatedSpecified {
            get {
                return this.datetimecreatedFieldSpecified;
            }
            set {
                this.datetimecreatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string locationaddedfrom {
            get {
                return this.locationaddedfromField;
            }
            set {
                this.locationaddedfromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string modifiedbyuser {
            get {
                return this.modifiedbyuserField;
            }
            set {
                this.modifiedbyuserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime datetimemodified {
            get {
                return this.datetimemodifiedField;
            }
            set {
                this.datetimemodifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool datetimemodifiedSpecified {
            get {
                return this.datetimemodifiedFieldSpecified;
            }
            set {
                this.datetimemodifiedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CField[] customFieldList {
            get {
                return this.customFieldListField;
            }
            set {
                this.customFieldListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CEvent[] eventlist {
            get {
                return this.eventlistField;
            }
            set {
                this.eventlistField = value;
            }
        }
        
        /// <remarks/>
        public double actualhours {
            get {
                return this.actualhoursField;
            }
            set {
                this.actualhoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool actualhoursSpecified {
            get {
                return this.actualhoursFieldSpecified;
            }
            set {
                this.actualhoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double estimatedhours {
            get {
                return this.estimatedhoursField;
            }
            set {
                this.estimatedhoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool estimatedhoursSpecified {
            get {
                return this.estimatedhoursFieldSpecified;
            }
            set {
                this.estimatedhoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double remaininghours {
            get {
                return this.remaininghoursField;
            }
            set {
                this.remaininghoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool remaininghoursSpecified {
            get {
                return this.remaininghoursFieldSpecified;
            }
            set {
                this.remaininghoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double variance {
            get {
                return this.varianceField;
            }
            set {
                this.varianceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool varianceSpecified {
            get {
                return this.varianceFieldSpecified;
            }
            set {
                this.varianceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long storypoints {
            get {
                return this.storypointsField;
            }
            set {
                this.storypointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool storypointsSpecified {
            get {
                return this.storypointsFieldSpecified;
            }
            set {
                this.storypointsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long percentdone {
            get {
                return this.percentdoneField;
            }
            set {
                this.percentdoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool percentdoneSpecified {
            get {
                return this.percentdoneFieldSpecified;
            }
            set {
                this.percentdoneFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string testrunstepsmode {
            get {
                return this.testrunstepsmodeField;
            }
            set {
                this.testrunstepsmodeField = value;
            }
        }
        
        /// <remarks/>
        public bool isautomated {
            get {
                return this.isautomatedField;
            }
            set {
                this.isautomatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool isautomatedSpecified {
            get {
                return this.isautomatedFieldSpecified;
            }
            set {
                this.isautomatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string estimatedtime {
            get {
                return this.estimatedtimeField;
            }
            set {
                this.estimatedtimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string steps {
            get {
                return this.stepsField;
            }
            set {
                this.stepsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CTestCaseVariantField[] testVariants {
            get {
                return this.testVariantsField;
            }
            set {
                this.testVariantsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] attachmentlist {
            get {
                return this.attachmentlistField;
            }
            set {
                this.attachmentlistField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CSCCFileRecord[] sccFileList {
            get {
                return this.sccFileListField;
            }
            set {
                this.sccFileListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CLink : CItemToTrack {
        
        private string linkDefinitionNameField;
        
        private string commentField;
        
        private bool linkbrokenField;
        
        private bool linkbrokenFieldSpecified;
        
        private CLinkedItem linkparentField;
        
        private CLinkedItem[] childListField;
        
        private CLinkHistoryItem[] historyListField;
        
        /// <remarks/>
        public string linkDefinitionName {
            get {
                return this.linkDefinitionNameField;
            }
            set {
                this.linkDefinitionNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public bool linkbroken {
            get {
                return this.linkbrokenField;
            }
            set {
                this.linkbrokenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool linkbrokenSpecified {
            get {
                return this.linkbrokenFieldSpecified;
            }
            set {
                this.linkbrokenFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CLinkedItem linkparent {
            get {
                return this.linkparentField;
            }
            set {
                this.linkparentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CLinkedItem[] childList {
            get {
                return this.childListField;
            }
            set {
                this.childListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CLinkHistoryItem[] historyList {
            get {
                return this.historyListField;
            }
            set {
                this.historyListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CUser : CItemToTrack {
        
        private string firstnameField;
        
        private string middleinitialsField;
        
        private string lastnameField;
        
        private string usergroupnameField;
        
        private string companyField;
        
        private string divisionField;
        
        private string departmentField;
        
        private string emailtypeField;
        
        private string emailaddressField;
        
        private bool isactiveField;
        
        private bool isactiveFieldSpecified;
        
        private bool iscustomerField;
        
        private bool iscustomerFieldSpecified;
        
        private bool isglobalField;
        
        private bool isglobalFieldSpecified;
        
        private bool isactiveglobalField;
        
        private bool isactiveglobalFieldSpecified;
        
        private string userLicenseField;
        
        private string userLicenseTCMField;
        
        private string userLicenseRMField;
        
        private string passwordField;
        
        private string loginnameField;
        
        private PhoneNumber phoneoneField;
        
        private PhoneNumber phonetwoField;
        
        private string notesField;
        
        private bool betasiteField;
        
        private bool betasiteFieldSpecified;
        
        private string addressField;
        
        private CSystem testconfigField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                this.firstnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string middleinitials {
            get {
                return this.middleinitialsField;
            }
            set {
                this.middleinitialsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                this.lastnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string usergroupname {
            get {
                return this.usergroupnameField;
            }
            set {
                this.usergroupnameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string division {
            get {
                return this.divisionField;
            }
            set {
                this.divisionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailtype {
            get {
                return this.emailtypeField;
            }
            set {
                this.emailtypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string emailaddress {
            get {
                return this.emailaddressField;
            }
            set {
                this.emailaddressField = value;
            }
        }
        
        /// <remarks/>
        public bool isactive {
            get {
                return this.isactiveField;
            }
            set {
                this.isactiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool isactiveSpecified {
            get {
                return this.isactiveFieldSpecified;
            }
            set {
                this.isactiveFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool iscustomer {
            get {
                return this.iscustomerField;
            }
            set {
                this.iscustomerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool iscustomerSpecified {
            get {
                return this.iscustomerFieldSpecified;
            }
            set {
                this.iscustomerFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool isglobal {
            get {
                return this.isglobalField;
            }
            set {
                this.isglobalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool isglobalSpecified {
            get {
                return this.isglobalFieldSpecified;
            }
            set {
                this.isglobalFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool isactiveglobal {
            get {
                return this.isactiveglobalField;
            }
            set {
                this.isactiveglobalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool isactiveglobalSpecified {
            get {
                return this.isactiveglobalFieldSpecified;
            }
            set {
                this.isactiveglobalFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userLicense {
            get {
                return this.userLicenseField;
            }
            set {
                this.userLicenseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userLicenseTCM {
            get {
                return this.userLicenseTCMField;
            }
            set {
                this.userLicenseTCMField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string userLicenseRM {
            get {
                return this.userLicenseRMField;
            }
            set {
                this.userLicenseRMField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string loginname {
            get {
                return this.loginnameField;
            }
            set {
                this.loginnameField = value;
            }
        }
        
        /// <remarks/>
        public PhoneNumber phoneone {
            get {
                return this.phoneoneField;
            }
            set {
                this.phoneoneField = value;
            }
        }
        
        /// <remarks/>
        public PhoneNumber phonetwo {
            get {
                return this.phonetwoField;
            }
            set {
                this.phonetwoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string notes {
            get {
                return this.notesField;
            }
            set {
                this.notesField = value;
            }
        }
        
        /// <remarks/>
        public bool betasite {
            get {
                return this.betasiteField;
            }
            set {
                this.betasiteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool betasiteSpecified {
            get {
                return this.betasiteFieldSpecified;
            }
            set {
                this.betasiteFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CSystem testconfig {
            get {
                return this.testconfigField;
            }
            set {
                this.testconfigField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class PhoneNumber {
        
        private string numbertypeField;
        
        private string phonenumberField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string numbertype {
            get {
                return this.numbertypeField;
            }
            set {
                this.numbertypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string phonenumber {
            get {
                return this.phonenumberField;
            }
            set {
                this.phonenumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CTask : CItemToTrack {
        
        private string statusField;
        
        private string priorityField;
        
        private string summaryField;
        
        private string descriptionField;
        
        private System.DateTime datedueField;
        
        private bool datedueFieldSpecified;
        
        private System.DateTime dateassignedField;
        
        private bool dateassignedFieldSpecified;
        
        private string versiondueField;
        
        private string assignedtoField;
        
        private string assignedbyField;
        
        private long assigneddefectField;
        
        private bool assigneddefectFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="date", IsNullable=true)]
        public System.DateTime datedue {
            get {
                return this.datedueField;
            }
            set {
                this.datedueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool datedueSpecified {
            get {
                return this.datedueFieldSpecified;
            }
            set {
                this.datedueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="date", IsNullable=true)]
        public System.DateTime dateassigned {
            get {
                return this.dateassignedField;
            }
            set {
                this.dateassignedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool dateassignedSpecified {
            get {
                return this.dateassignedFieldSpecified;
            }
            set {
                this.dateassignedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string versiondue {
            get {
                return this.versiondueField;
            }
            set {
                this.versiondueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string assignedto {
            get {
                return this.assignedtoField;
            }
            set {
                this.assignedtoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string assignedby {
            get {
                return this.assignedbyField;
            }
            set {
                this.assignedbyField = value;
            }
        }
        
        /// <remarks/>
        public long assigneddefect {
            get {
                return this.assigneddefectField;
            }
            set {
                this.assigneddefectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool assigneddefectSpecified {
            get {
                return this.assigneddefectFieldSpecified;
            }
            set {
                this.assigneddefectFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CDefect : CItemToTrack {
        
        private long defectnumberField;
        
        private bool defectnumberFieldSpecified;
        
        private string summaryField;
        
        private string stateField;
        
        private string dispositionField;
        
        private string typeField;
        
        private string priorityField;
        
        private string productField;
        
        private string componentField;
        
        private string referenceField;
        
        private string severityField;
        
        private string enteredbyField;
        
        private string workaroundField;
        
        private CFileAttachment[] workaroundInlineAttachListField;
        
        private System.DateTime dateenteredField;
        
        private bool dateenteredFieldSpecified;
        
        private string locationaddedfromField;
        
        private System.DateTime datetimecreatedField;
        
        private bool datetimecreatedFieldSpecified;
        
        private System.DateTime datetimemodifiedField;
        
        private bool datetimemodifiedFieldSpecified;
        
        private string createdbyuserField;
        
        private string modifiedbyuserField;
        
        private double actualhourstofixField;
        
        private bool actualhourstofixFieldSpecified;
        
        private double estimatedhoursField;
        
        private bool estimatedhoursFieldSpecified;
        
        private double remaininghoursField;
        
        private bool remaininghoursFieldSpecified;
        
        private double varianceField;
        
        private bool varianceFieldSpecified;
        
        private long storypointsField;
        
        private bool storypointsFieldSpecified;
        
        private long percentdoneField;
        
        private bool percentdoneFieldSpecified;
        
        private CReportedByRecord[] reportedbylistField;
        
        private CEvent[] eventlistField;
        
        private CSCCFileRecord[] pSCCFileListField;
        
        private CField[] customFieldListField;
        
        /// <remarks/>
        public long defectnumber {
            get {
                return this.defectnumberField;
            }
            set {
                this.defectnumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool defectnumberSpecified {
            get {
                return this.defectnumberFieldSpecified;
            }
            set {
                this.defectnumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string disposition {
            get {
                return this.dispositionField;
            }
            set {
                this.dispositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string priority {
            get {
                return this.priorityField;
            }
            set {
                this.priorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string product {
            get {
                return this.productField;
            }
            set {
                this.productField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string component {
            get {
                return this.componentField;
            }
            set {
                this.componentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string reference {
            get {
                return this.referenceField;
            }
            set {
                this.referenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string enteredby {
            get {
                return this.enteredbyField;
            }
            set {
                this.enteredbyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string workaround {
            get {
                return this.workaroundField;
            }
            set {
                this.workaroundField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] workaroundInlineAttachList {
            get {
                return this.workaroundInlineAttachListField;
            }
            set {
                this.workaroundInlineAttachListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="date", IsNullable=true)]
        public System.DateTime dateentered {
            get {
                return this.dateenteredField;
            }
            set {
                this.dateenteredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool dateenteredSpecified {
            get {
                return this.dateenteredFieldSpecified;
            }
            set {
                this.dateenteredFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string locationaddedfrom {
            get {
                return this.locationaddedfromField;
            }
            set {
                this.locationaddedfromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime datetimecreated {
            get {
                return this.datetimecreatedField;
            }
            set {
                this.datetimecreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool datetimecreatedSpecified {
            get {
                return this.datetimecreatedFieldSpecified;
            }
            set {
                this.datetimecreatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime datetimemodified {
            get {
                return this.datetimemodifiedField;
            }
            set {
                this.datetimemodifiedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool datetimemodifiedSpecified {
            get {
                return this.datetimemodifiedFieldSpecified;
            }
            set {
                this.datetimemodifiedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string createdbyuser {
            get {
                return this.createdbyuserField;
            }
            set {
                this.createdbyuserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string modifiedbyuser {
            get {
                return this.modifiedbyuserField;
            }
            set {
                this.modifiedbyuserField = value;
            }
        }
        
        /// <remarks/>
        public double actualhourstofix {
            get {
                return this.actualhourstofixField;
            }
            set {
                this.actualhourstofixField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool actualhourstofixSpecified {
            get {
                return this.actualhourstofixFieldSpecified;
            }
            set {
                this.actualhourstofixFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double estimatedhours {
            get {
                return this.estimatedhoursField;
            }
            set {
                this.estimatedhoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool estimatedhoursSpecified {
            get {
                return this.estimatedhoursFieldSpecified;
            }
            set {
                this.estimatedhoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double remaininghours {
            get {
                return this.remaininghoursField;
            }
            set {
                this.remaininghoursField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool remaininghoursSpecified {
            get {
                return this.remaininghoursFieldSpecified;
            }
            set {
                this.remaininghoursFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double variance {
            get {
                return this.varianceField;
            }
            set {
                this.varianceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool varianceSpecified {
            get {
                return this.varianceFieldSpecified;
            }
            set {
                this.varianceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long storypoints {
            get {
                return this.storypointsField;
            }
            set {
                this.storypointsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool storypointsSpecified {
            get {
                return this.storypointsFieldSpecified;
            }
            set {
                this.storypointsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long percentdone {
            get {
                return this.percentdoneField;
            }
            set {
                this.percentdoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool percentdoneSpecified {
            get {
                return this.percentdoneFieldSpecified;
            }
            set {
                this.percentdoneFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CReportedByRecord[] reportedbylist {
            get {
                return this.reportedbylistField;
            }
            set {
                this.reportedbylistField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CEvent[] eventlist {
            get {
                return this.eventlistField;
            }
            set {
                this.eventlistField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CSCCFileRecord[] pSCCFileList {
            get {
                return this.pSCCFileListField;
            }
            set {
                this.pSCCFileListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CField[] customFieldList {
            get {
                return this.customFieldListField;
            }
            set {
                this.customFieldListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CTimespanField : CField {
        
        private double valueField;
        
        private string unitField;
        
        /// <remarks/>
        public double value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CVersionField : CField {
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CDropdownField : CField {
        
        private string valueField;
        
        private CFieldValue[] dropdownValuesField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFieldValue[] dropdownValues {
            get {
                return this.dropdownValuesField;
            }
            set {
                this.dropdownValuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CDateTimeField : CField {
        
        private System.DateTime valueField;
        
        private bool valueFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public System.DateTime value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool valueSpecified {
            get {
                return this.valueFieldSpecified;
            }
            set {
                this.valueFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CDateField : CField {
        
        private System.DateTime valueField;
        
        private bool valueFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="date", IsNullable=true)]
        public System.DateTime value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool valueSpecified {
            get {
                return this.valueFieldSpecified;
            }
            set {
                this.valueFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CBooleanField : CField {
        
        private bool valueField;
        
        /// <remarks/>
        public bool value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CDecimalField : CField {
        
        private double valueField;
        
        /// <remarks/>
        public double value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CIntegerField : CField {
        
        private int valueField;
        
        /// <remarks/>
        public int value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CStringField : CField {
        
        private string valueField;
        
        private bool isMultilineStringField;
        
        private bool isMultilineStringFieldSpecified;
        
        private bool containsFormattingField;
        
        private bool containsFormattingFieldSpecified;
        
        private CFileAttachment[] inlineAttachmentListField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public bool isMultilineString {
            get {
                return this.isMultilineStringField;
            }
            set {
                this.isMultilineStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool isMultilineStringSpecified {
            get {
                return this.isMultilineStringFieldSpecified;
            }
            set {
                this.isMultilineStringFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool containsFormatting {
            get {
                return this.containsFormattingField;
            }
            set {
                this.containsFormattingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool containsFormattingSpecified {
            get {
                return this.containsFormattingFieldSpecified;
            }
            set {
                this.containsFormattingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CFileAttachment[] inlineAttachmentList {
            get {
                return this.inlineAttachmentListField;
            }
            set {
                this.inlineAttachmentListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CDefectEventDefinition : CEventDefinition {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CReportRunResults {
        
        private CFile[] mFileListField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute("m-FileList", IsNullable=true)]
        public CFile[] mFileList {
            get {
                return this.mFileListField;
            }
            set {
                this.mFileListField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CRecordData {
        
        private string valueField;
        
        /// <remarks/>
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CRecordRowSoap {
        
        private CRecordData[] rowField;
        
        /// <remarks/>
        public CRecordData[] row {
            get {
                return this.rowField;
            }
            set {
                this.rowField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CRecordListSoap {
        
        private CTableColumn[] columnlistField;
        
        private CRecordRowSoap[] recordsField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CTableColumn[] columnlist {
            get {
                return this.columnlistField;
            }
            set {
                this.columnlistField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CRecordRowSoap[] records {
            get {
                return this.recordsField;
            }
            set {
                this.recordsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CTableColumn {
        
        private string nameField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CFilter {
        
        private string nameField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CTableField {
        
        private string nameField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CDatabaseTable {
        
        private string nameField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CProjectDataOption {
        
        private string nameField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:testtrack-interface")]
    public partial class CProject {
        
        private CDatabase databaseField;
        
        private CProjectDataOption[] optionsField;
        
        private int servernumberField;
        
        private bool servernumberFieldSpecified;
        
        /// <remarks/>
        public CDatabase database {
            get {
                return this.databaseField;
            }
            set {
                this.databaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public CProjectDataOption[] options {
            get {
                return this.optionsField;
            }
            set {
                this.optionsField = value;
            }
        }
        
        /// <remarks/>
        public int servernumber {
            get {
                return this.servernumberField;
            }
            set {
                this.servernumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool servernumberSpecified {
            get {
                return this.servernumberFieldSpecified;
            }
            set {
                this.servernumberFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDatabaseListCompletedEventHandler(object sender, getDatabaseListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDatabaseListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDatabaseListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CDatabase[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CDatabase[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProjectListCompletedEventHandler(object sender, getProjectListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CProject[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CProject[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getProjectDataOptionListCompletedEventHandler(object sender, getProjectDataOptionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProjectDataOptionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProjectDataOptionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CProjectDataOption[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CProjectDataOption[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DatabaseLogonCompletedEventHandler(object sender, DatabaseLogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DatabaseLogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DatabaseLogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ProjectLogonCompletedEventHandler(object sender, ProjectLogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProjectLogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProjectLogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DatabaseLogoffCompletedEventHandler(object sender, DatabaseLogoffCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DatabaseLogoffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DatabaseLogoffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void formattedTextSupportCompletedEventHandler(object sender, formattedTextSupportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class formattedTextSupportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal formattedTextSupportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTableListCompletedEventHandler(object sender, getTableListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTableListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTableListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CDatabaseTable[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CDatabaseTable[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDropdownFieldForTableCompletedEventHandler(object sender, getDropdownFieldForTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDropdownFieldForTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDropdownFieldForTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTableField[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTableField[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDropdownFieldValuesForTableCompletedEventHandler(object sender, getDropdownFieldValuesForTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDropdownFieldValuesForTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDropdownFieldValuesForTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFieldValue[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFieldValue[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addDropdownFieldValuesForTableCompletedEventHandler(object sender, addDropdownFieldValuesForTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addDropdownFieldValuesForTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addDropdownFieldValuesForTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetLinkDefinitionValuesCompletedEventHandler(object sender, GetLinkDefinitionValuesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkDefinitionValuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkDefinitionValuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFieldValue[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFieldValue[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getColumnsForTableCompletedEventHandler(object sender, getColumnsForTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getColumnsForTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getColumnsForTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTableColumn[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTableColumn[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFilterListCompletedEventHandler(object sender, getFilterListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFilterListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFilterListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFilter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFilter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFilterListForTableCompletedEventHandler(object sender, getFilterListForTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFilterListForTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFilterListForTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFilter[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFilter[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getRecordListForTableCompletedEventHandler(object sender, getRecordListForTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRecordListForTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRecordListForTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CRecordListSoap Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CRecordListSoap)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTestConfigCompletedEventHandler(object sender, getTestConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTestConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTestConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CSystem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CSystem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTestConfigByRecordIDCompletedEventHandler(object sender, getTestConfigByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTestConfigByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTestConfigByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CSystem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CSystem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addTestConfigCompletedEventHandler(object sender, addTestConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addTestConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addTestConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editTestConfigCompletedEventHandler(object sender, editTestConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editTestConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editTestConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CSystem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CSystem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editTestConfigByRecordIDCompletedEventHandler(object sender, editTestConfigByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editTestConfigByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editTestConfigByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CSystem Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CSystem)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveTestConfigCompletedEventHandler(object sender, saveTestConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveTestConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveTestConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteTestConfigCompletedEventHandler(object sender, deleteTestConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteTestConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteTestConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteTestConfigByRecordIDCompletedEventHandler(object sender, deleteTestConfigByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteTestConfigByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteTestConfigByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveTestConfigCompletedEventHandler(object sender, cancelSaveTestConfigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveTestConfigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveTestConfigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getAttachmentTypesCompletedEventHandler(object sender, getAttachmentTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAttachmentTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAttachmentTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getReportRunResultsByNameCompletedEventHandler(object sender, getReportRunResultsByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getReportRunResultsByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getReportRunResultsByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CReportRunResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CReportRunResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getReportRunResultsByRecordIDCompletedEventHandler(object sender, getReportRunResultsByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getReportRunResultsByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getReportRunResultsByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CReportRunResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CReportRunResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getEventDefinitionListCompletedEventHandler(object sender, getEventDefinitionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEventDefinitionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEventDefinitionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CEventDefinition[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CEventDefinition[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDefectEventDefinitionListCompletedEventHandler(object sender, getDefectEventDefinitionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDefectEventDefinitionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDefectEventDefinitionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CDefectEventDefinition[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CDefectEventDefinition[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCustomFieldsDefinitionListCompletedEventHandler(object sender, getCustomFieldsDefinitionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCustomFieldsDefinitionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCustomFieldsDefinitionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CField[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CField[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDefectCustomFieldsDefinitionListCompletedEventHandler(object sender, getDefectCustomFieldsDefinitionListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDefectCustomFieldsDefinitionListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDefectCustomFieldsDefinitionListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CField[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CField[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDefectCompletedEventHandler(object sender, getDefectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDefectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDefectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CDefect Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CDefect)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDefectByRecordIDCompletedEventHandler(object sender, getDefectByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDefectByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDefectByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CDefect Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CDefect)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addDefectCompletedEventHandler(object sender, addDefectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addDefectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addDefectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addDefectWithLinkCompletedEventHandler(object sender, addDefectWithLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addDefectWithLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addDefectWithLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteDefectCompletedEventHandler(object sender, deleteDefectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteDefectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteDefectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteDefectByRecordIDCompletedEventHandler(object sender, deleteDefectByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteDefectByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteDefectByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editDefectCompletedEventHandler(object sender, editDefectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editDefectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editDefectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CDefect Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CDefect)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editDefectByRecordIDCompletedEventHandler(object sender, editDefectByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editDefectByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editDefectByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CDefect Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CDefect)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveDefectCompletedEventHandler(object sender, saveDefectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveDefectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveDefectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveDefectCompletedEventHandler(object sender, cancelSaveDefectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveDefectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveDefectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getAttachmentCompletedEventHandler(object sender, getAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFileAttachment Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFileAttachment)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDefectAttachmentCompletedEventHandler(object sender, getDefectAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDefectAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDefectAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFileAttachment Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFileAttachment)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTaskCompletedEventHandler(object sender, getTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTask Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTask)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTaskByRecordIDCompletedEventHandler(object sender, getTaskByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTaskByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTaskByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTask Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTask)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addTaskCompletedEventHandler(object sender, addTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteTaskCompletedEventHandler(object sender, deleteTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteTaskByRecordIDCompletedEventHandler(object sender, deleteTaskByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteTaskByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteTaskByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editTaskCompletedEventHandler(object sender, editTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTask Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTask)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editTaskByRecordIDCompletedEventHandler(object sender, editTaskByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editTaskByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editTaskByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTask Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTask)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveTaskCompletedEventHandler(object sender, saveTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveTaskCompletedEventHandler(object sender, cancelSaveTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getGlobalUserListCompletedEventHandler(object sender, getGlobalUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGlobalUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGlobalUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CGlobalUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CGlobalUser[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getGlobalCustomerListCompletedEventHandler(object sender, getGlobalCustomerListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGlobalCustomerListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGlobalCustomerListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CGlobalUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CGlobalUser[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUserLicenseListCompletedEventHandler(object sender, getUserLicenseListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserLicenseListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserLicenseListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CUserLicense[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CUserLicense[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUserCompletedEventHandler(object sender, getUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUserByRecordIDCompletedEventHandler(object sender, getUserByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getUserForCurrentSessionCompletedEventHandler(object sender, getUserForCurrentSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserForCurrentSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserForCurrentSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addUserCompletedEventHandler(object sender, addUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editUserCompletedEventHandler(object sender, editUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editUserByRecordIDCompletedEventHandler(object sender, editUserByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editUserByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editUserByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveUserCompletedEventHandler(object sender, saveUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteUserCompletedEventHandler(object sender, deleteUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteUserByRecordIDCompletedEventHandler(object sender, deleteUserByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteUserByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteUserByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveUserCompletedEventHandler(object sender, cancelSaveUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void promoteUserCompletedEventHandler(object sender, promoteUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class promoteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal promoteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addGlobalUserCompletedEventHandler(object sender, addGlobalUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addGlobalUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addGlobalUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCustomerCompletedEventHandler(object sender, getCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCustomerByRecordIDCompletedEventHandler(object sender, getCustomerByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCustomerByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCustomerByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addCustomerCompletedEventHandler(object sender, addCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editCustomerCompletedEventHandler(object sender, editCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editCustomerByRecordIDCompletedEventHandler(object sender, editCustomerByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editCustomerByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editCustomerByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveCustomerCompletedEventHandler(object sender, saveCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteCustomerCompletedEventHandler(object sender, deleteCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteCustomerByRecordIDCompletedEventHandler(object sender, deleteCustomerByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteCustomerByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteCustomerByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveCustomerCompletedEventHandler(object sender, cancelSaveCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void promoteCustomerCompletedEventHandler(object sender, promoteCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class promoteCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal promoteCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addGlobalCustomerCompletedEventHandler(object sender, addGlobalCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addGlobalCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addGlobalCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLinksForItemCompletedEventHandler(object sender, getLinksForItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLinksForItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLinksForItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CLink[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CLink[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLinksForDefectCompletedEventHandler(object sender, getLinksForDefectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLinksForDefectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLinksForDefectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CLink[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CLink[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getLinkCompletedEventHandler(object sender, getLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CLink Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CLink)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addLinkCompletedEventHandler(object sender, addLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteLinkCompletedEventHandler(object sender, deleteLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editLinkCompletedEventHandler(object sender, editLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CLink Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CLink)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveLinkCompletedEventHandler(object sender, saveLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveLinkCompletedEventHandler(object sender, cancelSaveLinkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveLinkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveLinkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTestVariantTypesCompletedEventHandler(object sender, getTestVariantTypesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTestVariantTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTestVariantTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTestRunStepsModesCompletedEventHandler(object sender, getTestRunStepsModesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTestRunStepsModesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTestRunStepsModesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTestCaseCompletedEventHandler(object sender, getTestCaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTestCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTestCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTestCase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTestCase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTestCaseByRecordIDCompletedEventHandler(object sender, getTestCaseByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTestCaseByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTestCaseByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTestCase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTestCase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addTestCaseCompletedEventHandler(object sender, addTestCaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addTestCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addTestCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteTestCaseCompletedEventHandler(object sender, deleteTestCaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteTestCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteTestCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteTestCaseByRecordIDCompletedEventHandler(object sender, deleteTestCaseByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteTestCaseByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteTestCaseByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editTestCaseCompletedEventHandler(object sender, editTestCaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editTestCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editTestCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTestCase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTestCase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editTestCaseByRecordIDCompletedEventHandler(object sender, editTestCaseByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editTestCaseByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editTestCaseByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTestCase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTestCase)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveTestCaseCompletedEventHandler(object sender, saveTestCaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveTestCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveTestCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveTestCaseCompletedEventHandler(object sender, cancelSaveTestCaseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveTestCaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveTestCaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTestRunCompletedEventHandler(object sender, getTestRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTestRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTestRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTestRun Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTestRun)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getTestRunByRecordIDCompletedEventHandler(object sender, getTestRunByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTestRunByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTestRunByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTestRun Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTestRun)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteTestRunCompletedEventHandler(object sender, deleteTestRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteTestRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteTestRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteTestRunByRecordIDCompletedEventHandler(object sender, deleteTestRunByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteTestRunByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteTestRunByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editTestRunCompletedEventHandler(object sender, editTestRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editTestRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editTestRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTestRun Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTestRun)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editTestRunByRecordIDCompletedEventHandler(object sender, editTestRunByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editTestRunByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editTestRunByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTestRun Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTestRun)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveTestRunCompletedEventHandler(object sender, saveTestRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveTestRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveTestRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveTestRunCompletedEventHandler(object sender, cancelSaveTestRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveTestRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveTestRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void createDefectForTestRunCompletedEventHandler(object sender, createDefectForTestRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createDefectForTestRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createDefectForTestRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CDefect Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CDefect)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void generateTestRunsCompletedEventHandler(object sender, generateTestRunsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class generateTestRunsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal generateTestRunsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CItemToTrack[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CItemToTrack[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFolderTypeByNameCompletedEventHandler(object sender, getFolderTypeByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFolderTypeByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFolderTypeByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFolderType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFolderType)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFolderTypeListCompletedEventHandler(object sender, getFolderTypeListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFolderTypeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFolderTypeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFolderType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFolderType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addFolderCompletedEventHandler(object sender, addFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editFolderCompletedEventHandler(object sender, editFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFolder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFolder)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editFolderByRecordIDCompletedEventHandler(object sender, editFolderByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editFolderByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editFolderByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFolder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFolder)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveFolderCompletedEventHandler(object sender, saveFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveFolderCompletedEventHandler(object sender, cancelSaveFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFolderCompletedEventHandler(object sender, getFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFolder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFolder)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFolderByRecordIDCompletedEventHandler(object sender, getFolderByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFolderByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFolderByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFolder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFolder)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteFolderCompletedEventHandler(object sender, deleteFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteFolderByRecordIDCompletedEventHandler(object sender, deleteFolderByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteFolderByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteFolderByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addEntityToFolderByRecordIDCompletedEventHandler(object sender, addEntityToFolderByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addEntityToFolderByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addEntityToFolderByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void removeEntityFromFolderByRecordIDCompletedEventHandler(object sender, removeEntityFromFolderByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeEntityFromFolderByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeEntityFromFolderByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getEntityListForFolderByRecordIDCompletedEventHandler(object sender, getEntityListForFolderByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEntityListForFolderByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEntityListForFolderByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFolderItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFolderItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFolderListForEntityByRecordIDCompletedEventHandler(object sender, getFolderListForEntityByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFolderListForEntityByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFolderListForEntityByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFolder[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFolder[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFolderPathSeparatorCompletedEventHandler(object sender, getFolderPathSeparatorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFolderPathSeparatorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFolderPathSeparatorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public sbyte Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((sbyte)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getRootPublicFolderPathCompletedEventHandler(object sender, getRootPublicFolderPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRootPublicFolderPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRootPublicFolderPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getRootPrivateFolderPathCompletedEventHandler(object sender, getRootPrivateFolderPathCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRootPrivateFolderPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRootPrivateFolderPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editFolderItemRankCompletedEventHandler(object sender, editFolderItemRankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editFolderItemRankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editFolderItemRankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CFolderItem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CFolderItem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveFolderItemRankCompletedEventHandler(object sender, saveFolderItemRankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveFolderItemRankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveFolderItemRankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveFolderItemRankCompletedEventHandler(object sender, cancelSaveFolderItemRankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveFolderItemRankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveFolderItemRankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getRequirementCompletedEventHandler(object sender, getRequirementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRequirementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRequirementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CRequirement Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CRequirement)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getRequirementByRecordIDCompletedEventHandler(object sender, getRequirementByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRequirementByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRequirementByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CRequirement Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CRequirement)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addRequirementCompletedEventHandler(object sender, addRequirementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addRequirementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addRequirementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteRequirementCompletedEventHandler(object sender, deleteRequirementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteRequirementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteRequirementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteRequirementByRecordIDCompletedEventHandler(object sender, deleteRequirementByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteRequirementByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteRequirementByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editRequirementCompletedEventHandler(object sender, editRequirementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editRequirementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editRequirementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CRequirement Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CRequirement)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editRequirementByRecordIDCompletedEventHandler(object sender, editRequirementByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editRequirementByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editRequirementByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CRequirement Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CRequirement)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveRequirementCompletedEventHandler(object sender, saveRequirementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveRequirementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveRequirementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveRequirementCompletedEventHandler(object sender, cancelSaveRequirementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveRequirementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveRequirementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void appendToRequirementDocumentCompletedEventHandler(object sender, appendToRequirementDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class appendToRequirementDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal appendToRequirementDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDocumentIDsForRequirementCompletedEventHandler(object sender, getDocumentIDsForRequirementCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentIDsForRequirementCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentIDsForRequirementCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void changeRequirementTypeCompletedEventHandler(object sender, changeRequirementTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changeRequirementTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changeRequirementTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getRequirementDocumentCompletedEventHandler(object sender, getRequirementDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRequirementDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRequirementDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CRequirementDocument Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CRequirementDocument)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getRequirementDocumentByRecordIDCompletedEventHandler(object sender, getRequirementDocumentByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRequirementDocumentByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRequirementDocumentByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CRequirementDocument Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CRequirementDocument)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void addRequirementDocumentCompletedEventHandler(object sender, addRequirementDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addRequirementDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addRequirementDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteRequirementDocumentCompletedEventHandler(object sender, deleteRequirementDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteRequirementDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteRequirementDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void deleteRequirementDocumentByRecordIDCompletedEventHandler(object sender, deleteRequirementDocumentByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteRequirementDocumentByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteRequirementDocumentByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editRequirementDocumentCompletedEventHandler(object sender, editRequirementDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editRequirementDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editRequirementDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CRequirementDocument Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CRequirementDocument)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void editRequirementDocumentByRecordIDCompletedEventHandler(object sender, editRequirementDocumentByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class editRequirementDocumentByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal editRequirementDocumentByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CRequirementDocument Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CRequirementDocument)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void saveRequirementDocumentCompletedEventHandler(object sender, saveRequirementDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveRequirementDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveRequirementDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void cancelSaveRequirementDocumentCompletedEventHandler(object sender, cancelSaveRequirementDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class cancelSaveRequirementDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal cancelSaveRequirementDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void createSnapshotCompletedEventHandler(object sender, createSnapshotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createSnapshotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createSnapshotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getRequirementIDsForDocumentCompletedEventHandler(object sender, getRequirementIDsForDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getRequirementIDsForDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getRequirementIDsForDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getDocumentTreeCompletedEventHandler(object sender, getDocumentTreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTreeNodeSoap Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTreeNodeSoap)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFolderTreeByRecordIDCompletedEventHandler(object sender, getFolderTreeByRecordIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFolderTreeByRecordIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFolderTreeByRecordIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTreeNodeSoap Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTreeNodeSoap)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getFolderTreeCompletedEventHandler(object sender, getFolderTreeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFolderTreeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFolderTreeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CTreeNodeSoap Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CTreeNodeSoap)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getItemHyperlinksCompletedEventHandler(object sender, getItemHyperlinksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getItemHyperlinksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getItemHyperlinksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CItemHyperlinkContainer Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CItemHyperlinkContainer)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591